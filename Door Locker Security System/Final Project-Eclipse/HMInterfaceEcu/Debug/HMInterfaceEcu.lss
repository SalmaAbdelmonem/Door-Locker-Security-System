
HMInterfaceEcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  000033c0  00003454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800156  00800156  0000354a  2**0
                  ALLOC
  3 .stab         00003048  00000000  00000000  0000354c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001483  00000000  00000000  00006594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b995  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__vector_3>
      10:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__vector_8>
      24:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e3       	ldi	r24, 0x3F	; 63
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                             Main Function                                   *
 *******************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7); //setting I-bit by one
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	LCD_init(); //initialize LCD
     b68:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_init>
	UART_init(&UART_Config); //initialize UART
     b6c:	87 e4       	ldi	r24, 0x47	; 71
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 2d 18 	call	0x305a	; 0x305a <UART_init>

	LCD_clearScreen(); //clear LCD screen
     b74:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
	LCD_displayString( "DOOR LOCKER" ); //display DOOR LOCKER on LCD line 1
     b78:	80 e6       	ldi	r24, 0x60	; 96
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
	LCD_moveCursor(1,0);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
	LCD_displayString( "SECURITY SYSTEM" ); //display SECURITY SYSTEM on LCD line 2
     b88:	8c e6       	ldi	r24, 0x6C	; 108
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e8       	ldi	r25, 0x80	; 128
     b94:	ab e3       	ldi	r26, 0x3B	; 59
     b96:	b5 e4       	ldi	r27, 0x45	; 69
     b98:	8b 87       	std	Y+11, r24	; 0x0b
     b9a:	9c 87       	std	Y+12, r25	; 0x0c
     b9c:	ad 87       	std	Y+13, r26	; 0x0d
     b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a e7       	ldi	r20, 0x7A	; 122
     bae:	53 e4       	ldi	r21, 0x43	; 67
     bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	8f 83       	std	Y+7, r24	; 0x07
     bba:	98 87       	std	Y+8, r25	; 0x08
     bbc:	a9 87       	std	Y+9, r26	; 0x09
     bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc0:	6f 81       	ldd	r22, Y+7	; 0x07
     bc2:	78 85       	ldd	r23, Y+8	; 0x08
     bc4:	89 85       	ldd	r24, Y+9	; 0x09
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	2c f4       	brge	.+10     	; 0xbe2 <main+0x9c>
		__ticks = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9e 83       	std	Y+6, r25	; 0x06
     bde:	8d 83       	std	Y+5, r24	; 0x05
     be0:	3f c0       	rjmp	.+126    	; 0xc60 <main+0x11a>
	else if (__tmp > 65535)
     be2:	6f 81       	ldd	r22, Y+7	; 0x07
     be4:	78 85       	ldd	r23, Y+8	; 0x08
     be6:	89 85       	ldd	r24, Y+9	; 0x09
     be8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	3f ef       	ldi	r19, 0xFF	; 255
     bee:	4f e7       	ldi	r20, 0x7F	; 127
     bf0:	57 e4       	ldi	r21, 0x47	; 71
     bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	4c f5       	brge	.+82     	; 0xc4c <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <main+0xfc>
     c24:	89 e1       	ldi	r24, 0x19	; 25
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <main+0xea>
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	69 f7       	brne	.-38     	; 0xc24 <main+0xde>
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <main+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <main+0x126>
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000); //hold display of DOOR LOCKER SECURITY SYSTEM on LCD for 3secs

	while(1)
	{

		if( g_setPass == 0) //check if password is not set yet
     c74:	80 91 5a 01 	lds	r24, 0x015A
     c78:	88 23       	and	r24, r24
     c7a:	19 f4       	brne	.+6      	; 0xc82 <main+0x13c>
		{
			Set_Password();
     c7c:	0e 94 d3 06 	call	0xda6	; 0xda6 <Set_Password>
     c80:	f9 cf       	rjmp	.-14     	; 0xc74 <main+0x12e>
		}

		else if( g_setPass == 1) //check if password is set
     c82:	80 91 5a 01 	lds	r24, 0x015A
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	a9 f7       	brne	.-22     	; 0xc74 <main+0x12e>
		{
			Main_Options();
     c8a:	0e 94 48 06 	call	0xc90	; 0xc90 <Main_Options>
     c8e:	f2 cf       	rjmp	.-28     	; 0xc74 <main+0x12e>

00000c90 <Main_Options>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Main_Options(void)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <Main_Options+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <Main_Options+0x8>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <Main_Options+0xa>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
     c9e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
	LCD_displayString( "(+):Open Door" ); //display (+):Open Door on LCD line 1
     ca2:	8c e7       	ldi	r24, 0x7C	; 124
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
	LCD_moveCursor(1,0);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
	LCD_displayString( "(-):Change Pass" ); //display (-):Change Pass on LCD line 2
     cb2:	8a e8       	ldi	r24, 0x8A	; 138
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>

	switch( KEYPAD_getPressedKey() ) // switch to check which condition is chosen + or -
     cba:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	3e 83       	std	Y+6, r19	; 0x06
     cc4:	2d 83       	std	Y+5, r18	; 0x05
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	8b 32       	cpi	r24, 0x2B	; 43
     ccc:	91 05       	cpc	r25, r1
     cce:	31 f0       	breq	.+12     	; 0xcdc <Main_Options+0x4c>
     cd0:	2d 81       	ldd	r18, Y+5	; 0x05
     cd2:	3e 81       	ldd	r19, Y+6	; 0x06
     cd4:	2d 32       	cpi	r18, 0x2D	; 45
     cd6:	31 05       	cpc	r19, r1
     cd8:	81 f1       	breq	.+96     	; 0xd3a <Main_Options+0xaa>
     cda:	5c c0       	rjmp	.+184    	; 0xd94 <Main_Options+0x104>
	{
	case '+': //open the door choice
		LCD_clearScreen();
     cdc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
		LCD_displayString( "ENTER YOUR PASS:" );
     ce0:	8a e9       	ldi	r24, 0x9A	; 154
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
		LCD_moveCursor(1,0x05);
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	65 e0       	ldi	r22, 0x05	; 5
     cec:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>

		Enter_Password( g_password );
     cf0:	88 e6       	ldi	r24, 0x68	; 104
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 3c 07 	call	0xe78	; 0xe78 <Enter_Password>
		Send_Command( CHECK_PASS ); //command to tell Control ECU check if the password is correct or not
     cf8:	8b e4       	ldi	r24, 0x4B	; 75
     cfa:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Send_Command>
		Send_Password( g_password ); //send entered password to Control ECU
     cfe:	88 e6       	ldi	r24, 0x68	; 104
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Send_Password>

		switch (Receive_Command()) //switch check which command is received from Control ECU
     d06:	0e 94 22 0c 	call	0x1844	; 0x1844 <Receive_Command>
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	3c 83       	std	Y+4, r19	; 0x04
     d10:	2b 83       	std	Y+3, r18	; 0x03
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	8d 34       	cpi	r24, 0x4D	; 77
     d18:	91 05       	cpc	r25, r1
     d1a:	31 f0       	breq	.+12     	; 0xd28 <Main_Options+0x98>
     d1c:	2b 81       	ldd	r18, Y+3	; 0x03
     d1e:	3c 81       	ldd	r19, Y+4	; 0x04
     d20:	25 35       	cpi	r18, 0x55	; 85
     d22:	31 05       	cpc	r19, r1
     d24:	39 f0       	breq	.+14     	; 0xd34 <Main_Options+0xa4>
     d26:	36 c0       	rjmp	.+108    	; 0xd94 <Main_Options+0x104>
		{
		case MATCHED_PASS: //if entered password is correct
			Send_Command( OPEN_DOOR ); //send command open the door to Control ECU
     d28:	81 e4       	ldi	r24, 0x41	; 65
     d2a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Send_Command>
			Door_State_Display();
     d2e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Door_State_Display>
     d32:	30 c0       	rjmp	.+96     	; 0xd94 <Main_Options+0x104>
			break;

		case UNMATCHED_PASS: //if entered password is not correct
			Wrong_Password_Display();
     d34:	0e 94 18 09 	call	0x1230	; 0x1230 <Wrong_Password_Display>
     d38:	2d c0       	rjmp	.+90     	; 0xd94 <Main_Options+0x104>
			break;
		}
		break;

		case '-': //set password choice
			LCD_clearScreen();
     d3a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
			LCD_displayString( "ENTER YOUR PASS:" );
     d3e:	8a e9       	ldi	r24, 0x9A	; 154
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
			LCD_moveCursor(1,0x05);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	65 e0       	ldi	r22, 0x05	; 5
     d4a:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
			g_entryCounter = 0;
     d4e:	10 92 59 01 	sts	0x0159, r1

			Enter_Password( g_password );
     d52:	88 e6       	ldi	r24, 0x68	; 104
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 3c 07 	call	0xe78	; 0xe78 <Enter_Password>
			Send_Command( CHECK_PASS );
     d5a:	8b e4       	ldi	r24, 0x4B	; 75
     d5c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Send_Command>
			Send_Password(g_password);
     d60:	88 e6       	ldi	r24, 0x68	; 104
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Send_Password>

			switch ( Receive_Command() )
     d68:	0e 94 22 0c 	call	0x1844	; 0x1844 <Receive_Command>
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3a 83       	std	Y+2, r19	; 0x02
     d72:	29 83       	std	Y+1, r18	; 0x01
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	8d 34       	cpi	r24, 0x4D	; 77
     d7a:	91 05       	cpc	r25, r1
     d7c:	31 f0       	breq	.+12     	; 0xd8a <Main_Options+0xfa>
     d7e:	29 81       	ldd	r18, Y+1	; 0x01
     d80:	3a 81       	ldd	r19, Y+2	; 0x02
     d82:	25 35       	cpi	r18, 0x55	; 85
     d84:	31 05       	cpc	r19, r1
     d86:	21 f0       	breq	.+8      	; 0xd90 <Main_Options+0x100>
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <Main_Options+0x104>
			{
			case MATCHED_PASS: //if entered password is correct
				Set_Password();
     d8a:	0e 94 d3 06 	call	0xda6	; 0xda6 <Set_Password>
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <Main_Options+0x104>
				break;

			case UNMATCHED_PASS: //if entered password is not correct
				Wrong_Password_Display();
     d90:	0e 94 18 09 	call	0x1230	; 0x1230 <Wrong_Password_Display>
				break;
			}
			break;
	}
}
     d94:	26 96       	adiw	r28, 0x06	; 6
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <Set_Password>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Set_Password(void)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	00 d0       	rcall	.+0      	; 0xdac <Set_Password+0x6>
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	g_setPass = 0;
     db0:	10 92 5a 01 	sts	0x015A, r1
	if(g_entryCounter==0)
     db4:	80 91 59 01 	lds	r24, 0x0159
     db8:	88 23       	and	r24, r24
     dba:	d1 f4       	brne	.+52     	; 0xdf0 <Set_Password+0x4a>
	{
		g_entryCounter++;
     dbc:	80 91 59 01 	lds	r24, 0x0159
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	80 93 59 01 	sts	0x0159, r24
		LCD_clearScreen();
     dc6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
		LCD_displayString( "ENTER NEW PASS:" );
     dca:	8b ea       	ldi	r24, 0xAB	; 171
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
		LCD_moveCursor(1,0x05);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	65 e0       	ldi	r22, 0x05	; 5
     dd6:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>

		Enter_Password( g_pass );
     dda:	82 e6       	ldi	r24, 0x62	; 98
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 3c 07 	call	0xe78	; 0xe78 <Enter_Password>
		Send_Command( PASSWORD_ENTERED );
     de2:	85 e4       	ldi	r24, 0x45	; 69
     de4:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Send_Command>
		Send_Password( g_pass );
     de8:	82 e6       	ldi	r24, 0x62	; 98
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Send_Password>
	}

	if(g_entryCounter==1)
     df0:	80 91 59 01 	lds	r24, 0x0159
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	d1 f4       	brne	.+52     	; 0xe2c <Set_Password+0x86>
	{
		g_entryCounter++;
     df8:	80 91 59 01 	lds	r24, 0x0159
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	80 93 59 01 	sts	0x0159, r24
		LCD_clearScreen();
     e02:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
		LCD_displayString( " RE-ENTER PASS:");
     e06:	8b eb       	ldi	r24, 0xBB	; 187
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
		LCD_moveCursor(1,0x05);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	65 e0       	ldi	r22, 0x05	; 5
     e12:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>

		Enter_Password(g_pass);
     e16:	82 e6       	ldi	r24, 0x62	; 98
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	0e 94 3c 07 	call	0xe78	; 0xe78 <Enter_Password>
		Send_Command(PASSWORD_RE_ENTERED);
     e1e:	82 e5       	ldi	r24, 0x52	; 82
     e20:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Send_Command>
		Send_Password(g_pass);
     e24:	82 e6       	ldi	r24, 0x62	; 98
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Send_Password>
	}

	if (g_entryCounter==2)
     e2c:	80 91 59 01 	lds	r24, 0x0159
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	e9 f4       	brne	.+58     	; 0xe6e <Set_Password+0xc8>
	{
		g_entryCounter = 0;
     e34:	10 92 59 01 	sts	0x0159, r1
		switch( Receive_Command() )
     e38:	0e 94 22 0c 	call	0x1844	; 0x1844 <Receive_Command>
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	3a 83       	std	Y+2, r19	; 0x02
     e42:	29 83       	std	Y+1, r18	; 0x01
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	8d 34       	cpi	r24, 0x4D	; 77
     e4a:	91 05       	cpc	r25, r1
     e4c:	31 f0       	breq	.+12     	; 0xe5a <Set_Password+0xb4>
     e4e:	29 81       	ldd	r18, Y+1	; 0x01
     e50:	3a 81       	ldd	r19, Y+2	; 0x02
     e52:	25 35       	cpi	r18, 0x55	; 85
     e54:	31 05       	cpc	r19, r1
     e56:	39 f0       	breq	.+14     	; 0xe66 <Set_Password+0xc0>
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <Set_Password+0xc8>
		{
		case MATCHED_PASS:
			Matched_Pass_Display();
     e5a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <Matched_Pass_Display>
			g_setPass = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 5a 01 	sts	0x015A, r24
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <Set_Password+0xc8>
			break;

		case UNMATCHED_PASS:
			Unmatched_Pass_Display();
     e66:	0e 94 66 0a 	call	0x14cc	; 0x14cc <Unmatched_Pass_Display>
			Set_Password();
     e6a:	0e 94 d3 06 	call	0xda6	; 0xda6 <Set_Password>
			break;
		}
	}
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <Enter_Password>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Enter_Password( uint8 a_pass[] )
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	ad 97       	sbiw	r28, 0x2d	; 45
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	9d a7       	std	Y+45, r25	; 0x2d
     e8e:	8c a7       	std	Y+44, r24	; 0x2c

	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
     e90:	1b a6       	std	Y+43, r1	; 0x2b
     e92:	a3 c0       	rjmp	.+326    	; 0xfda <Enter_Password+0x162>
	{
		g_pressedKey = KEYPAD_getPressedKey();
     e94:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
     e98:	80 93 61 01 	sts	0x0161, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e8       	ldi	r25, 0x80	; 128
     ea0:	ab eb       	ldi	r26, 0xBB	; 187
     ea2:	b4 e4       	ldi	r27, 0x44	; 68
     ea4:	8f a3       	std	Y+39, r24	; 0x27
     ea6:	98 a7       	std	Y+40, r25	; 0x28
     ea8:	a9 a7       	std	Y+41, r26	; 0x29
     eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	6f a1       	ldd	r22, Y+39	; 0x27
     eae:	78 a5       	ldd	r23, Y+40	; 0x28
     eb0:	89 a5       	ldd	r24, Y+41	; 0x29
     eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a e7       	ldi	r20, 0x7A	; 122
     eba:	53 e4       	ldi	r21, 0x43	; 67
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8b a3       	std	Y+35, r24	; 0x23
     ec6:	9c a3       	std	Y+36, r25	; 0x24
     ec8:	ad a3       	std	Y+37, r26	; 0x25
     eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ecc:	6b a1       	ldd	r22, Y+35	; 0x23
     ece:	7c a1       	ldd	r23, Y+36	; 0x24
     ed0:	8d a1       	ldd	r24, Y+37	; 0x25
     ed2:	9e a1       	ldd	r25, Y+38	; 0x26
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <Enter_Password+0x76>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9a a3       	std	Y+34, r25	; 0x22
     eea:	89 a3       	std	Y+33, r24	; 0x21
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <Enter_Password+0xf4>
	else if (__tmp > 65535)
     eee:	6b a1       	ldd	r22, Y+35	; 0x23
     ef0:	7c a1       	ldd	r23, Y+36	; 0x24
     ef2:	8d a1       	ldd	r24, Y+37	; 0x25
     ef4:	9e a1       	ldd	r25, Y+38	; 0x26
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <Enter_Password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	6f a1       	ldd	r22, Y+39	; 0x27
     f08:	78 a5       	ldd	r23, Y+40	; 0x28
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <Enter_Password+0xd6>
     f30:	89 e1       	ldi	r24, 0x19	; 25
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	98 a3       	std	Y+32, r25	; 0x20
     f36:	8f 8f       	std	Y+31, r24	; 0x1f
     f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3a:	98 a1       	ldd	r25, Y+32	; 0x20
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <Enter_Password+0xc4>
     f40:	98 a3       	std	Y+32, r25	; 0x20
     f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	9a a1       	ldd	r25, Y+34	; 0x22
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	89 a1       	ldd	r24, Y+33	; 0x21
     f50:	9a a1       	ldd	r25, Y+34	; 0x22
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <Enter_Password+0xb8>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <Enter_Password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6b a1       	ldd	r22, Y+35	; 0x23
     f5a:	7c a1       	ldd	r23, Y+36	; 0x24
     f5c:	8d a1       	ldd	r24, Y+37	; 0x25
     f5e:	9e a1       	ldd	r25, Y+38	; 0x26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	9e 8f       	std	Y+30, r25	; 0x1e
     f72:	8d 8f       	std	Y+29, r24	; 0x1d
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <Enter_Password+0x100>
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1500);

		if( ( g_pressedKey >= 0 ) && ( g_pressedKey <= 9) && (g_pressedKey != '=') )
     f80:	80 91 61 01 	lds	r24, 0x0161
     f84:	8a 30       	cpi	r24, 0x0A	; 10
     f86:	98 f4       	brcc	.+38     	; 0xfae <Enter_Password+0x136>
     f88:	80 91 61 01 	lds	r24, 0x0161
     f8c:	8d 33       	cpi	r24, 0x3D	; 61
     f8e:	79 f0       	breq	.+30     	; 0xfae <Enter_Password+0x136>
		{
			a_pass[i] = g_pressedKey;
     f90:	8b a5       	ldd	r24, Y+43	; 0x2b
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8c a5       	ldd	r24, Y+44	; 0x2c
     f98:	9d a5       	ldd	r25, Y+45	; 0x2d
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	80 91 61 01 	lds	r24, 0x0161
     fa4:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
     fa6:	8a e2       	ldi	r24, 0x2A	; 42
     fa8:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_displayCharacter>
     fac:	13 c0       	rjmp	.+38     	; 0xfd4 <Enter_Password+0x15c>
//			LCD_intgerToString(g_pressedKey);
		}
		else if (( g_pressedKey == '*' ) || ( g_pressedKey == '/') || (g_pressedKey == '+') || (g_pressedKey == '-') )
     fae:	80 91 61 01 	lds	r24, 0x0161
     fb2:	8a 32       	cpi	r24, 0x2A	; 42
     fb4:	61 f0       	breq	.+24     	; 0xfce <Enter_Password+0x156>
     fb6:	80 91 61 01 	lds	r24, 0x0161
     fba:	8f 32       	cpi	r24, 0x2F	; 47
     fbc:	41 f0       	breq	.+16     	; 0xfce <Enter_Password+0x156>
     fbe:	80 91 61 01 	lds	r24, 0x0161
     fc2:	8b 32       	cpi	r24, 0x2B	; 43
     fc4:	21 f0       	breq	.+8      	; 0xfce <Enter_Password+0x156>
     fc6:	80 91 61 01 	lds	r24, 0x0161
     fca:	8d 32       	cpi	r24, 0x2D	; 45
     fcc:	19 f4       	brne	.+6      	; 0xfd4 <Enter_Password+0x15c>
		{
			i--;
     fce:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd0:	81 50       	subi	r24, 0x01	; 1
     fd2:	8b a7       	std	Y+43, r24	; 0x2b
 ***************************************************************************************************/

void Enter_Password( uint8 a_pass[] )
{

	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
     fd4:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	8b a7       	std	Y+43, r24	; 0x2b
     fda:	8b a5       	ldd	r24, Y+43	; 0x2b
     fdc:	85 30       	cpi	r24, 0x05	; 5
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <Enter_Password+0x16a>
     fe0:	59 cf       	rjmp	.-334    	; 0xe94 <Enter_Password+0x1c>
		{
			i--;
		}
	}

	g_pressedKey = KEYPAD_getPressedKey();
     fe2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
     fe6:	80 93 61 01 	sts	0x0161, r24
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e8       	ldi	r25, 0x80	; 128
     fee:	ab eb       	ldi	r26, 0xBB	; 187
     ff0:	b4 e4       	ldi	r27, 0x44	; 68
     ff2:	89 8f       	std	Y+25, r24	; 0x19
     ff4:	9a 8f       	std	Y+26, r25	; 0x1a
     ff6:	ab 8f       	std	Y+27, r26	; 0x1b
     ff8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	69 8d       	ldd	r22, Y+25	; 0x19
     ffc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ffe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1000:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a e7       	ldi	r20, 0x7A	; 122
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	8d 8b       	std	Y+21, r24	; 0x15
    1014:	9e 8b       	std	Y+22, r25	; 0x16
    1016:	af 8b       	std	Y+23, r26	; 0x17
    1018:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101a:	6d 89       	ldd	r22, Y+21	; 0x15
    101c:	7e 89       	ldd	r23, Y+22	; 0x16
    101e:	8f 89       	ldd	r24, Y+23	; 0x17
    1020:	98 8d       	ldd	r25, Y+24	; 0x18
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	5f e3       	ldi	r21, 0x3F	; 63
    102a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102e:	88 23       	and	r24, r24
    1030:	2c f4       	brge	.+10     	; 0x103c <Enter_Password+0x1c4>
		__ticks = 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
    103a:	3f c0       	rjmp	.+126    	; 0x10ba <Enter_Password+0x242>
	else if (__tmp > 65535)
    103c:	6d 89       	ldd	r22, Y+21	; 0x15
    103e:	7e 89       	ldd	r23, Y+22	; 0x16
    1040:	8f 89       	ldd	r24, Y+23	; 0x17
    1042:	98 8d       	ldd	r25, Y+24	; 0x18
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	3f ef       	ldi	r19, 0xFF	; 255
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	57 e4       	ldi	r21, 0x47	; 71
    104c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1050:	18 16       	cp	r1, r24
    1052:	4c f5       	brge	.+82     	; 0x10a6 <Enter_Password+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1054:	69 8d       	ldd	r22, Y+25	; 0x19
    1056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	51 e4       	ldi	r21, 0x41	; 65
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	9c 8b       	std	Y+20, r25	; 0x14
    107a:	8b 8b       	std	Y+19, r24	; 0x13
    107c:	0f c0       	rjmp	.+30     	; 0x109c <Enter_Password+0x224>
    107e:	89 e1       	ldi	r24, 0x19	; 25
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9a 8b       	std	Y+18, r25	; 0x12
    1084:	89 8b       	std	Y+17, r24	; 0x11
    1086:	89 89       	ldd	r24, Y+17	; 0x11
    1088:	9a 89       	ldd	r25, Y+18	; 0x12
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <Enter_Password+0x212>
    108e:	9a 8b       	std	Y+18, r25	; 0x12
    1090:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	8b 89       	ldd	r24, Y+19	; 0x13
    1094:	9c 89       	ldd	r25, Y+20	; 0x14
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	9c 8b       	std	Y+20, r25	; 0x14
    109a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	69 f7       	brne	.-38     	; 0x107e <Enter_Password+0x206>
    10a4:	8b c0       	rjmp	.+278    	; 0x11bc <Enter_Password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	6d 89       	ldd	r22, Y+21	; 0x15
    10a8:	7e 89       	ldd	r23, Y+22	; 0x16
    10aa:	8f 89       	ldd	r24, Y+23	; 0x17
    10ac:	98 8d       	ldd	r25, Y+24	; 0x18
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9c 8b       	std	Y+20, r25	; 0x14
    10b8:	8b 8b       	std	Y+19, r24	; 0x13
    10ba:	8b 89       	ldd	r24, Y+19	; 0x13
    10bc:	9c 89       	ldd	r25, Y+20	; 0x14
    10be:	98 8b       	std	Y+16, r25	; 0x10
    10c0:	8f 87       	std	Y+15, r24	; 0x0f
    10c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c4:	98 89       	ldd	r25, Y+16	; 0x10
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <Enter_Password+0x24e>
    10ca:	98 8b       	std	Y+16, r25	; 0x10
    10cc:	8f 87       	std	Y+15, r24	; 0x0f
    10ce:	76 c0       	rjmp	.+236    	; 0x11bc <Enter_Password+0x344>
	_delay_ms(1500);

	while(g_pressedKey != '=')
	{
		g_pressedKey = KEYPAD_getPressedKey();
    10d0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_getPressedKey>
    10d4:	80 93 61 01 	sts	0x0161, r24
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e8       	ldi	r25, 0x80	; 128
    10dc:	ab eb       	ldi	r26, 0xBB	; 187
    10de:	b4 e4       	ldi	r27, 0x44	; 68
    10e0:	8b 87       	std	Y+11, r24	; 0x0b
    10e2:	9c 87       	std	Y+12, r25	; 0x0c
    10e4:	ad 87       	std	Y+13, r26	; 0x0d
    10e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	4a e7       	ldi	r20, 0x7A	; 122
    10f6:	53 e4       	ldi	r21, 0x43	; 67
    10f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	8f 83       	std	Y+7, r24	; 0x07
    1102:	98 87       	std	Y+8, r25	; 0x08
    1104:	a9 87       	std	Y+9, r26	; 0x09
    1106:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1108:	6f 81       	ldd	r22, Y+7	; 0x07
    110a:	78 85       	ldd	r23, Y+8	; 0x08
    110c:	89 85       	ldd	r24, Y+9	; 0x09
    110e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e8       	ldi	r20, 0x80	; 128
    1116:	5f e3       	ldi	r21, 0x3F	; 63
    1118:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111c:	88 23       	and	r24, r24
    111e:	2c f4       	brge	.+10     	; 0x112a <Enter_Password+0x2b2>
		__ticks = 1;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	3f c0       	rjmp	.+126    	; 0x11a8 <Enter_Password+0x330>
	else if (__tmp > 65535)
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	3f ef       	ldi	r19, 0xFF	; 255
    1136:	4f e7       	ldi	r20, 0x7F	; 127
    1138:	57 e4       	ldi	r21, 0x47	; 71
    113a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113e:	18 16       	cp	r1, r24
    1140:	4c f5       	brge	.+82     	; 0x1194 <Enter_Password+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1142:	6b 85       	ldd	r22, Y+11	; 0x0b
    1144:	7c 85       	ldd	r23, Y+12	; 0x0c
    1146:	8d 85       	ldd	r24, Y+13	; 0x0d
    1148:	9e 85       	ldd	r25, Y+14	; 0x0e
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e2       	ldi	r20, 0x20	; 32
    1150:	51 e4       	ldi	r21, 0x41	; 65
    1152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	0f c0       	rjmp	.+30     	; 0x118a <Enter_Password+0x312>
    116c:	89 e1       	ldi	r24, 0x19	; 25
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <Enter_Password+0x300>
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	9e 83       	std	Y+6, r25	; 0x06
    1188:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	69 f7       	brne	.-38     	; 0x116c <Enter_Password+0x2f4>
    1192:	14 c0       	rjmp	.+40     	; 0x11bc <Enter_Password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1194:	6f 81       	ldd	r22, Y+7	; 0x07
    1196:	78 85       	ldd	r23, Y+8	; 0x08
    1198:	89 85       	ldd	r24, Y+9	; 0x09
    119a:	9a 85       	ldd	r25, Y+10	; 0x0a
    119c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	8d 83       	std	Y+5, r24	; 0x05
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	9a 83       	std	Y+2, r25	; 0x02
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <Enter_Password+0x33c>
    11b8:	9a 83       	std	Y+2, r25	; 0x02
    11ba:	89 83       	std	Y+1, r24	; 0x01
	}

	g_pressedKey = KEYPAD_getPressedKey();
	_delay_ms(1500);

	while(g_pressedKey != '=')
    11bc:	80 91 61 01 	lds	r24, 0x0161
    11c0:	8d 33       	cpi	r24, 0x3D	; 61
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <Enter_Password+0x34e>
    11c4:	85 cf       	rjmp	.-246    	; 0x10d0 <Enter_Password+0x258>
	{
		g_pressedKey = KEYPAD_getPressedKey();
		_delay_ms(1500);
	}
}
    11c6:	ad 96       	adiw	r28, 0x2d	; 45
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <Send_Password>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Send_Password( uint8 a_enteredPass[] )
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <Send_Password+0x6>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9b 83       	std	Y+3, r25	; 0x03
    11e6:	8a 83       	std	Y+2, r24	; 0x02
	UART_sendByte(READY);
    11e8:	89 e5       	ldi	r24, 0x59	; 89
    11ea:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_sendByte>

	while( UART_recieveByte() != READY ){};
    11ee:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    11f2:	89 35       	cpi	r24, 0x59	; 89
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <Send_Password+0x16>

	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	0e c0       	rjmp	.+28     	; 0x1216 <Send_Password+0x3e>
	{
		UART_sendByte( a_enteredPass[i] );
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	fc 01       	movw	r30, r24
    1206:	e2 0f       	add	r30, r18
    1208:	f3 1f       	adc	r31, r19
    120a:	80 81       	ld	r24, Z
    120c:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_sendByte>
{
	UART_sendByte(READY);

	while( UART_recieveByte() != READY ){};

	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	85 30       	cpi	r24, 0x05	; 5
    121a:	78 f3       	brcs	.-34     	; 0x11fa <Send_Password+0x22>
	{
		UART_sendByte( a_enteredPass[i] );
	}

	while( UART_recieveByte() != DONE ){};
    121c:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    1220:	84 34       	cpi	r24, 0x44	; 68
    1222:	e1 f7       	brne	.-8      	; 0x121c <Send_Password+0x44>
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <Wrong_Password_Display>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Wrong_Password_Display(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	2e 97       	sbiw	r28, 0x0e	; 14
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1244:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
	LCD_displayString( " WRONG PASSWORD");
    1248:	8b ec       	ldi	r24, 0xCB	; 203
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e8       	ldi	r25, 0x80	; 128
    1254:	ab e3       	ldi	r26, 0x3B	; 59
    1256:	b5 e4       	ldi	r27, 0x45	; 69
    1258:	8b 87       	std	Y+11, r24	; 0x0b
    125a:	9c 87       	std	Y+12, r25	; 0x0c
    125c:	ad 87       	std	Y+13, r26	; 0x0d
    125e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	6b 85       	ldd	r22, Y+11	; 0x0b
    1262:	7c 85       	ldd	r23, Y+12	; 0x0c
    1264:	8d 85       	ldd	r24, Y+13	; 0x0d
    1266:	9e 85       	ldd	r25, Y+14	; 0x0e
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	53 e4       	ldi	r21, 0x43	; 67
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8f 83       	std	Y+7, r24	; 0x07
    127a:	98 87       	std	Y+8, r25	; 0x08
    127c:	a9 87       	std	Y+9, r26	; 0x09
    127e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1280:	6f 81       	ldd	r22, Y+7	; 0x07
    1282:	78 85       	ldd	r23, Y+8	; 0x08
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <Wrong_Password_Display+0x72>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9e 83       	std	Y+6, r25	; 0x06
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <Wrong_Password_Display+0xf0>
	else if (__tmp > 65535)
    12a2:	6f 81       	ldd	r22, Y+7	; 0x07
    12a4:	78 85       	ldd	r23, Y+8	; 0x08
    12a6:	89 85       	ldd	r24, Y+9	; 0x09
    12a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <Wrong_Password_Display+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    12bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12be:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <Wrong_Password_Display+0xd2>
    12e4:	89 e1       	ldi	r24, 0x19	; 25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <Wrong_Password_Display+0xc0>
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <Wrong_Password_Display+0xb4>
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <Wrong_Password_Display+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6f 81       	ldd	r22, Y+7	; 0x07
    130e:	78 85       	ldd	r23, Y+8	; 0x08
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9e 83       	std	Y+6, r25	; 0x06
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <Wrong_Password_Display+0xfc>
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	g_wrongEntry++;
    1334:	80 91 58 01 	lds	r24, 0x0158
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	80 93 58 01 	sts	0x0158, r24

	if(g_wrongEntry == 3)
    133e:	80 91 58 01 	lds	r24, 0x0158
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	29 f4       	brne	.+10     	; 0x1350 <Wrong_Password_Display+0x120>
	{
		Send_Command( WRONG_PASS );
    1346:	87 e5       	ldi	r24, 0x57	; 87
    1348:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Send_Command>
		Buzzer_State_Display();
    134c:	0e 94 b1 09 	call	0x1362	; 0x1362 <Buzzer_State_Display>
	}
}
    1350:	2e 96       	adiw	r28, 0x0e	; 14
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <Buzzer_State_Display>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Buzzer_State_Display(void)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    136a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
	Timer_init( &Timer_Config );
    136e:	8e e4       	ldi	r24, 0x4E	; 78
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Timer_init>
	Timer0_setCallBack( Timer_tickCounterBuzzerMessage );
    1376:	88 ec       	ldi	r24, 0xC8	; 200
    1378:	9b e0       	ldi	r25, 0x0B	; 11
    137a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Timer0_setCallBack>
    137e:	10 c0       	rjmp	.+32     	; 0x13a0 <Buzzer_State_Display+0x3e>

	while( g_tick != TIMER02_OV_TICKS_1MIN_1024 )
	{
		LCD_moveCursor(0,0x06);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	66 e0       	ldi	r22, 0x06	; 6
    1384:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
		LCD_displayString( "THEIF" );
    1388:	8b ed       	ldi	r24, 0xDB	; 219
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
		LCD_moveCursor(1,0x06);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	66 e0       	ldi	r22, 0x06	; 6
    1394:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
		LCD_displayString( "THEIF" );
    1398:	8b ed       	ldi	r24, 0xDB	; 219
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
{
	LCD_clearScreen();
	Timer_init( &Timer_Config );
	Timer0_setCallBack( Timer_tickCounterBuzzerMessage );

	while( g_tick != TIMER02_OV_TICKS_1MIN_1024 )
    13a0:	80 91 56 01 	lds	r24, 0x0156
    13a4:	90 91 57 01 	lds	r25, 0x0157
    13a8:	27 e0       	ldi	r18, 0x07	; 7
    13aa:	87 32       	cpi	r24, 0x27	; 39
    13ac:	92 07       	cpc	r25, r18
    13ae:	41 f7       	brne	.-48     	; 0x1380 <Buzzer_State_Display+0x1e>
		LCD_moveCursor(0,0x06);
		LCD_displayString( "THEIF" );
		LCD_moveCursor(1,0x06);
		LCD_displayString( "THEIF" );
	}
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <Matched_Pass_Display>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Matched_Pass_Display(void)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	2e 97       	sbiw	r28, 0x0e	; 14
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    13ca:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
	LCD_displayString( "  PASS IS SET" );
    13ce:	81 ee       	ldi	r24, 0xE1	; 225
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e8       	ldi	r25, 0x80	; 128
    13da:	ab e3       	ldi	r26, 0x3B	; 59
    13dc:	b5 e4       	ldi	r27, 0x45	; 69
    13de:	8b 87       	std	Y+11, r24	; 0x0b
    13e0:	9c 87       	std	Y+12, r25	; 0x0c
    13e2:	ad 87       	std	Y+13, r26	; 0x0d
    13e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	4a e7       	ldi	r20, 0x7A	; 122
    13f4:	53 e4       	ldi	r21, 0x43	; 67
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	8f 83       	std	Y+7, r24	; 0x07
    1400:	98 87       	std	Y+8, r25	; 0x08
    1402:	a9 87       	std	Y+9, r26	; 0x09
    1404:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e8       	ldi	r20, 0x80	; 128
    1414:	5f e3       	ldi	r21, 0x3F	; 63
    1416:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    141a:	88 23       	and	r24, r24
    141c:	2c f4       	brge	.+10     	; 0x1428 <Matched_Pass_Display+0x72>
		__ticks = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
    1426:	3f c0       	rjmp	.+126    	; 0x14a6 <Matched_Pass_Display+0xf0>
	else if (__tmp > 65535)
    1428:	6f 81       	ldd	r22, Y+7	; 0x07
    142a:	78 85       	ldd	r23, Y+8	; 0x08
    142c:	89 85       	ldd	r24, Y+9	; 0x09
    142e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	4f e7       	ldi	r20, 0x7F	; 127
    1436:	57 e4       	ldi	r21, 0x47	; 71
    1438:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143c:	18 16       	cp	r1, r24
    143e:	4c f5       	brge	.+82     	; 0x1492 <Matched_Pass_Display+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1440:	6b 85       	ldd	r22, Y+11	; 0x0b
    1442:	7c 85       	ldd	r23, Y+12	; 0x0c
    1444:	8d 85       	ldd	r24, Y+13	; 0x0d
    1446:	9e 85       	ldd	r25, Y+14	; 0x0e
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e2       	ldi	r20, 0x20	; 32
    144e:	51 e4       	ldi	r21, 0x41	; 65
    1450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <Matched_Pass_Display+0xd2>
    146a:	89 e1       	ldi	r24, 0x19	; 25
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9c 83       	std	Y+4, r25	; 0x04
    1470:	8b 83       	std	Y+3, r24	; 0x03
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <Matched_Pass_Display+0xc0>
    147a:	9c 83       	std	Y+4, r25	; 0x04
    147c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147e:	8d 81       	ldd	r24, Y+5	; 0x05
    1480:	9e 81       	ldd	r25, Y+6	; 0x06
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	69 f7       	brne	.-38     	; 0x146a <Matched_Pass_Display+0xb4>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <Matched_Pass_Display+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <Matched_Pass_Display+0xfc>
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    14ba:	2e 96       	adiw	r28, 0x0e	; 14
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <Unmatched_Pass_Display>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Unmatched_Pass_Display(void)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	2e 97       	sbiw	r28, 0x0e	; 14
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    14e0:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
	LCD_displayString( " UNMATCHED PASS" );
    14e4:	8f ee       	ldi	r24, 0xEF	; 239
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e8       	ldi	r25, 0x80	; 128
    14f0:	ab e3       	ldi	r26, 0x3B	; 59
    14f2:	b5 e4       	ldi	r27, 0x45	; 69
    14f4:	8b 87       	std	Y+11, r24	; 0x0b
    14f6:	9c 87       	std	Y+12, r25	; 0x0c
    14f8:	ad 87       	std	Y+13, r26	; 0x0d
    14fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1500:	8d 85       	ldd	r24, Y+13	; 0x0d
    1502:	9e 85       	ldd	r25, Y+14	; 0x0e
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	4a e7       	ldi	r20, 0x7A	; 122
    150a:	53 e4       	ldi	r21, 0x43	; 67
    150c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	8f 83       	std	Y+7, r24	; 0x07
    1516:	98 87       	std	Y+8, r25	; 0x08
    1518:	a9 87       	std	Y+9, r26	; 0x09
    151a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    151c:	6f 81       	ldd	r22, Y+7	; 0x07
    151e:	78 85       	ldd	r23, Y+8	; 0x08
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e8       	ldi	r20, 0x80	; 128
    152a:	5f e3       	ldi	r21, 0x3F	; 63
    152c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1530:	88 23       	and	r24, r24
    1532:	2c f4       	brge	.+10     	; 0x153e <Unmatched_Pass_Display+0x72>
		__ticks = 1;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	3f c0       	rjmp	.+126    	; 0x15bc <Unmatched_Pass_Display+0xf0>
	else if (__tmp > 65535)
    153e:	6f 81       	ldd	r22, Y+7	; 0x07
    1540:	78 85       	ldd	r23, Y+8	; 0x08
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    1544:	9a 85       	ldd	r25, Y+10	; 0x0a
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	3f ef       	ldi	r19, 0xFF	; 255
    154a:	4f e7       	ldi	r20, 0x7F	; 127
    154c:	57 e4       	ldi	r21, 0x47	; 71
    154e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1552:	18 16       	cp	r1, r24
    1554:	4c f5       	brge	.+82     	; 0x15a8 <Unmatched_Pass_Display+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1556:	6b 85       	ldd	r22, Y+11	; 0x0b
    1558:	7c 85       	ldd	r23, Y+12	; 0x0c
    155a:	8d 85       	ldd	r24, Y+13	; 0x0d
    155c:	9e 85       	ldd	r25, Y+14	; 0x0e
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e2       	ldi	r20, 0x20	; 32
    1564:	51 e4       	ldi	r21, 0x41	; 65
    1566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	0f c0       	rjmp	.+30     	; 0x159e <Unmatched_Pass_Display+0xd2>
    1580:	89 e1       	ldi	r24, 0x19	; 25
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <Unmatched_Pass_Display+0xc0>
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	69 f7       	brne	.-38     	; 0x1580 <Unmatched_Pass_Display+0xb4>
    15a6:	14 c0       	rjmp	.+40     	; 0x15d0 <Unmatched_Pass_Display+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a8:	6f 81       	ldd	r22, Y+7	; 0x07
    15aa:	78 85       	ldd	r23, Y+8	; 0x08
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <Unmatched_Pass_Display+0xfc>
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    15d0:	2e 96       	adiw	r28, 0x0e	; 14
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <Door_State_Display>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Door_State_Display(void)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	2e 97       	sbiw	r28, 0x0e	; 14
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    15f6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LCD_clearScreen>
	Timer_init( &Timer_Config );
    15fa:	8e e4       	ldi	r24, 0x4E	; 78
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Timer_init>
	Timer0_setCallBack( Timer_tickCounterStateMessage );
    1602:	89 ee       	ldi	r24, 0xE9	; 233
    1604:	9b e0       	ldi	r25, 0x0B	; 11
    1606:	0e 94 f7 17 	call	0x2fee	; 0x2fee <Timer0_setCallBack>

	LCD_moveCursor(0,0);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
	LCD_displayString( "DOOR IS OPENING");
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
	while( g_tick <= TIMER02_OV_TICKS_15SEC_1024 ){};
    161a:	80 91 56 01 	lds	r24, 0x0156
    161e:	90 91 57 01 	lds	r25, 0x0157
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	8b 3c       	cpi	r24, 0xCB	; 203
    1626:	92 07       	cpc	r25, r18
    1628:	c0 f3       	brcs	.-16     	; 0x161a <Door_State_Display+0x38>

	LCD_moveCursor(0,0);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
	LCD_displayString( "  DOOR IS OPEN  ");
    1632:	8f e0       	ldi	r24, 0x0F	; 15
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
	while( (g_tick <= TIMER02_OV_TICKS_18SEC_1024) && (g_tick > TIMER02_OV_TICKS_15SEC_1024) ){};
    163a:	80 91 56 01 	lds	r24, 0x0156
    163e:	90 91 57 01 	lds	r25, 0x0157
    1642:	22 e0       	ldi	r18, 0x02	; 2
    1644:	87 32       	cpi	r24, 0x27	; 39
    1646:	92 07       	cpc	r25, r18
    1648:	40 f4       	brcc	.+16     	; 0x165a <Door_State_Display+0x78>
    164a:	80 91 56 01 	lds	r24, 0x0156
    164e:	90 91 57 01 	lds	r25, 0x0157
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	8b 3c       	cpi	r24, 0xCB	; 203
    1656:	92 07       	cpc	r25, r18
    1658:	80 f7       	brcc	.-32     	; 0x163a <Door_State_Display+0x58>

	LCD_moveCursor(0,0);
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
	LCD_displayString("DOOR IS CLOSING");
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
	while( (g_tick < TIMER02_OV_TICKS_33SEC_1024) && (g_tick > TIMER02_OV_TICKS_18SEC_1024) ){};
    166a:	80 91 56 01 	lds	r24, 0x0156
    166e:	90 91 57 01 	lds	r25, 0x0157
    1672:	23 e0       	ldi	r18, 0x03	; 3
    1674:	8f 3e       	cpi	r24, 0xEF	; 239
    1676:	92 07       	cpc	r25, r18
    1678:	40 f4       	brcc	.+16     	; 0x168a <Door_State_Display+0xa8>
    167a:	80 91 56 01 	lds	r24, 0x0156
    167e:	90 91 57 01 	lds	r25, 0x0157
    1682:	22 e0       	ldi	r18, 0x02	; 2
    1684:	87 32       	cpi	r24, 0x27	; 39
    1686:	92 07       	cpc	r25, r18
    1688:	80 f7       	brcc	.-32     	; 0x166a <Door_State_Display+0x88>

	LCD_moveCursor(0,0);
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
	LCD_displayString("DOOR IS LOCKED");
    1692:	80 e3       	ldi	r24, 0x30	; 48
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	aa e7       	ldi	r26, 0x7A	; 122
    16a0:	b5 e4       	ldi	r27, 0x45	; 69
    16a2:	8b 87       	std	Y+11, r24	; 0x0b
    16a4:	9c 87       	std	Y+12, r25	; 0x0c
    16a6:	ad 87       	std	Y+13, r26	; 0x0d
    16a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4a e7       	ldi	r20, 0x7A	; 122
    16b8:	53 e4       	ldi	r21, 0x43	; 67
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	8f 83       	std	Y+7, r24	; 0x07
    16c4:	98 87       	std	Y+8, r25	; 0x08
    16c6:	a9 87       	std	Y+9, r26	; 0x09
    16c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16de:	88 23       	and	r24, r24
    16e0:	2c f4       	brge	.+10     	; 0x16ec <Door_State_Display+0x10a>
		__ticks = 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9e 83       	std	Y+6, r25	; 0x06
    16e8:	8d 83       	std	Y+5, r24	; 0x05
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <Door_State_Display+0x188>
	else if (__tmp > 65535)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	57 e4       	ldi	r21, 0x47	; 71
    16fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	4c f5       	brge	.+82     	; 0x1756 <Door_State_Display+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1704:	6b 85       	ldd	r22, Y+11	; 0x0b
    1706:	7c 85       	ldd	r23, Y+12	; 0x0c
    1708:	8d 85       	ldd	r24, Y+13	; 0x0d
    170a:	9e 85       	ldd	r25, Y+14	; 0x0e
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e2       	ldi	r20, 0x20	; 32
    1712:	51 e4       	ldi	r21, 0x41	; 65
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	0f c0       	rjmp	.+30     	; 0x174c <Door_State_Display+0x16a>
    172e:	89 e1       	ldi	r24, 0x19	; 25
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <Door_State_Display+0x158>
    173e:	9c 83       	std	Y+4, r25	; 0x04
    1740:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	69 f7       	brne	.-38     	; 0x172e <Door_State_Display+0x14c>
    1754:	14 c0       	rjmp	.+40     	; 0x177e <Door_State_Display+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1756:	6f 81       	ldd	r22, Y+7	; 0x07
    1758:	78 85       	ldd	r23, Y+8	; 0x08
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <Door_State_Display+0x194>
    177a:	9a 83       	std	Y+2, r25	; 0x02
    177c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000);

}
    177e:	2e 96       	adiw	r28, 0x0e	; 14
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <Timer_tickCounterBuzzerMessage>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Timer_tickCounterBuzzerMessage(void)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1798:	80 91 56 01 	lds	r24, 0x0156
    179c:	90 91 57 01 	lds	r25, 0x0157
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	90 93 57 01 	sts	0x0157, r25
    17a6:	80 93 56 01 	sts	0x0156, r24
	if( g_tick == TIMER02_OV_TICKS_1MIN_1024 )
    17aa:	80 91 56 01 	lds	r24, 0x0156
    17ae:	90 91 57 01 	lds	r25, 0x0157
    17b2:	27 e0       	ldi	r18, 0x07	; 7
    17b4:	87 32       	cpi	r24, 0x27	; 39
    17b6:	92 07       	cpc	r25, r18
    17b8:	49 f4       	brne	.+18     	; 0x17cc <Timer_tickCounterBuzzerMessage+0x3c>
	{
		Timer_deInit(TIMER0);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <Timer_deInit>
		g_tick=0;
    17c0:	10 92 57 01 	sts	0x0157, r1
    17c4:	10 92 56 01 	sts	0x0156, r1
		g_wrongEntry = 0;
    17c8:	10 92 58 01 	sts	0x0158, r1
	}
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <Timer_tickCounterStateMessage>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Timer_tickCounterStateMessage(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    17da:	80 91 56 01 	lds	r24, 0x0156
    17de:	90 91 57 01 	lds	r25, 0x0157
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	90 93 57 01 	sts	0x0157, r25
    17e8:	80 93 56 01 	sts	0x0156, r24

	if( g_tick == TIMER02_OV_TICKS_33SEC_1024 )
    17ec:	80 91 56 01 	lds	r24, 0x0156
    17f0:	90 91 57 01 	lds	r25, 0x0157
    17f4:	23 e0       	ldi	r18, 0x03	; 3
    17f6:	8f 3e       	cpi	r24, 0xEF	; 239
    17f8:	92 07       	cpc	r25, r18
    17fa:	49 f4       	brne	.+18     	; 0x180e <Timer_tickCounterStateMessage+0x3c>
	{
		Timer_deInit(TIMER0);
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <Timer_deInit>
		g_tick=0;
    1802:	10 92 57 01 	sts	0x0157, r1
    1806:	10 92 56 01 	sts	0x0156, r1
		g_wrongEntry = 0;
    180a:	10 92 58 01 	sts	0x0158, r1
	}
}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <Send_Command>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Send_Command( uint8 command )
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    1820:	89 e5       	ldi	r24, 0x59	; 89
    1822:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_sendByte>
	while(UART_recieveByte() != READY){};
    1826:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    182a:	89 35       	cpi	r24, 0x59	; 89
    182c:	e1 f7       	brne	.-8      	; 0x1826 <Send_Command+0x12>
	UART_sendByte(command);
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_sendByte>
	while(UART_recieveByte() != DONE){};
    1834:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    1838:	84 34       	cpi	r24, 0x44	; 68
    183a:	e1 f7       	brne	.-8      	; 0x1834 <Send_Command+0x20>
}
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <Receive_Command>:
 *
 * [Returns]:         Command to tell or check on smth.
 ***************************************************************************************************/

uint8 Receive_Command(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != READY){};
    184c:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    1850:	89 35       	cpi	r24, 0x59	; 89
    1852:	e1 f7       	brne	.-8      	; 0x184c <Receive_Command+0x8>
	UART_sendByte(READY);
    1854:	89 e5       	ldi	r24, 0x59	; 89
    1856:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_sendByte>
	command=UART_recieveByte();
    185a:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    185e:	80 93 67 01 	sts	0x0167, r24
	UART_sendByte(DONE);
    1862:	84 e4       	ldi	r24, 0x44	; 68
    1864:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_sendByte>
	return command;
    1868:	80 91 67 01 	lds	r24, 0x0167
}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <GPIO_setupPinDirection+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <GPIO_setupPinDirection+0x8>
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	6a 83       	std	Y+2, r22	; 0x02
    1884:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	08 f0       	brcs	.+2      	; 0x188e <GPIO_setupPinDirection+0x1c>
    188c:	d5 c0       	rjmp	.+426    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	08 f0       	brcs	.+2      	; 0x1896 <GPIO_setupPinDirection+0x24>
    1894:	d1 c0       	rjmp	.+418    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3d 83       	std	Y+5, r19	; 0x05
    189e:	2c 83       	std	Y+4, r18	; 0x04
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <GPIO_setupPinDirection+0x3a>
    18aa:	43 c0       	rjmp	.+134    	; 0x1932 <GPIO_setupPinDirection+0xc0>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <GPIO_setupPinDirection+0x4e>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	71 f0       	breq	.+28     	; 0x18da <GPIO_setupPinDirection+0x68>
    18be:	bc c0       	rjmp	.+376    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
    18c0:	2c 81       	ldd	r18, Y+4	; 0x04
    18c2:	3d 81       	ldd	r19, Y+5	; 0x05
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <GPIO_setupPinDirection+0x5a>
    18ca:	5f c0       	rjmp	.+190    	; 0x198a <GPIO_setupPinDirection+0x118>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <GPIO_setupPinDirection+0x66>
    18d6:	85 c0       	rjmp	.+266    	; 0x19e2 <GPIO_setupPinDirection+0x170>
    18d8:	af c0       	rjmp	.+350    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	a1 f4       	brne	.+40     	; 0x1908 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18e0:	aa e3       	ldi	r26, 0x3A	; 58
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	ea e3       	ldi	r30, 0x3A	; 58
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <GPIO_setupPinDirection+0x8c>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <GPIO_setupPinDirection+0x88>
    1902:	84 2b       	or	r24, r20
    1904:	8c 93       	st	X, r24
    1906:	98 c0       	rjmp	.+304    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1908:	aa e3       	ldi	r26, 0x3A	; 58
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ea e3       	ldi	r30, 0x3A	; 58
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <GPIO_setupPinDirection+0xb4>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <GPIO_setupPinDirection+0xb0>
    192a:	80 95       	com	r24
    192c:	84 23       	and	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	83 c0       	rjmp	.+262    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	a1 f4       	brne	.+40     	; 0x1960 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1938:	a7 e3       	ldi	r26, 0x37	; 55
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e7 e3       	ldi	r30, 0x37	; 55
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_setupPinDirection+0xe4>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_setupPinDirection+0xe0>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	6c c0       	rjmp	.+216    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1960:	a7 e3       	ldi	r26, 0x37	; 55
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e7 e3       	ldi	r30, 0x37	; 55
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <GPIO_setupPinDirection+0x10c>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <GPIO_setupPinDirection+0x108>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	57 c0       	rjmp	.+174    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1990:	a4 e3       	ldi	r26, 0x34	; 52
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e4 e3       	ldi	r30, 0x34	; 52
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <GPIO_setupPinDirection+0x13c>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <GPIO_setupPinDirection+0x138>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	40 c0       	rjmp	.+128    	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19b8:	a4 e3       	ldi	r26, 0x34	; 52
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e4 e3       	ldi	r30, 0x34	; 52
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GPIO_setupPinDirection+0x164>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <GPIO_setupPinDirection+0x160>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	2b c0       	rjmp	.+86     	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	a1 f4       	brne	.+40     	; 0x1a10 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19e8:	a1 e3       	ldi	r26, 0x31	; 49
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e1 e3       	ldi	r30, 0x31	; 49
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <GPIO_setupPinDirection+0x194>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <GPIO_setupPinDirection+0x190>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a10:	a1 e3       	ldi	r26, 0x31	; 49
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e1 e3       	ldi	r30, 0x31	; 49
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_setupPinDirection+0x1bc>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_setupPinDirection+0x1b8>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <GPIO_writePin+0x6>
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <GPIO_writePin+0x8>
    1a50:	0f 92       	push	r0
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	6a 83       	std	Y+2, r22	; 0x02
    1a5a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	88 30       	cpi	r24, 0x08	; 8
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <GPIO_writePin+0x1c>
    1a62:	d5 c0       	rjmp	.+426    	; 0x1c0e <GPIO_writePin+0x1c6>
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <GPIO_writePin+0x24>
    1a6a:	d1 c0       	rjmp	.+418    	; 0x1c0e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3d 83       	std	Y+5, r19	; 0x05
    1a74:	2c 83       	std	Y+4, r18	; 0x04
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <GPIO_writePin+0x3a>
    1a80:	43 c0       	rjmp	.+134    	; 0x1b08 <GPIO_writePin+0xc0>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <GPIO_writePin+0x4e>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	71 f0       	breq	.+28     	; 0x1ab0 <GPIO_writePin+0x68>
    1a94:	bc c0       	rjmp	.+376    	; 0x1c0e <GPIO_writePin+0x1c6>
    1a96:	2c 81       	ldd	r18, Y+4	; 0x04
    1a98:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <GPIO_writePin+0x5a>
    1aa0:	5f c0       	rjmp	.+190    	; 0x1b60 <GPIO_writePin+0x118>
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <GPIO_writePin+0x66>
    1aac:	85 c0       	rjmp	.+266    	; 0x1bb8 <GPIO_writePin+0x170>
    1aae:	af c0       	rjmp	.+350    	; 0x1c0e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	a1 f4       	brne	.+40     	; 0x1ade <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ab6:	ab e3       	ldi	r26, 0x3B	; 59
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	eb e3       	ldi	r30, 0x3B	; 59
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 2e       	mov	r0, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <GPIO_writePin+0x8c>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	0a 94       	dec	r0
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <GPIO_writePin+0x88>
    1ad8:	84 2b       	or	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	98 c0       	rjmp	.+304    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ade:	ab e3       	ldi	r26, 0x3B	; 59
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	eb e3       	ldi	r30, 0x3B	; 59
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <GPIO_writePin+0xb4>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <GPIO_writePin+0xb0>
    1b00:	80 95       	com	r24
    1b02:	84 23       	and	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	83 c0       	rjmp	.+262    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	a1 f4       	brne	.+40     	; 0x1b36 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b0e:	a8 e3       	ldi	r26, 0x38	; 56
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <GPIO_writePin+0xe4>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <GPIO_writePin+0xe0>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	6c c0       	rjmp	.+216    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b36:	a8 e3       	ldi	r26, 0x38	; 56
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e8 e3       	ldi	r30, 0x38	; 56
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <GPIO_writePin+0x10c>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <GPIO_writePin+0x108>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	57 c0       	rjmp	.+174    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	a1 f4       	brne	.+40     	; 0x1b8e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b66:	a5 e3       	ldi	r26, 0x35	; 53
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e5 e3       	ldi	r30, 0x35	; 53
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_writePin+0x13c>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_writePin+0x138>
    1b88:	84 2b       	or	r24, r20
    1b8a:	8c 93       	st	X, r24
    1b8c:	40 c0       	rjmp	.+128    	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b8e:	a5 e3       	ldi	r26, 0x35	; 53
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e5 e3       	ldi	r30, 0x35	; 53
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <GPIO_writePin+0x164>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <GPIO_writePin+0x160>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	2b c0       	rjmp	.+86     	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	a1 f4       	brne	.+40     	; 0x1be6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1bbe:	a2 e3       	ldi	r26, 0x32	; 50
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <GPIO_writePin+0x194>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <GPIO_writePin+0x190>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1be6:	a2 e3       	ldi	r26, 0x32	; 50
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <GPIO_writePin+0x1bc>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <GPIO_writePin+0x1b8>
    1c08:	80 95       	com	r24
    1c0a:	84 23       	and	r24, r20
    1c0c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <GPIO_readPin+0x6>
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <GPIO_readPin+0x8>
    1c26:	0f 92       	push	r0
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
    1c2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c30:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	88 30       	cpi	r24, 0x08	; 8
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <GPIO_readPin+0x1c>
    1c38:	84 c0       	rjmp	.+264    	; 0x1d42 <GPIO_readPin+0x124>
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	84 30       	cpi	r24, 0x04	; 4
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <GPIO_readPin+0x24>
    1c40:	80 c0       	rjmp	.+256    	; 0x1d42 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3d 83       	std	Y+5, r19	; 0x05
    1c4a:	2c 83       	std	Y+4, r18	; 0x04
    1c4c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c4e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c50:	41 30       	cpi	r20, 0x01	; 1
    1c52:	51 05       	cpc	r21, r1
    1c54:	79 f1       	breq	.+94     	; 0x1cb4 <GPIO_readPin+0x96>
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	82 30       	cpi	r24, 0x02	; 2
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	34 f4       	brge	.+12     	; 0x1c6c <GPIO_readPin+0x4e>
    1c60:	2c 81       	ldd	r18, Y+4	; 0x04
    1c62:	3d 81       	ldd	r19, Y+5	; 0x05
    1c64:	21 15       	cp	r18, r1
    1c66:	31 05       	cpc	r19, r1
    1c68:	69 f0       	breq	.+26     	; 0x1c84 <GPIO_readPin+0x66>
    1c6a:	6b c0       	rjmp	.+214    	; 0x1d42 <GPIO_readPin+0x124>
    1c6c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c6e:	5d 81       	ldd	r21, Y+5	; 0x05
    1c70:	42 30       	cpi	r20, 0x02	; 2
    1c72:	51 05       	cpc	r21, r1
    1c74:	b9 f1       	breq	.+110    	; 0x1ce4 <GPIO_readPin+0xc6>
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <GPIO_readPin+0x64>
    1c80:	49 c0       	rjmp	.+146    	; 0x1d14 <GPIO_readPin+0xf6>
    1c82:	5f c0       	rjmp	.+190    	; 0x1d42 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c84:	e9 e3       	ldi	r30, 0x39	; 57
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a9 01       	movw	r20, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <GPIO_readPin+0x7e>
    1c98:	55 95       	asr	r21
    1c9a:	47 95       	ror	r20
    1c9c:	8a 95       	dec	r24
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <GPIO_readPin+0x7a>
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	81 70       	andi	r24, 0x01	; 1
    1ca4:	90 70       	andi	r25, 0x00	; 0
    1ca6:	88 23       	and	r24, r24
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	49 c0       	rjmp	.+146    	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
    1cb2:	47 c0       	rjmp	.+142    	; 0x1d42 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cb4:	e6 e3       	ldi	r30, 0x36	; 54
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a9 01       	movw	r20, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <GPIO_readPin+0xae>
    1cc8:	55 95       	asr	r21
    1cca:	47 95       	ror	r20
    1ccc:	8a 95       	dec	r24
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <GPIO_readPin+0xaa>
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	90 70       	andi	r25, 0x00	; 0
    1cd6:	88 23       	and	r24, r24
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	31 c0       	rjmp	.+98     	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ce0:	19 82       	std	Y+1, r1	; 0x01
    1ce2:	2f c0       	rjmp	.+94     	; 0x1d42 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ce4:	e3 e3       	ldi	r30, 0x33	; 51
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <GPIO_readPin+0xde>
    1cf8:	55 95       	asr	r21
    1cfa:	47 95       	ror	r20
    1cfc:	8a 95       	dec	r24
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <GPIO_readPin+0xda>
    1d00:	ca 01       	movw	r24, r20
    1d02:	81 70       	andi	r24, 0x01	; 1
    1d04:	90 70       	andi	r25, 0x00	; 0
    1d06:	88 23       	and	r24, r24
    1d08:	19 f0       	breq	.+6      	; 0x1d10 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	19 c0       	rjmp	.+50     	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d10:	19 82       	std	Y+1, r1	; 0x01
    1d12:	17 c0       	rjmp	.+46     	; 0x1d42 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d14:	e0 e3       	ldi	r30, 0x30	; 48
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a9 01       	movw	r20, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <GPIO_readPin+0x10e>
    1d28:	55 95       	asr	r21
    1d2a:	47 95       	ror	r20
    1d2c:	8a 95       	dec	r24
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <GPIO_readPin+0x10a>
    1d30:	ca 01       	movw	r24, r20
    1d32:	81 70       	andi	r24, 0x01	; 1
    1d34:	90 70       	andi	r25, 0x00	; 0
    1d36:	88 23       	and	r24, r24
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d40:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <GPIO_setupPortDirection+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <GPIO_setupPortDirection+0x8>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	90 f5       	brcc	.+100    	; 0x1dce <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	3c 83       	std	Y+4, r19	; 0x04
    1d72:	2b 83       	std	Y+3, r18	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	d1 f0       	breq	.+52     	; 0x1db2 <GPIO_setupPortDirection+0x5e>
    1d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	22 30       	cpi	r18, 0x02	; 2
    1d84:	31 05       	cpc	r19, r1
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <GPIO_setupPortDirection+0x3e>
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	61 f0       	breq	.+24     	; 0x1da8 <GPIO_setupPortDirection+0x54>
    1d90:	1e c0       	rjmp	.+60     	; 0x1dce <GPIO_setupPortDirection+0x7a>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <GPIO_setupPortDirection+0x68>
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	83 30       	cpi	r24, 0x03	; 3
    1da2:	91 05       	cpc	r25, r1
    1da4:	81 f0       	breq	.+32     	; 0x1dc6 <GPIO_setupPortDirection+0x72>
    1da6:	13 c0       	rjmp	.+38     	; 0x1dce <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1da8:	ea e3       	ldi	r30, 0x3A	; 58
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	80 83       	st	Z, r24
    1db0:	0e c0       	rjmp	.+28     	; 0x1dce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1db2:	e7 e3       	ldi	r30, 0x37	; 55
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	80 83       	st	Z, r24
    1dba:	09 c0       	rjmp	.+18     	; 0x1dce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dbc:	e4 e3       	ldi	r30, 0x34	; 52
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	80 83       	st	Z, r24
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1dc6:	e1 e3       	ldi	r30, 0x31	; 49
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <GPIO_writePort+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <GPIO_writePort+0x8>
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	90 f5       	brcc	.+100    	; 0x1e56 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	3c 83       	std	Y+4, r19	; 0x04
    1dfa:	2b 83       	std	Y+3, r18	; 0x03
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	91 05       	cpc	r25, r1
    1e04:	d1 f0       	breq	.+52     	; 0x1e3a <GPIO_writePort+0x5e>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <GPIO_writePort+0x3e>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <GPIO_writePort+0x54>
    1e18:	1e c0       	rjmp	.+60     	; 0x1e56 <GPIO_writePort+0x7a>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	81 f0       	breq	.+32     	; 0x1e44 <GPIO_writePort+0x68>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	81 f0       	breq	.+32     	; 0x1e4e <GPIO_writePort+0x72>
    1e2e:	13 c0       	rjmp	.+38     	; 0x1e56 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e30:	eb e3       	ldi	r30, 0x3B	; 59
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 83       	st	Z, r24
    1e38:	0e c0       	rjmp	.+28     	; 0x1e56 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e3a:	e8 e3       	ldi	r30, 0x38	; 56
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	80 83       	st	Z, r24
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	80 83       	st	Z, r24
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e4e:	e2 e3       	ldi	r30, 0x32	; 50
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <GPIO_readPort+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <GPIO_readPort+0x8>
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e72:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	90 f5       	brcc	.+100    	; 0x1ede <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3c 83       	std	Y+4, r19	; 0x04
    1e82:	2b 83       	std	Y+3, r18	; 0x03
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	d1 f0       	breq	.+52     	; 0x1ec2 <GPIO_readPort+0x5e>
    1e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e90:	3c 81       	ldd	r19, Y+4	; 0x04
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <GPIO_readPort+0x3e>
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	61 f0       	breq	.+24     	; 0x1eb8 <GPIO_readPort+0x54>
    1ea0:	1e c0       	rjmp	.+60     	; 0x1ede <GPIO_readPort+0x7a>
    1ea2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	81 f0       	breq	.+32     	; 0x1ecc <GPIO_readPort+0x68>
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	81 f0       	breq	.+32     	; 0x1ed6 <GPIO_readPort+0x72>
    1eb6:	13 c0       	rjmp	.+38     	; 0x1ede <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1eb8:	e9 e3       	ldi	r30, 0x39	; 57
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	0e c0       	rjmp	.+28     	; 0x1ede <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ec2:	e6 e3       	ldi	r30, 0x36	; 54
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ecc:	e3 e3       	ldi	r30, 0x33	; 51
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ed6:	e0 e3       	ldi	r30, 0x30	; 48
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <KEYPAD_getPressedKey+0x6>
    1ef4:	0f 92       	push	r0
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1efa:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1efc:	1b 82       	std	Y+3, r1	; 0x03
    1efe:	43 c0       	rjmp	.+134    	; 0x1f86 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	9c 5f       	subi	r25, 0xFC	; 252
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	69 2f       	mov	r22, r25
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9c 01       	movw	r18, r24
    1f20:	2c 5f       	subi	r18, 0xFC	; 252
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <KEYPAD_getPressedKey+0x40>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	2a 95       	dec	r18
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <KEYPAD_getPressedKey+0x3c>
    1f32:	80 95       	com	r24
    1f34:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	69 81       	ldd	r22, Y+1	; 0x01
    1f3a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f3e:	1a 82       	std	Y+2, r1	; 0x02
    1f40:	1c c0       	rjmp	.+56     	; 0x1f7a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	6a 81       	ldd	r22, Y+2	; 0x02
    1f46:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <GPIO_readPin>
    1f4a:	88 23       	and	r24, r24
    1f4c:	99 f4       	brne	.+38     	; 0x1f74 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	89 0f       	add	r24, r25
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	84 30       	cpi	r24, 0x04	; 4
    1f7e:	08 f3       	brcs	.-62     	; 0x1f42 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	84 30       	cpi	r24, 0x04	; 4
    1f8a:	08 f4       	brcc	.+2      	; 0x1f8e <KEYPAD_getPressedKey+0xa0>
    1f8c:	b9 cf       	rjmp	.-142    	; 0x1f00 <KEYPAD_getPressedKey+0x12>
    1f8e:	b6 cf       	rjmp	.-148    	; 0x1efc <KEYPAD_getPressedKey+0xe>

00001f90 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	3c 83       	std	Y+4, r19	; 0x04
    1fa8:	2b 83       	std	Y+3, r18	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	88 30       	cpi	r24, 0x08	; 8
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1fb4:	70 c0       	rjmp	.+224    	; 0x2096 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fba:	29 30       	cpi	r18, 0x09	; 9
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	5c f5       	brge	.+86     	; 0x2016 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1fca:	59 c0       	rjmp	.+178    	; 0x207e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd0:	25 30       	cpi	r18, 0x05	; 5
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	9c f4       	brge	.+38     	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	91 05       	cpc	r25, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1fe0:	48 c0       	rjmp	.+144    	; 0x2072 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1fe2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe6:	23 30       	cpi	r18, 0x03	; 3
    1fe8:	31 05       	cpc	r19, r1
    1fea:	0c f0       	brlt	.+2      	; 0x1fee <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1fec:	45 c0       	rjmp	.+138    	; 0x2078 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ff8:	39 c0       	rjmp	.+114    	; 0x206c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ffa:	67 c0       	rjmp	.+206    	; 0x20ca <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    2000:	26 30       	cpi	r18, 0x06	; 6
    2002:	31 05       	cpc	r19, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2006:	41 c0       	rjmp	.+130    	; 0x208a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	87 30       	cpi	r24, 0x07	; 7
    200e:	91 05       	cpc	r25, r1
    2010:	0c f0       	brlt	.+2      	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2012:	3e c0       	rjmp	.+124    	; 0x2090 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2014:	37 c0       	rjmp	.+110    	; 0x2084 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3c 81       	ldd	r19, Y+4	; 0x04
    201a:	2c 30       	cpi	r18, 0x0C	; 12
    201c:	31 05       	cpc	r19, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2020:	46 c0       	rjmp	.+140    	; 0x20ae <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	8d 30       	cpi	r24, 0x0D	; 13
    2028:	91 05       	cpc	r25, r1
    202a:	5c f4       	brge	.+22     	; 0x2042 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    202c:	2b 81       	ldd	r18, Y+3	; 0x03
    202e:	3c 81       	ldd	r19, Y+4	; 0x04
    2030:	2a 30       	cpi	r18, 0x0A	; 10
    2032:	31 05       	cpc	r19, r1
    2034:	b1 f1       	breq	.+108    	; 0x20a2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	8b 30       	cpi	r24, 0x0B	; 11
    203c:	91 05       	cpc	r25, r1
    203e:	a4 f5       	brge	.+104    	; 0x20a8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2040:	2d c0       	rjmp	.+90     	; 0x209c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2042:	2b 81       	ldd	r18, Y+3	; 0x03
    2044:	3c 81       	ldd	r19, Y+4	; 0x04
    2046:	2e 30       	cpi	r18, 0x0E	; 14
    2048:	31 05       	cpc	r19, r1
    204a:	b9 f1       	breq	.+110    	; 0x20ba <KEYPAD_4x4_adjustKeyNumber+0x12a>
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	8e 30       	cpi	r24, 0x0E	; 14
    2052:	91 05       	cpc	r25, r1
    2054:	7c f1       	brlt	.+94     	; 0x20b4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2056:	2b 81       	ldd	r18, Y+3	; 0x03
    2058:	3c 81       	ldd	r19, Y+4	; 0x04
    205a:	2f 30       	cpi	r18, 0x0F	; 15
    205c:	31 05       	cpc	r19, r1
    205e:	79 f1       	breq	.+94     	; 0x20be <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	9c 81       	ldd	r25, Y+4	; 0x04
    2064:	80 31       	cpi	r24, 0x10	; 16
    2066:	91 05       	cpc	r25, r1
    2068:	69 f1       	breq	.+90     	; 0x20c4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    206a:	2f c0       	rjmp	.+94     	; 0x20ca <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    206c:	87 e0       	ldi	r24, 0x07	; 7
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	2e c0       	rjmp	.+92     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2072:	88 e0       	ldi	r24, 0x08	; 8
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	2b c0       	rjmp	.+86     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2078:	89 e0       	ldi	r24, 0x09	; 9
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	28 c0       	rjmp	.+80     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    207e:	85 e2       	ldi	r24, 0x25	; 37
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	25 c0       	rjmp	.+74     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2084:	84 e0       	ldi	r24, 0x04	; 4
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	22 c0       	rjmp	.+68     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    208a:	85 e0       	ldi	r24, 0x05	; 5
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	1f c0       	rjmp	.+62     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2090:	86 e0       	ldi	r24, 0x06	; 6
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	1c c0       	rjmp	.+56     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2096:	8a e2       	ldi	r24, 0x2A	; 42
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	19 c0       	rjmp	.+50     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	16 c0       	rjmp	.+44     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	13 c0       	rjmp	.+38     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20a8:	83 e0       	ldi	r24, 0x03	; 3
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	10 c0       	rjmp	.+32     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    20ae:	8d e2       	ldi	r24, 0x2D	; 45
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    20b4:	8d e0       	ldi	r24, 0x0D	; 13
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	0a c0       	rjmp	.+20     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    20ba:	19 82       	std	Y+1, r1	; 0x01
    20bc:	08 c0       	rjmp	.+16     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    20be:	8d e3       	ldi	r24, 0x3D	; 61
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	05 c0       	rjmp	.+10     	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    20c4:	8b e2       	ldi	r24, 0x2B	; 43
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	64 e0       	ldi	r22, 0x04	; 4
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	65 e0       	ldi	r22, 0x05	; 5
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	66 e0       	ldi	r22, 0x06	; 6
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	6f ef       	ldi	r22, 0xFF	; 255
    2108:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    210c:	88 e3       	ldi	r24, 0x38	; 56
    210e:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2112:	8c e0       	ldi	r24, 0x0C	; 12
    2114:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_sendCommand>
}
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	ea 97       	sbiw	r28, 0x3a	; 58
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    213a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    213c:	83 e0       	ldi	r24, 0x03	; 3
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2146:	83 e0       	ldi	r24, 0x03	; 3
    2148:	65 e0       	ldi	r22, 0x05	; 5
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e8       	ldi	r26, 0x80	; 128
    2156:	bf e3       	ldi	r27, 0x3F	; 63
    2158:	8d ab       	std	Y+53, r24	; 0x35
    215a:	9e ab       	std	Y+54, r25	; 0x36
    215c:	af ab       	std	Y+55, r26	; 0x37
    215e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6d a9       	ldd	r22, Y+53	; 0x35
    2162:	7e a9       	ldd	r23, Y+54	; 0x36
    2164:	8f a9       	ldd	r24, Y+55	; 0x37
    2166:	98 ad       	ldd	r25, Y+56	; 0x38
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a e7       	ldi	r20, 0x7A	; 122
    216e:	53 e4       	ldi	r21, 0x43	; 67
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	89 ab       	std	Y+49, r24	; 0x31
    217a:	9a ab       	std	Y+50, r25	; 0x32
    217c:	ab ab       	std	Y+51, r26	; 0x33
    217e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <LCD_sendCommand+0x7e>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	98 ab       	std	Y+48, r25	; 0x30
    219e:	8f a7       	std	Y+47, r24	; 0x2f
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    21a2:	69 a9       	ldd	r22, Y+49	; 0x31
    21a4:	7a a9       	ldd	r23, Y+50	; 0x32
    21a6:	8b a9       	ldd	r24, Y+51	; 0x33
    21a8:	9c a9       	ldd	r25, Y+52	; 0x34
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6d a9       	ldd	r22, Y+53	; 0x35
    21bc:	7e a9       	ldd	r23, Y+54	; 0x36
    21be:	8f a9       	ldd	r24, Y+55	; 0x37
    21c0:	98 ad       	ldd	r25, Y+56	; 0x38
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	98 ab       	std	Y+48, r25	; 0x30
    21e0:	8f a7       	std	Y+47, r24	; 0x2f
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_sendCommand+0xde>
    21e4:	89 e1       	ldi	r24, 0x19	; 25
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9e a7       	std	Y+46, r25	; 0x2e
    21ea:	8d a7       	std	Y+45, r24	; 0x2d
    21ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_sendCommand+0xcc>
    21f4:	9e a7       	std	Y+46, r25	; 0x2e
    21f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fa:	98 a9       	ldd	r25, Y+48	; 0x30
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	98 ab       	std	Y+48, r25	; 0x30
    2200:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8f a5       	ldd	r24, Y+47	; 0x2f
    2204:	98 a9       	ldd	r25, Y+48	; 0x30
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <LCD_sendCommand+0xc0>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	69 a9       	ldd	r22, Y+49	; 0x31
    220e:	7a a9       	ldd	r23, Y+50	; 0x32
    2210:	8b a9       	ldd	r24, Y+51	; 0x33
    2212:	9c a9       	ldd	r25, Y+52	; 0x34
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
    2220:	8f a5       	ldd	r24, Y+47	; 0x2f
    2222:	98 a9       	ldd	r25, Y+48	; 0x30
    2224:	9c a7       	std	Y+44, r25	; 0x2c
    2226:	8b a7       	std	Y+43, r24	; 0x2b
    2228:	8b a5       	ldd	r24, Y+43	; 0x2b
    222a:	9c a5       	ldd	r25, Y+44	; 0x2c
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_sendCommand+0x108>
    2230:	9c a7       	std	Y+44, r25	; 0x2c
    2232:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2234:	83 e0       	ldi	r24, 0x03	; 3
    2236:	66 e0       	ldi	r22, 0x06	; 6
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e8       	ldi	r26, 0x80	; 128
    2244:	bf e3       	ldi	r27, 0x3F	; 63
    2246:	8f a3       	std	Y+39, r24	; 0x27
    2248:	98 a7       	std	Y+40, r25	; 0x28
    224a:	a9 a7       	std	Y+41, r26	; 0x29
    224c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6f a1       	ldd	r22, Y+39	; 0x27
    2250:	78 a5       	ldd	r23, Y+40	; 0x28
    2252:	89 a5       	ldd	r24, Y+41	; 0x29
    2254:	9a a5       	ldd	r25, Y+42	; 0x2a
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a e7       	ldi	r20, 0x7A	; 122
    225c:	53 e4       	ldi	r21, 0x43	; 67
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8b a3       	std	Y+35, r24	; 0x23
    2268:	9c a3       	std	Y+36, r25	; 0x24
    226a:	ad a3       	std	Y+37, r26	; 0x25
    226c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    226e:	6b a1       	ldd	r22, Y+35	; 0x23
    2270:	7c a1       	ldd	r23, Y+36	; 0x24
    2272:	8d a1       	ldd	r24, Y+37	; 0x25
    2274:	9e a1       	ldd	r25, Y+38	; 0x26
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <LCD_sendCommand+0x16c>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9a a3       	std	Y+34, r25	; 0x22
    228c:	89 a3       	std	Y+33, r24	; 0x21
    228e:	3f c0       	rjmp	.+126    	; 0x230e <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2290:	6b a1       	ldd	r22, Y+35	; 0x23
    2292:	7c a1       	ldd	r23, Y+36	; 0x24
    2294:	8d a1       	ldd	r24, Y+37	; 0x25
    2296:	9e a1       	ldd	r25, Y+38	; 0x26
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6f a1       	ldd	r22, Y+39	; 0x27
    22aa:	78 a5       	ldd	r23, Y+40	; 0x28
    22ac:	89 a5       	ldd	r24, Y+41	; 0x29
    22ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9a a3       	std	Y+34, r25	; 0x22
    22ce:	89 a3       	std	Y+33, r24	; 0x21
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <LCD_sendCommand+0x1cc>
    22d2:	89 e1       	ldi	r24, 0x19	; 25
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	98 a3       	std	Y+32, r25	; 0x20
    22d8:	8f 8f       	std	Y+31, r24	; 0x1f
    22da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22dc:	98 a1       	ldd	r25, Y+32	; 0x20
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_sendCommand+0x1ba>
    22e2:	98 a3       	std	Y+32, r25	; 0x20
    22e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	89 a1       	ldd	r24, Y+33	; 0x21
    22e8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9a a3       	std	Y+34, r25	; 0x22
    22ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	89 a1       	ldd	r24, Y+33	; 0x21
    22f2:	9a a1       	ldd	r25, Y+34	; 0x22
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <LCD_sendCommand+0x1ae>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6b a1       	ldd	r22, Y+35	; 0x23
    22fc:	7c a1       	ldd	r23, Y+36	; 0x24
    22fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2300:	9e a1       	ldd	r25, Y+38	; 0x26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9a a3       	std	Y+34, r25	; 0x22
    230c:	89 a3       	std	Y+33, r24	; 0x21
    230e:	89 a1       	ldd	r24, Y+33	; 0x21
    2310:	9a a1       	ldd	r25, Y+34	; 0x22
    2312:	9e 8f       	std	Y+30, r25	; 0x1e
    2314:	8d 8f       	std	Y+29, r24	; 0x1d
    2316:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2318:	9e 8d       	ldd	r25, Y+30	; 0x1e
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_sendCommand+0x1f6>
    231e:	9e 8f       	std	Y+30, r25	; 0x1e
    2320:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	6a ad       	ldd	r22, Y+58	; 0x3a
    2326:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GPIO_writePort>
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	a0 e8       	ldi	r26, 0x80	; 128
    2330:	bf e3       	ldi	r27, 0x3F	; 63
    2332:	89 8f       	std	Y+25, r24	; 0x19
    2334:	9a 8f       	std	Y+26, r25	; 0x1a
    2336:	ab 8f       	std	Y+27, r26	; 0x1b
    2338:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233a:	69 8d       	ldd	r22, Y+25	; 0x19
    233c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    233e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4a e7       	ldi	r20, 0x7A	; 122
    2348:	53 e4       	ldi	r21, 0x43	; 67
    234a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	8d 8b       	std	Y+21, r24	; 0x15
    2354:	9e 8b       	std	Y+22, r25	; 0x16
    2356:	af 8b       	std	Y+23, r26	; 0x17
    2358:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    235a:	6d 89       	ldd	r22, Y+21	; 0x15
    235c:	7e 89       	ldd	r23, Y+22	; 0x16
    235e:	8f 89       	ldd	r24, Y+23	; 0x17
    2360:	98 8d       	ldd	r25, Y+24	; 0x18
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e8       	ldi	r20, 0x80	; 128
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236e:	88 23       	and	r24, r24
    2370:	2c f4       	brge	.+10     	; 0x237c <LCD_sendCommand+0x258>
		__ticks = 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c 8b       	std	Y+20, r25	; 0x14
    2378:	8b 8b       	std	Y+19, r24	; 0x13
    237a:	3f c0       	rjmp	.+126    	; 0x23fa <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	3f ef       	ldi	r19, 0xFF	; 255
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	57 e4       	ldi	r21, 0x47	; 71
    238c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	4c f5       	brge	.+82     	; 0x23e6 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2394:	69 8d       	ldd	r22, Y+25	; 0x19
    2396:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2398:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9c 8b       	std	Y+20, r25	; 0x14
    23ba:	8b 8b       	std	Y+19, r24	; 0x13
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <LCD_sendCommand+0x2b8>
    23be:	89 e1       	ldi	r24, 0x19	; 25
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9a 8b       	std	Y+18, r25	; 0x12
    23c4:	89 8b       	std	Y+17, r24	; 0x11
    23c6:	89 89       	ldd	r24, Y+17	; 0x11
    23c8:	9a 89       	ldd	r25, Y+18	; 0x12
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <LCD_sendCommand+0x2a6>
    23ce:	9a 8b       	std	Y+18, r25	; 0x12
    23d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d2:	8b 89       	ldd	r24, Y+19	; 0x13
    23d4:	9c 89       	ldd	r25, Y+20	; 0x14
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	9c 8b       	std	Y+20, r25	; 0x14
    23da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	8b 89       	ldd	r24, Y+19	; 0x13
    23de:	9c 89       	ldd	r25, Y+20	; 0x14
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	69 f7       	brne	.-38     	; 0x23be <LCD_sendCommand+0x29a>
    23e4:	14 c0       	rjmp	.+40     	; 0x240e <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e6:	6d 89       	ldd	r22, Y+21	; 0x15
    23e8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ea:	8f 89       	ldd	r24, Y+23	; 0x17
    23ec:	98 8d       	ldd	r25, Y+24	; 0x18
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9c 8b       	std	Y+20, r25	; 0x14
    23f8:	8b 8b       	std	Y+19, r24	; 0x13
    23fa:	8b 89       	ldd	r24, Y+19	; 0x13
    23fc:	9c 89       	ldd	r25, Y+20	; 0x14
    23fe:	98 8b       	std	Y+16, r25	; 0x10
    2400:	8f 87       	std	Y+15, r24	; 0x0f
    2402:	8f 85       	ldd	r24, Y+15	; 0x0f
    2404:	98 89       	ldd	r25, Y+16	; 0x10
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <LCD_sendCommand+0x2e2>
    240a:	98 8b       	std	Y+16, r25	; 0x10
    240c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	66 e0       	ldi	r22, 0x06	; 6
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e8       	ldi	r26, 0x80	; 128
    241e:	bf e3       	ldi	r27, 0x3F	; 63
    2420:	8b 87       	std	Y+11, r24	; 0x0b
    2422:	9c 87       	std	Y+12, r25	; 0x0c
    2424:	ad 87       	std	Y+13, r26	; 0x0d
    2426:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	6b 85       	ldd	r22, Y+11	; 0x0b
    242a:	7c 85       	ldd	r23, Y+12	; 0x0c
    242c:	8d 85       	ldd	r24, Y+13	; 0x0d
    242e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a e7       	ldi	r20, 0x7A	; 122
    2436:	53 e4       	ldi	r21, 0x43	; 67
    2438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8f 83       	std	Y+7, r24	; 0x07
    2442:	98 87       	std	Y+8, r25	; 0x08
    2444:	a9 87       	std	Y+9, r26	; 0x09
    2446:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <LCD_sendCommand+0x346>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	6b 85       	ldd	r22, Y+11	; 0x0b
    2484:	7c 85       	ldd	r23, Y+12	; 0x0c
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <LCD_sendCommand+0x3a6>
    24ac:	89 e1       	ldi	r24, 0x19	; 25
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9c 83       	std	Y+4, r25	; 0x04
    24b2:	8b 83       	std	Y+3, r24	; 0x03
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_sendCommand+0x394>
    24bc:	9c 83       	std	Y+4, r25	; 0x04
    24be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	9e 81       	ldd	r25, Y+6	; 0x06
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <LCD_sendCommand+0x388>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	6f 81       	ldd	r22, Y+7	; 0x07
    24d6:	78 85       	ldd	r23, Y+8	; 0x08
    24d8:	89 85       	ldd	r24, Y+9	; 0x09
    24da:	9a 85       	ldd	r25, Y+10	; 0x0a
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9e 83       	std	Y+6, r25	; 0x06
    24e6:	8d 83       	std	Y+5, r24	; 0x05
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	9e 81       	ldd	r25, Y+6	; 0x06
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	9a 81       	ldd	r25, Y+2	; 0x02
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_sendCommand+0x3d0>
    24f8:	9a 83       	std	Y+2, r25	; 0x02
    24fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    24fc:	ea 96       	adiw	r28, 0x3a	; 58
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	ea 97       	sbiw	r28, 0x3a	; 58
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2524:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	65 e0       	ldi	r22, 0x05	; 5
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 e8       	ldi	r26, 0x80	; 128
    2540:	bf e3       	ldi	r27, 0x3F	; 63
    2542:	8d ab       	std	Y+53, r24	; 0x35
    2544:	9e ab       	std	Y+54, r25	; 0x36
    2546:	af ab       	std	Y+55, r26	; 0x37
    2548:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6d a9       	ldd	r22, Y+53	; 0x35
    254c:	7e a9       	ldd	r23, Y+54	; 0x36
    254e:	8f a9       	ldd	r24, Y+55	; 0x37
    2550:	98 ad       	ldd	r25, Y+56	; 0x38
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a e7       	ldi	r20, 0x7A	; 122
    2558:	53 e4       	ldi	r21, 0x43	; 67
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	89 ab       	std	Y+49, r24	; 0x31
    2564:	9a ab       	std	Y+50, r25	; 0x32
    2566:	ab ab       	std	Y+51, r26	; 0x33
    2568:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    256a:	69 a9       	ldd	r22, Y+49	; 0x31
    256c:	7a a9       	ldd	r23, Y+50	; 0x32
    256e:	8b a9       	ldd	r24, Y+51	; 0x33
    2570:	9c a9       	ldd	r25, Y+52	; 0x34
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	98 ab       	std	Y+48, r25	; 0x30
    2588:	8f a7       	std	Y+47, r24	; 0x2f
    258a:	3f c0       	rjmp	.+126    	; 0x260a <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    258c:	69 a9       	ldd	r22, Y+49	; 0x31
    258e:	7a a9       	ldd	r23, Y+50	; 0x32
    2590:	8b a9       	ldd	r24, Y+51	; 0x33
    2592:	9c a9       	ldd	r25, Y+52	; 0x34
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6d a9       	ldd	r22, Y+53	; 0x35
    25a6:	7e a9       	ldd	r23, Y+54	; 0x36
    25a8:	8f a9       	ldd	r24, Y+55	; 0x37
    25aa:	98 ad       	ldd	r25, Y+56	; 0x38
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	98 ab       	std	Y+48, r25	; 0x30
    25ca:	8f a7       	std	Y+47, r24	; 0x2f
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <LCD_displayCharacter+0xde>
    25ce:	89 e1       	ldi	r24, 0x19	; 25
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9e a7       	std	Y+46, r25	; 0x2e
    25d4:	8d a7       	std	Y+45, r24	; 0x2d
    25d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_displayCharacter+0xcc>
    25de:	9e a7       	std	Y+46, r25	; 0x2e
    25e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e4:	98 a9       	ldd	r25, Y+48	; 0x30
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	98 ab       	std	Y+48, r25	; 0x30
    25ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ee:	98 a9       	ldd	r25, Y+48	; 0x30
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <LCD_displayCharacter+0xc0>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	69 a9       	ldd	r22, Y+49	; 0x31
    25f8:	7a a9       	ldd	r23, Y+50	; 0x32
    25fa:	8b a9       	ldd	r24, Y+51	; 0x33
    25fc:	9c a9       	ldd	r25, Y+52	; 0x34
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	98 ab       	std	Y+48, r25	; 0x30
    2608:	8f a7       	std	Y+47, r24	; 0x2f
    260a:	8f a5       	ldd	r24, Y+47	; 0x2f
    260c:	98 a9       	ldd	r25, Y+48	; 0x30
    260e:	9c a7       	std	Y+44, r25	; 0x2c
    2610:	8b a7       	std	Y+43, r24	; 0x2b
    2612:	8b a5       	ldd	r24, Y+43	; 0x2b
    2614:	9c a5       	ldd	r25, Y+44	; 0x2c
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_displayCharacter+0x108>
    261a:	9c a7       	std	Y+44, r25	; 0x2c
    261c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    261e:	83 e0       	ldi	r24, 0x03	; 3
    2620:	66 e0       	ldi	r22, 0x06	; 6
    2622:	41 e0       	ldi	r20, 0x01	; 1
    2624:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	a0 e8       	ldi	r26, 0x80	; 128
    262e:	bf e3       	ldi	r27, 0x3F	; 63
    2630:	8f a3       	std	Y+39, r24	; 0x27
    2632:	98 a7       	std	Y+40, r25	; 0x28
    2634:	a9 a7       	std	Y+41, r26	; 0x29
    2636:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2638:	6f a1       	ldd	r22, Y+39	; 0x27
    263a:	78 a5       	ldd	r23, Y+40	; 0x28
    263c:	89 a5       	ldd	r24, Y+41	; 0x29
    263e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	4a e7       	ldi	r20, 0x7A	; 122
    2646:	53 e4       	ldi	r21, 0x43	; 67
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	8b a3       	std	Y+35, r24	; 0x23
    2652:	9c a3       	std	Y+36, r25	; 0x24
    2654:	ad a3       	std	Y+37, r26	; 0x25
    2656:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2658:	6b a1       	ldd	r22, Y+35	; 0x23
    265a:	7c a1       	ldd	r23, Y+36	; 0x24
    265c:	8d a1       	ldd	r24, Y+37	; 0x25
    265e:	9e a1       	ldd	r25, Y+38	; 0x26
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266c:	88 23       	and	r24, r24
    266e:	2c f4       	brge	.+10     	; 0x267a <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9a a3       	std	Y+34, r25	; 0x22
    2676:	89 a3       	std	Y+33, r24	; 0x21
    2678:	3f c0       	rjmp	.+126    	; 0x26f8 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    267a:	6b a1       	ldd	r22, Y+35	; 0x23
    267c:	7c a1       	ldd	r23, Y+36	; 0x24
    267e:	8d a1       	ldd	r24, Y+37	; 0x25
    2680:	9e a1       	ldd	r25, Y+38	; 0x26
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	4c f5       	brge	.+82     	; 0x26e4 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2692:	6f a1       	ldd	r22, Y+39	; 0x27
    2694:	78 a5       	ldd	r23, Y+40	; 0x28
    2696:	89 a5       	ldd	r24, Y+41	; 0x29
    2698:	9a a5       	ldd	r25, Y+42	; 0x2a
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9a a3       	std	Y+34, r25	; 0x22
    26b8:	89 a3       	std	Y+33, r24	; 0x21
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <LCD_displayCharacter+0x1cc>
    26bc:	89 e1       	ldi	r24, 0x19	; 25
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	98 a3       	std	Y+32, r25	; 0x20
    26c2:	8f 8f       	std	Y+31, r24	; 0x1f
    26c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c6:	98 a1       	ldd	r25, Y+32	; 0x20
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_displayCharacter+0x1ba>
    26cc:	98 a3       	std	Y+32, r25	; 0x20
    26ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	89 a1       	ldd	r24, Y+33	; 0x21
    26d2:	9a a1       	ldd	r25, Y+34	; 0x22
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9a a3       	std	Y+34, r25	; 0x22
    26d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	89 a1       	ldd	r24, Y+33	; 0x21
    26dc:	9a a1       	ldd	r25, Y+34	; 0x22
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	69 f7       	brne	.-38     	; 0x26bc <LCD_displayCharacter+0x1ae>
    26e2:	14 c0       	rjmp	.+40     	; 0x270c <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e4:	6b a1       	ldd	r22, Y+35	; 0x23
    26e6:	7c a1       	ldd	r23, Y+36	; 0x24
    26e8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ea:	9e a1       	ldd	r25, Y+38	; 0x26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9a a3       	std	Y+34, r25	; 0x22
    26f6:	89 a3       	std	Y+33, r24	; 0x21
    26f8:	89 a1       	ldd	r24, Y+33	; 0x21
    26fa:	9a a1       	ldd	r25, Y+34	; 0x22
    26fc:	9e 8f       	std	Y+30, r25	; 0x1e
    26fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2702:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <LCD_displayCharacter+0x1f6>
    2708:	9e 8f       	std	Y+30, r25	; 0x1e
    270a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2710:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <GPIO_writePort>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a0 e8       	ldi	r26, 0x80	; 128
    271a:	bf e3       	ldi	r27, 0x3F	; 63
    271c:	89 8f       	std	Y+25, r24	; 0x19
    271e:	9a 8f       	std	Y+26, r25	; 0x1a
    2720:	ab 8f       	std	Y+27, r26	; 0x1b
    2722:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2724:	69 8d       	ldd	r22, Y+25	; 0x19
    2726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    272a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	4a e7       	ldi	r20, 0x7A	; 122
    2732:	53 e4       	ldi	r21, 0x43	; 67
    2734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	8d 8b       	std	Y+21, r24	; 0x15
    273e:	9e 8b       	std	Y+22, r25	; 0x16
    2740:	af 8b       	std	Y+23, r26	; 0x17
    2742:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2744:	6d 89       	ldd	r22, Y+21	; 0x15
    2746:	7e 89       	ldd	r23, Y+22	; 0x16
    2748:	8f 89       	ldd	r24, Y+23	; 0x17
    274a:	98 8d       	ldd	r25, Y+24	; 0x18
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2758:	88 23       	and	r24, r24
    275a:	2c f4       	brge	.+10     	; 0x2766 <LCD_displayCharacter+0x258>
		__ticks = 1;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
    2764:	3f c0       	rjmp	.+126    	; 0x27e4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2766:	6d 89       	ldd	r22, Y+21	; 0x15
    2768:	7e 89       	ldd	r23, Y+22	; 0x16
    276a:	8f 89       	ldd	r24, Y+23	; 0x17
    276c:	98 8d       	ldd	r25, Y+24	; 0x18
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	3f ef       	ldi	r19, 0xFF	; 255
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	57 e4       	ldi	r21, 0x47	; 71
    2776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	4c f5       	brge	.+82     	; 0x27d0 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277e:	69 8d       	ldd	r22, Y+25	; 0x19
    2780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9c 8b       	std	Y+20, r25	; 0x14
    27a4:	8b 8b       	std	Y+19, r24	; 0x13
    27a6:	0f c0       	rjmp	.+30     	; 0x27c6 <LCD_displayCharacter+0x2b8>
    27a8:	89 e1       	ldi	r24, 0x19	; 25
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9a 8b       	std	Y+18, r25	; 0x12
    27ae:	89 8b       	std	Y+17, r24	; 0x11
    27b0:	89 89       	ldd	r24, Y+17	; 0x11
    27b2:	9a 89       	ldd	r25, Y+18	; 0x12
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <LCD_displayCharacter+0x2a6>
    27b8:	9a 8b       	std	Y+18, r25	; 0x12
    27ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27bc:	8b 89       	ldd	r24, Y+19	; 0x13
    27be:	9c 89       	ldd	r25, Y+20	; 0x14
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	9c 8b       	std	Y+20, r25	; 0x14
    27c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c6:	8b 89       	ldd	r24, Y+19	; 0x13
    27c8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	69 f7       	brne	.-38     	; 0x27a8 <LCD_displayCharacter+0x29a>
    27ce:	14 c0       	rjmp	.+40     	; 0x27f8 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	6d 89       	ldd	r22, Y+21	; 0x15
    27d2:	7e 89       	ldd	r23, Y+22	; 0x16
    27d4:	8f 89       	ldd	r24, Y+23	; 0x17
    27d6:	98 8d       	ldd	r25, Y+24	; 0x18
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	9c 8b       	std	Y+20, r25	; 0x14
    27e2:	8b 8b       	std	Y+19, r24	; 0x13
    27e4:	8b 89       	ldd	r24, Y+19	; 0x13
    27e6:	9c 89       	ldd	r25, Y+20	; 0x14
    27e8:	98 8b       	std	Y+16, r25	; 0x10
    27ea:	8f 87       	std	Y+15, r24	; 0x0f
    27ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ee:	98 89       	ldd	r25, Y+16	; 0x10
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <LCD_displayCharacter+0x2e2>
    27f4:	98 8b       	std	Y+16, r25	; 0x10
    27f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27f8:	83 e0       	ldi	r24, 0x03	; 3
    27fa:	66 e0       	ldi	r22, 0x06	; 6
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <GPIO_writePin>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a0 e8       	ldi	r26, 0x80	; 128
    2808:	bf e3       	ldi	r27, 0x3F	; 63
    280a:	8b 87       	std	Y+11, r24	; 0x0b
    280c:	9c 87       	std	Y+12, r25	; 0x0c
    280e:	ad 87       	std	Y+13, r26	; 0x0d
    2810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	6b 85       	ldd	r22, Y+11	; 0x0b
    2814:	7c 85       	ldd	r23, Y+12	; 0x0c
    2816:	8d 85       	ldd	r24, Y+13	; 0x0d
    2818:	9e 85       	ldd	r25, Y+14	; 0x0e
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a e7       	ldi	r20, 0x7A	; 122
    2820:	53 e4       	ldi	r21, 0x43	; 67
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	8f 83       	std	Y+7, r24	; 0x07
    282c:	98 87       	std	Y+8, r25	; 0x08
    282e:	a9 87       	std	Y+9, r26	; 0x09
    2830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <LCD_displayCharacter+0x346>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2854:	6f 81       	ldd	r22, Y+7	; 0x07
    2856:	78 85       	ldd	r23, Y+8	; 0x08
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	9a 85       	ldd	r25, Y+10	; 0x0a
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	6b 85       	ldd	r22, Y+11	; 0x0b
    286e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2870:	8d 85       	ldd	r24, Y+13	; 0x0d
    2872:	9e 85       	ldd	r25, Y+14	; 0x0e
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <LCD_displayCharacter+0x3a6>
    2896:	89 e1       	ldi	r24, 0x19	; 25
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	8b 83       	std	Y+3, r24	; 0x03
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	9c 81       	ldd	r25, Y+4	; 0x04
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <LCD_displayCharacter+0x394>
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <LCD_displayCharacter+0x388>
    28bc:	14 c0       	rjmp	.+40     	; 0x28e6 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	6f 81       	ldd	r22, Y+7	; 0x07
    28c0:	78 85       	ldd	r23, Y+8	; 0x08
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	9e 81       	ldd	r25, Y+6	; 0x06
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_displayCharacter+0x3d0>
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28e6:	ea 96       	adiw	r28, 0x3a	; 58
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <LCD_displayString+0x6>
    28fe:	0f 92       	push	r0
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	9b 83       	std	Y+3, r25	; 0x03
    2906:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2908:	19 82       	std	Y+1, r1	; 0x01
    290a:	0e c0       	rjmp	.+28     	; 0x2928 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	28 2f       	mov	r18, r24
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	9b 81       	ldd	r25, Y+3	; 0x03
    2916:	fc 01       	movw	r30, r24
    2918:	e2 0f       	add	r30, r18
    291a:	f3 1f       	adc	r31, r19
    291c:	80 81       	ld	r24, Z
    291e:	0e 94 87 12 	call	0x250e	; 0x250e <LCD_displayCharacter>
		i++;
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	8f 5f       	subi	r24, 0xFF	; 255
    2926:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	9b 81       	ldd	r25, Y+3	; 0x03
    2932:	fc 01       	movw	r30, r24
    2934:	e2 0f       	add	r30, r18
    2936:	f3 1f       	adc	r31, r19
    2938:	80 81       	ld	r24, Z
    293a:	88 23       	and	r24, r24
    293c:	39 f7       	brne	.-50     	; 0x290c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <LCD_moveCursor+0x6>
    2950:	00 d0       	rcall	.+0      	; 0x2952 <LCD_moveCursor+0x8>
    2952:	0f 92       	push	r0
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	8a 83       	std	Y+2, r24	; 0x02
    295a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	3d 83       	std	Y+5, r19	; 0x05
    2964:	2c 83       	std	Y+4, r18	; 0x04
    2966:	8c 81       	ldd	r24, Y+4	; 0x04
    2968:	9d 81       	ldd	r25, Y+5	; 0x05
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	91 05       	cpc	r25, r1
    296e:	c1 f0       	breq	.+48     	; 0x29a0 <LCD_moveCursor+0x56>
    2970:	2c 81       	ldd	r18, Y+4	; 0x04
    2972:	3d 81       	ldd	r19, Y+5	; 0x05
    2974:	22 30       	cpi	r18, 0x02	; 2
    2976:	31 05       	cpc	r19, r1
    2978:	2c f4       	brge	.+10     	; 0x2984 <LCD_moveCursor+0x3a>
    297a:	8c 81       	ldd	r24, Y+4	; 0x04
    297c:	9d 81       	ldd	r25, Y+5	; 0x05
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	61 f0       	breq	.+24     	; 0x299a <LCD_moveCursor+0x50>
    2982:	19 c0       	rjmp	.+50     	; 0x29b6 <LCD_moveCursor+0x6c>
    2984:	2c 81       	ldd	r18, Y+4	; 0x04
    2986:	3d 81       	ldd	r19, Y+5	; 0x05
    2988:	22 30       	cpi	r18, 0x02	; 2
    298a:	31 05       	cpc	r19, r1
    298c:	69 f0       	breq	.+26     	; 0x29a8 <LCD_moveCursor+0x5e>
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	9d 81       	ldd	r25, Y+5	; 0x05
    2992:	83 30       	cpi	r24, 0x03	; 3
    2994:	91 05       	cpc	r25, r1
    2996:	61 f0       	breq	.+24     	; 0x29b0 <LCD_moveCursor+0x66>
    2998:	0e c0       	rjmp	.+28     	; 0x29b6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	0b c0       	rjmp	.+22     	; 0x29b6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	80 5c       	subi	r24, 0xC0	; 192
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	07 c0       	rjmp	.+14     	; 0x29b6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	80 5f       	subi	r24, 0xF0	; 240
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	03 c0       	rjmp	.+6      	; 0x29b6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	80 5b       	subi	r24, 0xB0	; 176
    29b4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	80 68       	ori	r24, 0x80	; 128
    29ba:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_sendCommand>
}
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <LCD_displayStringRowColumn+0x6>
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <LCD_displayStringRowColumn+0x8>
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	89 83       	std	Y+1, r24	; 0x01
    29dc:	6a 83       	std	Y+2, r22	; 0x02
    29de:	5c 83       	std	Y+4, r21	; 0x04
    29e0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	6a 81       	ldd	r22, Y+2	; 0x02
    29e6:	0e 94 a5 14 	call	0x294a	; 0x294a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
}
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	62 97       	sbiw	r28, 0x12	; 18
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	9a 8b       	std	Y+18, r25	; 0x12
    2a16:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a18:	89 89       	ldd	r24, Y+17	; 0x11
    2a1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a1c:	9e 01       	movw	r18, r28
    2a1e:	2f 5f       	subi	r18, 0xFF	; 255
    2a20:	3f 4f       	sbci	r19, 0xFF	; 255
    2a22:	b9 01       	movw	r22, r18
    2a24:	4a e0       	ldi	r20, 0x0A	; 10
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	0e 94 99 19 	call	0x3332	; 0x3332 <itoa>
   LCD_displayString(buff); /* Display the string */
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_displayString>
}
    2a34:	62 96       	adiw	r28, 0x12	; 18
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	0e 94 92 10 	call	0x2124	; 0x2124 <LCD_sendCommand>
}
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2a5a:	1f 92       	push	r1
    2a5c:	0f 92       	push	r0
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	0f 92       	push	r0
    2a62:	11 24       	eor	r1, r1
    2a64:	2f 93       	push	r18
    2a66:	3f 93       	push	r19
    2a68:	4f 93       	push	r20
    2a6a:	5f 93       	push	r21
    2a6c:	6f 93       	push	r22
    2a6e:	7f 93       	push	r23
    2a70:	8f 93       	push	r24
    2a72:	9f 93       	push	r25
    2a74:	af 93       	push	r26
    2a76:	bf 93       	push	r27
    2a78:	ef 93       	push	r30
    2a7a:	ff 93       	push	r31
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    2a84:	80 91 5b 01 	lds	r24, 0x015B
    2a88:	90 91 5c 01 	lds	r25, 0x015C
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	29 f0       	breq	.+10     	; 0x2a9a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr_Timer0)();
    2a90:	e0 91 5b 01 	lds	r30, 0x015B
    2a94:	f0 91 5c 01 	lds	r31, 0x015C
    2a98:	09 95       	icall
	}
}
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	ff 91       	pop	r31
    2aa0:	ef 91       	pop	r30
    2aa2:	bf 91       	pop	r27
    2aa4:	af 91       	pop	r26
    2aa6:	9f 91       	pop	r25
    2aa8:	8f 91       	pop	r24
    2aaa:	7f 91       	pop	r23
    2aac:	6f 91       	pop	r22
    2aae:	5f 91       	pop	r21
    2ab0:	4f 91       	pop	r20
    2ab2:	3f 91       	pop	r19
    2ab4:	2f 91       	pop	r18
    2ab6:	0f 90       	pop	r0
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	0f 90       	pop	r0
    2abc:	1f 90       	pop	r1
    2abe:	18 95       	reti

00002ac0 <__vector_19>:

/********************************************************************************/

ISR(TIMER0_COMP_vect)
{
    2ac0:	1f 92       	push	r1
    2ac2:	0f 92       	push	r0
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	0f 92       	push	r0
    2ac8:	11 24       	eor	r1, r1
    2aca:	2f 93       	push	r18
    2acc:	3f 93       	push	r19
    2ace:	4f 93       	push	r20
    2ad0:	5f 93       	push	r21
    2ad2:	6f 93       	push	r22
    2ad4:	7f 93       	push	r23
    2ad6:	8f 93       	push	r24
    2ad8:	9f 93       	push	r25
    2ada:	af 93       	push	r26
    2adc:	bf 93       	push	r27
    2ade:	ef 93       	push	r30
    2ae0:	ff 93       	push	r31
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    2aea:	80 91 5b 01 	lds	r24, 0x015B
    2aee:	90 91 5c 01 	lds	r25, 0x015C
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	29 f0       	breq	.+10     	; 0x2b00 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr_Timer0)();
    2af6:	e0 91 5b 01 	lds	r30, 0x015B
    2afa:	f0 91 5c 01 	lds	r31, 0x015C
    2afe:	09 95       	icall
	}
}
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	ff 91       	pop	r31
    2b06:	ef 91       	pop	r30
    2b08:	bf 91       	pop	r27
    2b0a:	af 91       	pop	r26
    2b0c:	9f 91       	pop	r25
    2b0e:	8f 91       	pop	r24
    2b10:	7f 91       	pop	r23
    2b12:	6f 91       	pop	r22
    2b14:	5f 91       	pop	r21
    2b16:	4f 91       	pop	r20
    2b18:	3f 91       	pop	r19
    2b1a:	2f 91       	pop	r18
    2b1c:	0f 90       	pop	r0
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	0f 90       	pop	r0
    2b22:	1f 90       	pop	r1
    2b24:	18 95       	reti

00002b26 <__vector_8>:

/********************************************************************************/

ISR(TIMER1_OVF_vect)
{
    2b26:	1f 92       	push	r1
    2b28:	0f 92       	push	r0
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	0f 92       	push	r0
    2b2e:	11 24       	eor	r1, r1
    2b30:	2f 93       	push	r18
    2b32:	3f 93       	push	r19
    2b34:	4f 93       	push	r20
    2b36:	5f 93       	push	r21
    2b38:	6f 93       	push	r22
    2b3a:	7f 93       	push	r23
    2b3c:	8f 93       	push	r24
    2b3e:	9f 93       	push	r25
    2b40:	af 93       	push	r26
    2b42:	bf 93       	push	r27
    2b44:	ef 93       	push	r30
    2b46:	ff 93       	push	r31
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    2b50:	80 91 5d 01 	lds	r24, 0x015D
    2b54:	90 91 5e 01 	lds	r25, 0x015E
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	29 f0       	breq	.+10     	; 0x2b66 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr_Timer1)();
    2b5c:	e0 91 5d 01 	lds	r30, 0x015D
    2b60:	f0 91 5e 01 	lds	r31, 0x015E
    2b64:	09 95       	icall
	}
}
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	ff 91       	pop	r31
    2b6c:	ef 91       	pop	r30
    2b6e:	bf 91       	pop	r27
    2b70:	af 91       	pop	r26
    2b72:	9f 91       	pop	r25
    2b74:	8f 91       	pop	r24
    2b76:	7f 91       	pop	r23
    2b78:	6f 91       	pop	r22
    2b7a:	5f 91       	pop	r21
    2b7c:	4f 91       	pop	r20
    2b7e:	3f 91       	pop	r19
    2b80:	2f 91       	pop	r18
    2b82:	0f 90       	pop	r0
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	0f 90       	pop	r0
    2b88:	1f 90       	pop	r1
    2b8a:	18 95       	reti

00002b8c <__vector_6>:

/********************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    2b8c:	1f 92       	push	r1
    2b8e:	0f 92       	push	r0
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	0f 92       	push	r0
    2b94:	11 24       	eor	r1, r1
    2b96:	2f 93       	push	r18
    2b98:	3f 93       	push	r19
    2b9a:	4f 93       	push	r20
    2b9c:	5f 93       	push	r21
    2b9e:	6f 93       	push	r22
    2ba0:	7f 93       	push	r23
    2ba2:	8f 93       	push	r24
    2ba4:	9f 93       	push	r25
    2ba6:	af 93       	push	r26
    2ba8:	bf 93       	push	r27
    2baa:	ef 93       	push	r30
    2bac:	ff 93       	push	r31
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    2bb6:	80 91 5d 01 	lds	r24, 0x015D
    2bba:	90 91 5e 01 	lds	r25, 0x015E
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	29 f0       	breq	.+10     	; 0x2bcc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr_Timer1)();
    2bc2:	e0 91 5d 01 	lds	r30, 0x015D
    2bc6:	f0 91 5e 01 	lds	r31, 0x015E
    2bca:	09 95       	icall
	}
}
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	ff 91       	pop	r31
    2bd2:	ef 91       	pop	r30
    2bd4:	bf 91       	pop	r27
    2bd6:	af 91       	pop	r26
    2bd8:	9f 91       	pop	r25
    2bda:	8f 91       	pop	r24
    2bdc:	7f 91       	pop	r23
    2bde:	6f 91       	pop	r22
    2be0:	5f 91       	pop	r21
    2be2:	4f 91       	pop	r20
    2be4:	3f 91       	pop	r19
    2be6:	2f 91       	pop	r18
    2be8:	0f 90       	pop	r0
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	0f 90       	pop	r0
    2bee:	1f 90       	pop	r1
    2bf0:	18 95       	reti

00002bf2 <__vector_4>:

/********************************************************************************/

ISR(TIMER2_OVF_vect)
{
    2bf2:	1f 92       	push	r1
    2bf4:	0f 92       	push	r0
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	0f 92       	push	r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	2f 93       	push	r18
    2bfe:	3f 93       	push	r19
    2c00:	4f 93       	push	r20
    2c02:	5f 93       	push	r21
    2c04:	6f 93       	push	r22
    2c06:	7f 93       	push	r23
    2c08:	8f 93       	push	r24
    2c0a:	9f 93       	push	r25
    2c0c:	af 93       	push	r26
    2c0e:	bf 93       	push	r27
    2c10:	ef 93       	push	r30
    2c12:	ff 93       	push	r31
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    2c1c:	80 91 5f 01 	lds	r24, 0x015F
    2c20:	90 91 60 01 	lds	r25, 0x0160
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	29 f0       	breq	.+10     	; 0x2c32 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)();
    2c28:	e0 91 5f 01 	lds	r30, 0x015F
    2c2c:	f0 91 60 01 	lds	r31, 0x0160
    2c30:	09 95       	icall
	}
}
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	ff 91       	pop	r31
    2c38:	ef 91       	pop	r30
    2c3a:	bf 91       	pop	r27
    2c3c:	af 91       	pop	r26
    2c3e:	9f 91       	pop	r25
    2c40:	8f 91       	pop	r24
    2c42:	7f 91       	pop	r23
    2c44:	6f 91       	pop	r22
    2c46:	5f 91       	pop	r21
    2c48:	4f 91       	pop	r20
    2c4a:	3f 91       	pop	r19
    2c4c:	2f 91       	pop	r18
    2c4e:	0f 90       	pop	r0
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	0f 90       	pop	r0
    2c54:	1f 90       	pop	r1
    2c56:	18 95       	reti

00002c58 <__vector_3>:

/********************************************************************************/

ISR(TIMER2_COMP_vect)
{
    2c58:	1f 92       	push	r1
    2c5a:	0f 92       	push	r0
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	0f 92       	push	r0
    2c60:	11 24       	eor	r1, r1
    2c62:	2f 93       	push	r18
    2c64:	3f 93       	push	r19
    2c66:	4f 93       	push	r20
    2c68:	5f 93       	push	r21
    2c6a:	6f 93       	push	r22
    2c6c:	7f 93       	push	r23
    2c6e:	8f 93       	push	r24
    2c70:	9f 93       	push	r25
    2c72:	af 93       	push	r26
    2c74:	bf 93       	push	r27
    2c76:	ef 93       	push	r30
    2c78:	ff 93       	push	r31
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    2c82:	80 91 5f 01 	lds	r24, 0x015F
    2c86:	90 91 60 01 	lds	r25, 0x0160
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	29 f0       	breq	.+10     	; 0x2c98 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)();
    2c8e:	e0 91 5f 01 	lds	r30, 0x015F
    2c92:	f0 91 60 01 	lds	r31, 0x0160
    2c96:	09 95       	icall
	}
}
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	ff 91       	pop	r31
    2c9e:	ef 91       	pop	r30
    2ca0:	bf 91       	pop	r27
    2ca2:	af 91       	pop	r26
    2ca4:	9f 91       	pop	r25
    2ca6:	8f 91       	pop	r24
    2ca8:	7f 91       	pop	r23
    2caa:	6f 91       	pop	r22
    2cac:	5f 91       	pop	r21
    2cae:	4f 91       	pop	r20
    2cb0:	3f 91       	pop	r19
    2cb2:	2f 91       	pop	r18
    2cb4:	0f 90       	pop	r0
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	0f 90       	pop	r0
    2cba:	1f 90       	pop	r1
    2cbc:	18 95       	reti

00002cbe <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	62 97       	sbiw	r28, 0x12	; 18
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_id)
    2cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cda:	80 81       	ld	r24, Z
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	3a 8b       	std	Y+18, r19	; 0x12
    2ce2:	29 8b       	std	Y+17, r18	; 0x11
    2ce4:	89 89       	ldd	r24, Y+17	; 0x11
    2ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	91 05       	cpc	r25, r1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <Timer_init+0x32>
    2cee:	6b c0       	rjmp	.+214    	; 0x2dc6 <Timer_init+0x108>
    2cf0:	29 89       	ldd	r18, Y+17	; 0x11
    2cf2:	3a 89       	ldd	r19, Y+18	; 0x12
    2cf4:	22 30       	cpi	r18, 0x02	; 2
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <Timer_init+0x3e>
    2cfa:	d8 c0       	rjmp	.+432    	; 0x2eac <Timer_init+0x1ee>
    2cfc:	89 89       	ldd	r24, Y+17	; 0x11
    2cfe:	9a 89       	ldd	r25, Y+18	; 0x12
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <Timer_init+0x48>
    2d04:	25 c1       	rjmp	.+586    	; 0x2f50 <Timer_init+0x292>
	{
	case TIMER0:

		TCCR0 |= (1<<7);
    2d06:	a3 e5       	ldi	r26, 0x53	; 83
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e3 e5       	ldi	r30, 0x53	; 83
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	80 68       	ori	r24, 0x80	; 128
    2d12:	8c 93       	st	X, r24
		TCNT0 = (TCNT0 & 0x00) | (Config_Ptr->init_value); //Set Timer initial value
    2d14:	e2 e5       	ldi	r30, 0x52	; 82
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	90 81       	ld	r25, Z
    2d1a:	a2 e5       	ldi	r26, 0x52	; 82
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d20:	fa 81       	ldd	r31, Y+2	; 0x02
    2d22:	84 81       	ldd	r24, Z+4	; 0x04
    2d24:	95 81       	ldd	r25, Z+5	; 0x05
    2d26:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock); //Set Timer clock
    2d28:	a3 e5       	ldi	r26, 0x53	; 83
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e3 e5       	ldi	r30, 0x53	; 83
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
    2d32:	98 2f       	mov	r25, r24
    2d34:	98 7f       	andi	r25, 0xF8	; 248
    2d36:	e9 81       	ldd	r30, Y+1	; 0x01
    2d38:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	89 2b       	or	r24, r25
    2d3e:	8c 93       	st	X, r24

		switch(Config_Ptr->timer_mode)
    2d40:	e9 81       	ldd	r30, Y+1	; 0x01
    2d42:	fa 81       	ldd	r31, Y+2	; 0x02
    2d44:	81 81       	ldd	r24, Z+1	; 0x01
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	3f 87       	std	Y+15, r19	; 0x0f
    2d4c:	2e 87       	std	Y+14, r18	; 0x0e
    2d4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d50:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	31 f0       	breq	.+12     	; 0x2d62 <Timer_init+0xa4>
    2d56:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d58:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d5a:	21 30       	cpi	r18, 0x01	; 1
    2d5c:	31 05       	cpc	r19, r1
    2d5e:	a9 f0       	breq	.+42     	; 0x2d8a <Timer_init+0xcc>
    2d60:	f7 c0       	rjmp	.+494    	; 0x2f50 <Timer_init+0x292>
		{
		case OVERFLOW:

			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2d62:	a9 e5       	ldi	r26, 0x59	; 89
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	e9 e5       	ldi	r30, 0x59	; 89
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	81 60       	ori	r24, 0x01	; 1
    2d6e:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0x07) | (Config_Ptr->timer_mode); //Set Timer mode
    2d70:	a3 e5       	ldi	r26, 0x53	; 83
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	e3 e5       	ldi	r30, 0x53	; 83
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	98 2f       	mov	r25, r24
    2d7c:	97 70       	andi	r25, 0x07	; 7
    2d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d80:	fa 81       	ldd	r31, Y+2	; 0x02
    2d82:	81 81       	ldd	r24, Z+1	; 0x01
    2d84:	89 2b       	or	r24, r25
    2d86:	8c 93       	st	X, r24
    2d88:	e3 c0       	rjmp	.+454    	; 0x2f50 <Timer_init+0x292>
			break;

		case COMPARE:

			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    2d8a:	a9 e5       	ldi	r26, 0x59	; 89
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e9 e5       	ldi	r30, 0x59	; 89
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	82 60       	ori	r24, 0x02	; 2
    2d96:	8c 93       	st	X, r24
			OCR0 = (OCR0 & 0x00) | (Config_Ptr->compare_value); //Set Timer compare value
    2d98:	ec e5       	ldi	r30, 0x5C	; 92
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	30 81       	ld	r19, Z
    2d9e:	ac e5       	ldi	r26, 0x5C	; 92
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e9 81       	ldd	r30, Y+1	; 0x01
    2da4:	fa 81       	ldd	r31, Y+2	; 0x02
    2da6:	86 81       	ldd	r24, Z+6	; 0x06
    2da8:	97 81       	ldd	r25, Z+7	; 0x07
    2daa:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0x07) | (Config_Ptr->timer_mode); //Set Timer mode
    2dac:	a3 e5       	ldi	r26, 0x53	; 83
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e3 e5       	ldi	r30, 0x53	; 83
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	98 2f       	mov	r25, r24
    2db8:	97 70       	andi	r25, 0x07	; 7
    2dba:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbe:	81 81       	ldd	r24, Z+1	; 0x01
    2dc0:	89 2b       	or	r24, r25
    2dc2:	8c 93       	st	X, r24
    2dc4:	c5 c0       	rjmp	.+394    	; 0x2f50 <Timer_init+0x292>
		/***************************************************************************************/

		case TIMER1:


			TCNT1 = (TCNT1 & 0x00) | (Config_Ptr->init_value); //Set Timer initial value
    2dc6:	ec e4       	ldi	r30, 0x4C	; 76
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	91 81       	ldd	r25, Z+1	; 0x01
    2dce:	ac e4       	ldi	r26, 0x4C	; 76
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd6:	84 81       	ldd	r24, Z+4	; 0x04
    2dd8:	95 81       	ldd	r25, Z+5	; 0x05
    2dda:	11 96       	adiw	r26, 0x01	; 1
    2ddc:	9c 93       	st	X, r25
    2dde:	8e 93       	st	-X, r24
			TCCR1A = 0x08; //Set Timer mode
    2de0:	ef e4       	ldi	r30, 0x4F	; 79
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	88 e0       	ldi	r24, 0x08	; 8
    2de6:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0x07) | (Config_Ptr->clock); //Set Timer clock
    2de8:	ae e4       	ldi	r26, 0x4E	; 78
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	ee e4       	ldi	r30, 0x4E	; 78
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	98 2f       	mov	r25, r24
    2df4:	97 70       	andi	r25, 0x07	; 7
    2df6:	e9 81       	ldd	r30, Y+1	; 0x01
    2df8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	89 2b       	or	r24, r25
    2dfe:	8c 93       	st	X, r24

			switch(Config_Ptr->timer_mode)
    2e00:	e9 81       	ldd	r30, Y+1	; 0x01
    2e02:	fa 81       	ldd	r31, Y+2	; 0x02
    2e04:	81 81       	ldd	r24, Z+1	; 0x01
    2e06:	28 2f       	mov	r18, r24
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	3a 87       	std	Y+10, r19	; 0x0a
    2e0c:	29 87       	std	Y+9, r18	; 0x09
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	31 f0       	breq	.+12     	; 0x2e22 <Timer_init+0x164>
    2e16:	29 85       	ldd	r18, Y+9	; 0x09
    2e18:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e1a:	21 30       	cpi	r18, 0x01	; 1
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	e9 f0       	breq	.+58     	; 0x2e5a <Timer_init+0x19c>
    2e20:	97 c0       	rjmp	.+302    	; 0x2f50 <Timer_init+0x292>
			{
			case OVERFLOW:

				TIMSK |= (1<<TOIE1); /* Enable Timer1 OverFlow A Interrupt */
    2e22:	a9 e5       	ldi	r26, 0x59	; 89
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e9 e5       	ldi	r30, 0x59	; 89
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	84 60       	ori	r24, 0x04	; 4
    2e2e:	8c 93       	st	X, r24
				TCCR1B = (TCCR1B & 0x07) | ((Config_Ptr->timer_mode)<<3); //Set Timer mode
    2e30:	ae e4       	ldi	r26, 0x4E	; 78
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	ee e4       	ldi	r30, 0x4E	; 78
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	27 70       	andi	r18, 0x07	; 7
    2e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e40:	fa 81       	ldd	r31, Y+2	; 0x02
    2e42:	81 81       	ldd	r24, Z+1	; 0x01
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	82 2b       	or	r24, r18
    2e56:	8c 93       	st	X, r24
    2e58:	7b c0       	rjmp	.+246    	; 0x2f50 <Timer_init+0x292>
				break;

			case COMPARE:

				TCCR1B = (TCCR1B & 0x07) | ((Config_Ptr->timer_mode)<<3); //Set Timer mode
    2e5a:	ae e4       	ldi	r26, 0x4E	; 78
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	ee e4       	ldi	r30, 0x4E	; 78
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	28 2f       	mov	r18, r24
    2e66:	27 70       	andi	r18, 0x07	; 7
    2e68:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6c:	81 81       	ldd	r24, Z+1	; 0x01
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	82 2b       	or	r24, r18
    2e80:	8c 93       	st	X, r24
				TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2e82:	a9 e5       	ldi	r26, 0x59	; 89
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e9 e5       	ldi	r30, 0x59	; 89
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	80 61       	ori	r24, 0x10	; 16
    2e8e:	8c 93       	st	X, r24
				OCR1A = (OCR1A & 0x00) | (Config_Ptr->compare_value); //Set Timer compare value
    2e90:	ea e4       	ldi	r30, 0x4A	; 74
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	80 81       	ld	r24, Z
    2e96:	91 81       	ldd	r25, Z+1	; 0x01
    2e98:	aa e4       	ldi	r26, 0x4A	; 74
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea0:	86 81       	ldd	r24, Z+6	; 0x06
    2ea2:	97 81       	ldd	r25, Z+7	; 0x07
    2ea4:	11 96       	adiw	r26, 0x01	; 1
    2ea6:	9c 93       	st	X, r25
    2ea8:	8e 93       	st	-X, r24
    2eaa:	52 c0       	rjmp	.+164    	; 0x2f50 <Timer_init+0x292>

			/***************************************************************************************/
			case TIMER2:


				TCCR2 = (1<<FOC2);
    2eac:	e5 e4       	ldi	r30, 0x45	; 69
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 e8       	ldi	r24, 0x80	; 128
    2eb2:	80 83       	st	Z, r24
				TCNT2 = (TCNT2 & 0x00) | (Config_Ptr->init_value); //Set Timer initial value
    2eb4:	e4 e4       	ldi	r30, 0x44	; 68
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	90 81       	ld	r25, Z
    2eba:	a4 e4       	ldi	r26, 0x44	; 68
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec2:	84 81       	ldd	r24, Z+4	; 0x04
    2ec4:	95 81       	ldd	r25, Z+5	; 0x05
    2ec6:	8c 93       	st	X, r24
				TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->clock2); //Set Timer clock
    2ec8:	a5 e4       	ldi	r26, 0x45	; 69
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	e5 e4       	ldi	r30, 0x45	; 69
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	80 81       	ld	r24, Z
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	98 7f       	andi	r25, 0xF8	; 248
    2ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eda:	83 81       	ldd	r24, Z+3	; 0x03
    2edc:	89 2b       	or	r24, r25
    2ede:	8c 93       	st	X, r24

				switch(Config_Ptr->timer_mode)
    2ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee4:	81 81       	ldd	r24, Z+1	; 0x01
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	3d 83       	std	Y+5, r19	; 0x05
    2eec:	2c 83       	std	Y+4, r18	; 0x04
    2eee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	31 f0       	breq	.+12     	; 0x2f02 <Timer_init+0x244>
    2ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    2efa:	21 30       	cpi	r18, 0x01	; 1
    2efc:	31 05       	cpc	r19, r1
    2efe:	81 f0       	breq	.+32     	; 0x2f20 <Timer_init+0x262>
    2f00:	27 c0       	rjmp	.+78     	; 0x2f50 <Timer_init+0x292>
				{
				case OVERFLOW:

					TIMSK |= (1<<TOIE2); // Enable Timer2 Overflow Interrupt
    2f02:	a9 e5       	ldi	r26, 0x59	; 89
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	e9 e5       	ldi	r30, 0x59	; 89
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 64       	ori	r24, 0x40	; 64
    2f0e:	8c 93       	st	X, r24
					TCCR2 &= ~(1<<WGM21) & ~(1<<WGM20); //Set Timer mode
    2f10:	a5 e4       	ldi	r26, 0x45	; 69
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e5 e4       	ldi	r30, 0x45	; 69
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	87 7b       	andi	r24, 0xB7	; 183
    2f1c:	8c 93       	st	X, r24
    2f1e:	18 c0       	rjmp	.+48     	; 0x2f50 <Timer_init+0x292>
					break;

				case COMPARE:

					TIMSK |= (1<<OCIE2); // Enable Timer0 Compare Interrupt
    2f20:	a9 e5       	ldi	r26, 0x59	; 89
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e9 e5       	ldi	r30, 0x59	; 89
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	80 68       	ori	r24, 0x80	; 128
    2f2c:	8c 93       	st	X, r24
					OCR2 = (OCR2 & 0x00) | (Config_Ptr->compare_value); //Set Timer compare value
    2f2e:	e3 e4       	ldi	r30, 0x43	; 67
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	30 81       	ld	r19, Z
    2f34:	a3 e4       	ldi	r26, 0x43	; 67
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e9 81       	ldd	r30, Y+1	; 0x01
    2f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3c:	86 81       	ldd	r24, Z+6	; 0x06
    2f3e:	97 81       	ldd	r25, Z+7	; 0x07
    2f40:	8c 93       	st	X, r24
					TCCR2 |= (1<<WGM21); //Set Timer mode
    2f42:	a5 e4       	ldi	r26, 0x45	; 69
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e5 e4       	ldi	r30, 0x45	; 69
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	88 60       	ori	r24, 0x08	; 8
    2f4e:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    2f50:	62 96       	adiw	r28, 0x12	; 18
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <Timer_deInit>:
/***************************************************************************************/
void Timer_deInit(Timer_Id timer_id)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <Timer_deInit+0x6>
    2f68:	0f 92       	push	r0
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_id)
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	28 2f       	mov	r18, r24
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	3b 83       	std	Y+3, r19	; 0x03
    2f78:	2a 83       	std	Y+2, r18	; 0x02
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7e:	81 30       	cpi	r24, 0x01	; 1
    2f80:	91 05       	cpc	r25, r1
    2f82:	99 f0       	breq	.+38     	; 0x2faa <Timer_deInit+0x48>
    2f84:	2a 81       	ldd	r18, Y+2	; 0x02
    2f86:	3b 81       	ldd	r19, Y+3	; 0x03
    2f88:	22 30       	cpi	r18, 0x02	; 2
    2f8a:	31 05       	cpc	r19, r1
    2f8c:	09 f1       	breq	.+66     	; 0x2fd0 <Timer_deInit+0x6e>
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	9b 81       	ldd	r25, Y+3	; 0x03
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	31 f5       	brne	.+76     	; 0x2fe2 <Timer_deInit+0x80>
	{
	case TIMER0:


		/* Clear All Timer0 Registers */
		TCNT0 = 0;
    2f96:	e2 e5       	ldi	r30, 0x52	; 82
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	10 82       	st	Z, r1
		TCCR0 = 0;
    2f9c:	e3 e5       	ldi	r30, 0x53	; 83
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	10 82       	st	Z, r1
		OCR0 = 0;
    2fa2:	ec e5       	ldi	r30, 0x5C	; 92
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	10 82       	st	Z, r1
    2fa8:	1c c0       	rjmp	.+56     	; 0x2fe2 <Timer_deInit+0x80>
		break;

	case TIMER1:

		/* Clear All Timer1 Registers */
		TCCR1A = 0;
    2faa:	ef e4       	ldi	r30, 0x4F	; 79
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	10 82       	st	Z, r1
		TCCR1B = 0;
    2fb0:	ee e4       	ldi	r30, 0x4E	; 78
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	10 82       	st	Z, r1
		TCNT1 = 0;
    2fb6:	ec e4       	ldi	r30, 0x4C	; 76
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	11 82       	std	Z+1, r1	; 0x01
    2fbc:	10 82       	st	Z, r1
		OCR1A = 0;
    2fbe:	ea e4       	ldi	r30, 0x4A	; 74
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	11 82       	std	Z+1, r1	; 0x01
    2fc4:	10 82       	st	Z, r1
		OCR1B = 0;
    2fc6:	e8 e4       	ldi	r30, 0x48	; 72
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	11 82       	std	Z+1, r1	; 0x01
    2fcc:	10 82       	st	Z, r1
    2fce:	09 c0       	rjmp	.+18     	; 0x2fe2 <Timer_deInit+0x80>
		break;

	case TIMER2:

		/* Clear All Timer2 Registers */
		TCCR2 = 0;
    2fd0:	e5 e4       	ldi	r30, 0x45	; 69
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	10 82       	st	Z, r1
		TCNT2 = 0;
    2fd6:	e4 e4       	ldi	r30, 0x44	; 68
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	10 82       	st	Z, r1
		OCR2 = 0;
    2fdc:	e3 e4       	ldi	r30, 0x43	; 67
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	10 82       	st	Z, r1
		break;
	}
}
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <Timer0_setCallBack>:

/***************************************************************************************/

void Timer0_setCallBack(void(*t_ptr)(void))
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <Timer0_setCallBack+0x6>
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer0 = t_ptr;
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	90 93 5c 01 	sts	0x015C, r25
    3004:	80 93 5b 01 	sts	0x015B, r24
}
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <Timer1_setCallBack>:

/***************************************************************************************/

void Timer1_setCallBack(void(*t_ptr)(void))
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	00 d0       	rcall	.+0      	; 0x3018 <Timer1_setCallBack+0x6>
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer1 = t_ptr;
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	90 93 5e 01 	sts	0x015E, r25
    3028:	80 93 5d 01 	sts	0x015D, r24
}
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <Timer2_setCallBack>:

/***************************************************************************************/

void Timer2_setCallBack(void(*t_ptr)(void))
{
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	00 d0       	rcall	.+0      	; 0x303c <Timer2_setCallBack+0x6>
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer2= t_ptr;
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	90 93 60 01 	sts	0x0160, r25
    304c:	80 93 5f 01 	sts	0x015F, r24
}
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <UART_init+0x6>
    3060:	00 d0       	rcall	.+0      	; 0x3062 <UART_init+0x8>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	9c 83       	std	Y+4, r25	; 0x04
    3068:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    306a:	1a 82       	std	Y+2, r1	; 0x02
    306c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    306e:	eb e2       	ldi	r30, 0x2B	; 43
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3076:	ea e2       	ldi	r30, 0x2A	; 42
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	88 e1       	ldi	r24, 0x18	; 24
    307c:	80 83       	st	Z, r24
	 * UPM1:0  = Parity bit
	 * USBS    = Stop bit
	 * UCSZ1:0 = Character size
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    307e:	e0 e4       	ldi	r30, 0x40	; 64
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 e8       	ldi	r24, 0x80	; 128
    3084:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity_bit)<<4);
    3086:	a0 e4       	ldi	r26, 0x40	; 64
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e0 e4       	ldi	r30, 0x40	; 64
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	28 2f       	mov	r18, r24
    3092:	2f 7c       	andi	r18, 0xCF	; 207
    3094:	eb 81       	ldd	r30, Y+3	; 0x03
    3096:	fc 81       	ldd	r31, Y+4	; 0x04
    3098:	80 81       	ld	r24, Z
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	82 95       	swap	r24
    30a0:	92 95       	swap	r25
    30a2:	90 7f       	andi	r25, 0xF0	; 240
    30a4:	98 27       	eor	r25, r24
    30a6:	80 7f       	andi	r24, 0xF0	; 240
    30a8:	98 27       	eor	r25, r24
    30aa:	82 2b       	or	r24, r18
    30ac:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->char_size)<<1);
    30ae:	a0 e4       	ldi	r26, 0x40	; 64
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	e0 e4       	ldi	r30, 0x40	; 64
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	28 2f       	mov	r18, r24
    30ba:	29 7f       	andi	r18, 0xF9	; 249
    30bc:	eb 81       	ldd	r30, Y+3	; 0x03
    30be:	fc 81       	ldd	r31, Y+4	; 0x04
    30c0:	82 81       	ldd	r24, Z+2	; 0x02
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	88 0f       	add	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	82 2b       	or	r24, r18
    30cc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xFE) | ((Config_Ptr->stop_bit)<<3);
    30ce:	a0 e4       	ldi	r26, 0x40	; 64
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e0 e4       	ldi	r30, 0x40	; 64
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	28 2f       	mov	r18, r24
    30da:	2e 7f       	andi	r18, 0xFE	; 254
    30dc:	eb 81       	ldd	r30, Y+3	; 0x03
    30de:	fc 81       	ldd	r31, Y+4	; 0x04
    30e0:	81 81       	ldd	r24, Z+1	; 0x01
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	88 0f       	add	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	88 0f       	add	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	82 2b       	or	r24, r18
    30f4:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    30f6:	eb 81       	ldd	r30, Y+3	; 0x03
    30f8:	fc 81       	ldd	r31, Y+4	; 0x04
    30fa:	83 81       	ldd	r24, Z+3	; 0x03
    30fc:	94 81       	ldd	r25, Z+4	; 0x04
    30fe:	a5 81       	ldd	r26, Z+5	; 0x05
    3100:	b6 81       	ldd	r27, Z+6	; 0x06
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	aa 1f       	adc	r26, r26
    3108:	bb 1f       	adc	r27, r27
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	aa 1f       	adc	r26, r26
    3110:	bb 1f       	adc	r27, r27
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	aa 1f       	adc	r26, r26
    3118:	bb 1f       	adc	r27, r27
    311a:	9c 01       	movw	r18, r24
    311c:	ad 01       	movw	r20, r26
    311e:	80 e4       	ldi	r24, 0x40	; 64
    3120:	92 e4       	ldi	r25, 0x42	; 66
    3122:	af e0       	ldi	r26, 0x0F	; 15
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    312e:	da 01       	movw	r26, r20
    3130:	c9 01       	movw	r24, r18
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3138:	e0 e4       	ldi	r30, 0x40	; 64
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	9a 81       	ldd	r25, Y+2	; 0x02
    3140:	89 2f       	mov	r24, r25
    3142:	99 27       	eor	r25, r25
    3144:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3146:	e9 e2       	ldi	r30, 0x29	; 41
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	80 83       	st	Z, r24
}
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	0f 92       	push	r0
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3168:	eb e2       	ldi	r30, 0x2B	; 43
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	88 2f       	mov	r24, r24
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	80 72       	andi	r24, 0x20	; 32
    3174:	90 70       	andi	r25, 0x00	; 0
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	b9 f3       	breq	.-18     	; 0x3168 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    317a:	ec e2       	ldi	r30, 0x2C	; 44
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3182:	0f 90       	pop	r0
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3192:	eb e2       	ldi	r30, 0x2B	; 43
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	88 23       	and	r24, r24
    319a:	dc f7       	brge	.-10     	; 0x3192 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    319c:	ec e2       	ldi	r30, 0x2C	; 44
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z

}
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <UART_sendString+0x6>
    31ae:	0f 92       	push	r0
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	9b 83       	std	Y+3, r25	; 0x03
    31b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31b8:	19 82       	std	Y+1, r1	; 0x01
    31ba:	0e c0       	rjmp	.+28     	; 0x31d8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	28 2f       	mov	r18, r24
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	9b 81       	ldd	r25, Y+3	; 0x03
    31c6:	fc 01       	movw	r30, r24
    31c8:	e2 0f       	add	r30, r18
    31ca:	f3 1f       	adc	r31, r19
    31cc:	80 81       	ld	r24, Z
    31ce:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_sendByte>
		i++;
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	28 2f       	mov	r18, r24
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	9b 81       	ldd	r25, Y+3	; 0x03
    31e2:	fc 01       	movw	r30, r24
    31e4:	e2 0f       	add	r30, r18
    31e6:	f3 1f       	adc	r31, r19
    31e8:	80 81       	ld	r24, Z
    31ea:	88 23       	and	r24, r24
    31ec:	39 f7       	brne	.-50     	; 0x31bc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	df 93       	push	r29
    3200:	cf 93       	push	r28
    3202:	00 d0       	rcall	.+0      	; 0x3204 <UART_receiveString+0xa>
    3204:	0f 92       	push	r0
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	9b 83       	std	Y+3, r25	; 0x03
    320c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    320e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	8a 81       	ldd	r24, Y+2	; 0x02
    3218:	9b 81       	ldd	r25, Y+3	; 0x03
    321a:	8c 01       	movw	r16, r24
    321c:	02 0f       	add	r16, r18
    321e:	13 1f       	adc	r17, r19
    3220:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    3224:	f8 01       	movw	r30, r16
    3226:	80 83       	st	Z, r24
    3228:	0f c0       	rjmp	.+30     	; 0x3248 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	8f 5f       	subi	r24, 0xFF	; 255
    322e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	9b 81       	ldd	r25, Y+3	; 0x03
    323a:	8c 01       	movw	r16, r24
    323c:	02 0f       	add	r16, r18
    323e:	13 1f       	adc	r17, r19
    3240:	0e 94 c5 18 	call	0x318a	; 0x318a <UART_recieveByte>
    3244:	f8 01       	movw	r30, r16
    3246:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	28 2f       	mov	r18, r24
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	9b 81       	ldd	r25, Y+3	; 0x03
    3252:	fc 01       	movw	r30, r24
    3254:	e2 0f       	add	r30, r18
    3256:	f3 1f       	adc	r31, r19
    3258:	80 81       	ld	r24, Z
    325a:	83 32       	cpi	r24, 0x23	; 35
    325c:	31 f7       	brne	.-52     	; 0x322a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	fc 01       	movw	r30, r24
    326a:	e2 0f       	add	r30, r18
    326c:	f3 1f       	adc	r31, r19
    326e:	10 82       	st	Z, r1
}
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	08 95       	ret

00003280 <__udivmodsi4>:
    3280:	a1 e2       	ldi	r26, 0x21	; 33
    3282:	1a 2e       	mov	r1, r26
    3284:	aa 1b       	sub	r26, r26
    3286:	bb 1b       	sub	r27, r27
    3288:	fd 01       	movw	r30, r26
    328a:	0d c0       	rjmp	.+26     	; 0x32a6 <__udivmodsi4_ep>

0000328c <__udivmodsi4_loop>:
    328c:	aa 1f       	adc	r26, r26
    328e:	bb 1f       	adc	r27, r27
    3290:	ee 1f       	adc	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	a2 17       	cp	r26, r18
    3296:	b3 07       	cpc	r27, r19
    3298:	e4 07       	cpc	r30, r20
    329a:	f5 07       	cpc	r31, r21
    329c:	20 f0       	brcs	.+8      	; 0x32a6 <__udivmodsi4_ep>
    329e:	a2 1b       	sub	r26, r18
    32a0:	b3 0b       	sbc	r27, r19
    32a2:	e4 0b       	sbc	r30, r20
    32a4:	f5 0b       	sbc	r31, r21

000032a6 <__udivmodsi4_ep>:
    32a6:	66 1f       	adc	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	88 1f       	adc	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	1a 94       	dec	r1
    32b0:	69 f7       	brne	.-38     	; 0x328c <__udivmodsi4_loop>
    32b2:	60 95       	com	r22
    32b4:	70 95       	com	r23
    32b6:	80 95       	com	r24
    32b8:	90 95       	com	r25
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	bd 01       	movw	r22, r26
    32c0:	cf 01       	movw	r24, r30
    32c2:	08 95       	ret

000032c4 <__prologue_saves__>:
    32c4:	2f 92       	push	r2
    32c6:	3f 92       	push	r3
    32c8:	4f 92       	push	r4
    32ca:	5f 92       	push	r5
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	8f 92       	push	r8
    32d2:	9f 92       	push	r9
    32d4:	af 92       	push	r10
    32d6:	bf 92       	push	r11
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	ca 1b       	sub	r28, r26
    32ee:	db 0b       	sbc	r29, r27
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	09 94       	ijmp

000032fc <__epilogue_restores__>:
    32fc:	2a 88       	ldd	r2, Y+18	; 0x12
    32fe:	39 88       	ldd	r3, Y+17	; 0x11
    3300:	48 88       	ldd	r4, Y+16	; 0x10
    3302:	5f 84       	ldd	r5, Y+15	; 0x0f
    3304:	6e 84       	ldd	r6, Y+14	; 0x0e
    3306:	7d 84       	ldd	r7, Y+13	; 0x0d
    3308:	8c 84       	ldd	r8, Y+12	; 0x0c
    330a:	9b 84       	ldd	r9, Y+11	; 0x0b
    330c:	aa 84       	ldd	r10, Y+10	; 0x0a
    330e:	b9 84       	ldd	r11, Y+9	; 0x09
    3310:	c8 84       	ldd	r12, Y+8	; 0x08
    3312:	df 80       	ldd	r13, Y+7	; 0x07
    3314:	ee 80       	ldd	r14, Y+6	; 0x06
    3316:	fd 80       	ldd	r15, Y+5	; 0x05
    3318:	0c 81       	ldd	r16, Y+4	; 0x04
    331a:	1b 81       	ldd	r17, Y+3	; 0x03
    331c:	aa 81       	ldd	r26, Y+2	; 0x02
    331e:	b9 81       	ldd	r27, Y+1	; 0x01
    3320:	ce 0f       	add	r28, r30
    3322:	d1 1d       	adc	r29, r1
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	ed 01       	movw	r28, r26
    3330:	08 95       	ret

00003332 <itoa>:
    3332:	fb 01       	movw	r30, r22
    3334:	9f 01       	movw	r18, r30
    3336:	e8 94       	clt
    3338:	42 30       	cpi	r20, 0x02	; 2
    333a:	c4 f0       	brlt	.+48     	; 0x336c <itoa+0x3a>
    333c:	45 32       	cpi	r20, 0x25	; 37
    333e:	b4 f4       	brge	.+44     	; 0x336c <itoa+0x3a>
    3340:	4a 30       	cpi	r20, 0x0A	; 10
    3342:	29 f4       	brne	.+10     	; 0x334e <itoa+0x1c>
    3344:	97 fb       	bst	r25, 7
    3346:	1e f4       	brtc	.+6      	; 0x334e <itoa+0x1c>
    3348:	90 95       	com	r25
    334a:	81 95       	neg	r24
    334c:	9f 4f       	sbci	r25, 0xFF	; 255
    334e:	64 2f       	mov	r22, r20
    3350:	77 27       	eor	r23, r23
    3352:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodhi4>
    3356:	80 5d       	subi	r24, 0xD0	; 208
    3358:	8a 33       	cpi	r24, 0x3A	; 58
    335a:	0c f0       	brlt	.+2      	; 0x335e <itoa+0x2c>
    335c:	89 5d       	subi	r24, 0xD9	; 217
    335e:	81 93       	st	Z+, r24
    3360:	cb 01       	movw	r24, r22
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	a1 f7       	brne	.-24     	; 0x334e <itoa+0x1c>
    3366:	16 f4       	brtc	.+4      	; 0x336c <itoa+0x3a>
    3368:	5d e2       	ldi	r21, 0x2D	; 45
    336a:	51 93       	st	Z+, r21
    336c:	10 82       	st	Z, r1
    336e:	c9 01       	movw	r24, r18
    3370:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <strrev>

00003374 <strrev>:
    3374:	dc 01       	movw	r26, r24
    3376:	fc 01       	movw	r30, r24
    3378:	67 2f       	mov	r22, r23
    337a:	71 91       	ld	r23, Z+
    337c:	77 23       	and	r23, r23
    337e:	e1 f7       	brne	.-8      	; 0x3378 <strrev+0x4>
    3380:	32 97       	sbiw	r30, 0x02	; 2
    3382:	04 c0       	rjmp	.+8      	; 0x338c <strrev+0x18>
    3384:	7c 91       	ld	r23, X
    3386:	6d 93       	st	X+, r22
    3388:	70 83       	st	Z, r23
    338a:	62 91       	ld	r22, -Z
    338c:	ae 17       	cp	r26, r30
    338e:	bf 07       	cpc	r27, r31
    3390:	c8 f3       	brcs	.-14     	; 0x3384 <strrev+0x10>
    3392:	08 95       	ret

00003394 <__udivmodhi4>:
    3394:	aa 1b       	sub	r26, r26
    3396:	bb 1b       	sub	r27, r27
    3398:	51 e1       	ldi	r21, 0x11	; 17
    339a:	07 c0       	rjmp	.+14     	; 0x33aa <__udivmodhi4_ep>

0000339c <__udivmodhi4_loop>:
    339c:	aa 1f       	adc	r26, r26
    339e:	bb 1f       	adc	r27, r27
    33a0:	a6 17       	cp	r26, r22
    33a2:	b7 07       	cpc	r27, r23
    33a4:	10 f0       	brcs	.+4      	; 0x33aa <__udivmodhi4_ep>
    33a6:	a6 1b       	sub	r26, r22
    33a8:	b7 0b       	sbc	r27, r23

000033aa <__udivmodhi4_ep>:
    33aa:	88 1f       	adc	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	5a 95       	dec	r21
    33b0:	a9 f7       	brne	.-22     	; 0x339c <__udivmodhi4_loop>
    33b2:	80 95       	com	r24
    33b4:	90 95       	com	r25
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	08 95       	ret

000033bc <_exit>:
    33bc:	f8 94       	cli

000033be <__stop_program>:
    33be:	ff cf       	rjmp	.-2      	; 0x33be <__stop_program>
