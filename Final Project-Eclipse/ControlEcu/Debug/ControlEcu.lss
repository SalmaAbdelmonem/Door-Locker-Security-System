
ControlEcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002438  000024cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007a  0080007a  000024e6  2**0
                  ALLOC
  3 .stab         00002628  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001558  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006318  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__vector_3>
      10:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_8>
      24:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                             Main Function                                   *
 *******************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <main+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7); //setting I-bit by one
     b50:	af e5       	ldi	r26, 0x5F	; 95
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ef e5       	ldi	r30, 0x5F	; 95
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	8c 93       	st	X, r24
	EEPROM_init(); //initialize EEPROM
     b5e:	0e 94 00 09 	call	0x1200	; 0x1200 <EEPROM_init>
	Buzzer_init(); //initialize Buzzer
     b62:	0e 94 88 08 	call	0x1110	; 0x1110 <Buzzer_init>
	DcMotor_Init(); //initialize DC Motor
     b66:	0e 94 b7 08 	call	0x116e	; 0x116e <DcMotor_Init>
	UART_init( &UART_Config ); //initialize UART
     b6a:	88 e6       	ldi	r24, 0x68	; 104
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 ae 10 	call	0x215c	; 0x215c <UART_init>

//	uint8 identityCounter=0;

	while(1)
	{
		switch( Receive_Command() ) //switch to know which command will be executed
     b72:	0e 94 2e 08 	call	0x105c	; 0x105c <Receive_Command>
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	3a 83       	std	Y+2, r19	; 0x02
     b7c:	29 83       	std	Y+1, r18	; 0x01
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	9a 81       	ldd	r25, Y+2	; 0x02
     b82:	8b 34       	cpi	r24, 0x4B	; 75
     b84:	91 05       	cpc	r25, r1
     b86:	e9 f0       	breq	.+58     	; 0xbc2 <main+0x7c>
     b88:	29 81       	ldd	r18, Y+1	; 0x01
     b8a:	3a 81       	ldd	r19, Y+2	; 0x02
     b8c:	2c 34       	cpi	r18, 0x4C	; 76
     b8e:	31 05       	cpc	r19, r1
     b90:	64 f4       	brge	.+24     	; 0xbaa <main+0x64>
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	81 34       	cpi	r24, 0x41	; 65
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <main+0x58>
     b9c:	43 c0       	rjmp	.+134    	; 0xc24 <main+0xde>
     b9e:	29 81       	ldd	r18, Y+1	; 0x01
     ba0:	3a 81       	ldd	r19, Y+2	; 0x02
     ba2:	25 34       	cpi	r18, 0x45	; 69
     ba4:	31 05       	cpc	r19, r1
     ba6:	09 f1       	breq	.+66     	; 0xbea <main+0xa4>
     ba8:	e4 cf       	rjmp	.-56     	; 0xb72 <main+0x2c>
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	82 35       	cpi	r24, 0x52	; 82
     bb0:	91 05       	cpc	r25, r1
     bb2:	01 f1       	breq	.+64     	; 0xbf4 <main+0xae>
     bb4:	29 81       	ldd	r18, Y+1	; 0x01
     bb6:	3a 81       	ldd	r19, Y+2	; 0x02
     bb8:	27 35       	cpi	r18, 0x57	; 87
     bba:	31 05       	cpc	r19, r1
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <main+0x7a>
     bbe:	6d c0       	rjmp	.+218    	; 0xc9a <main+0x154>
     bc0:	d8 cf       	rjmp	.-80     	; 0xb72 <main+0x2c>
//
//					break;

		case CHECK_PASS: //check if the entered password is correct or not

			Receive_Password(g_password);
     bc2:	8e e8       	ldi	r24, 0x8E	; 142
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <Receive_Password>
			Read_Password( g_savedPass );
     bca:	83 e8       	ldi	r24, 0x83	; 131
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 a2 06 	call	0xd44	; 0xd44 <Read_Password>
			Check_Password( g_password, g_savedPass );
     bd2:	8e e8       	ldi	r24, 0x8E	; 142
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	23 e8       	ldi	r18, 0x83	; 131
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	b9 01       	movw	r22, r18
     bdc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Check_Password>
			Send_Command( g_check );
     be0:	80 91 82 00 	lds	r24, 0x0082
     be4:	0e 94 16 08 	call	0x102c	; 0x102c <Send_Command>
     be8:	c4 cf       	rjmp	.-120    	; 0xb72 <main+0x2c>

			break;

		case PASSWORD_ENTERED: //save first entered password in setting new password process in a global array

			Receive_Password( g_pass );
     bea:	88 e8       	ldi	r24, 0x88	; 136
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 e6 07 	call	0xfcc	; 0xfcc <Receive_Password>
     bf2:	bf cf       	rjmp	.-130    	; 0xb72 <main+0x2c>

			break;

		case PASSWORD_RE_ENTERED: //save second password in another global array and compare between them

			Receive_Password( g_rePass );
     bf4:	83 e9       	ldi	r24, 0x93	; 147
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <Receive_Password>

			Check_Password( g_pass, g_rePass );
     bfc:	88 e8       	ldi	r24, 0x88	; 136
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	23 e9       	ldi	r18, 0x93	; 147
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	b9 01       	movw	r22, r18
     c06:	0e 94 64 06 	call	0xcc8	; 0xcc8 <Check_Password>

			if(g_check == MATCHED_PASS)
     c0a:	80 91 82 00 	lds	r24, 0x0082
     c0e:	8d 34       	cpi	r24, 0x4D	; 77
     c10:	21 f4       	brne	.+8      	; 0xc1a <main+0xd4>
			{
				Save_Password( g_pass );
     c12:	88 e8       	ldi	r24, 0x88	; 136
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 43 07 	call	0xe86	; 0xe86 <Save_Password>
			}

			Send_Command( g_check );
     c1a:	80 91 82 00 	lds	r24, 0x0082
     c1e:	0e 94 16 08 	call	0x102c	; 0x102c <Send_Command>
     c22:	a7 cf       	rjmp	.-178    	; 0xb72 <main+0x2c>

			break;

		case OPEN_DOOR: //control the door mmovement

			Timer0_setCallBack( Timer_tickCounterMotor );
     c24:	85 e4       	ldi	r24, 0x45	; 69
     c26:	98 e0       	ldi	r25, 0x08	; 8
     c28:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <Timer0_setCallBack>
			Timer_init( &Timer_Config );
     c2c:	8f e6       	ldi	r24, 0x6F	; 111
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <Timer_init>

			DcMotor_Rotate(CW);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DcMotor_Rotate>
			while( g_tick <= TIMER02_OV_TICKS_15SEC_1024 ){};
     c3a:	80 91 7a 00 	lds	r24, 0x007A
     c3e:	90 91 7b 00 	lds	r25, 0x007B
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	8b 3c       	cpi	r24, 0xCB	; 203
     c46:	93 07       	cpc	r25, r19
     c48:	c0 f3       	brcs	.-16     	; 0xc3a <main+0xf4>

			DcMotor_Rotate(STOP);
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DcMotor_Rotate>
			while( (g_tick <= TIMER02_OV_TICKS_18SEC_1024) && (g_tick > TIMER02_OV_TICKS_15SEC_1024) ){};
     c50:	80 91 7a 00 	lds	r24, 0x007A
     c54:	90 91 7b 00 	lds	r25, 0x007B
     c58:	22 e0       	ldi	r18, 0x02	; 2
     c5a:	87 32       	cpi	r24, 0x27	; 39
     c5c:	92 07       	cpc	r25, r18
     c5e:	40 f4       	brcc	.+16     	; 0xc70 <main+0x12a>
     c60:	80 91 7a 00 	lds	r24, 0x007A
     c64:	90 91 7b 00 	lds	r25, 0x007B
     c68:	31 e0       	ldi	r19, 0x01	; 1
     c6a:	8b 3c       	cpi	r24, 0xCB	; 203
     c6c:	93 07       	cpc	r25, r19
     c6e:	80 f7       	brcc	.-32     	; 0xc50 <main+0x10a>

			DcMotor_Rotate(ACW);
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DcMotor_Rotate>
			while( (g_tick < TIMER02_OV_TICKS_33SEC_1024) && (g_tick > TIMER02_OV_TICKS_18SEC_1024) ){};
     c76:	80 91 7a 00 	lds	r24, 0x007A
     c7a:	90 91 7b 00 	lds	r25, 0x007B
     c7e:	23 e0       	ldi	r18, 0x03	; 3
     c80:	8f 3e       	cpi	r24, 0xEF	; 239
     c82:	92 07       	cpc	r25, r18
     c84:	08 f0       	brcs	.+2      	; 0xc88 <main+0x142>
     c86:	75 cf       	rjmp	.-278    	; 0xb72 <main+0x2c>
     c88:	80 91 7a 00 	lds	r24, 0x007A
     c8c:	90 91 7b 00 	lds	r25, 0x007B
     c90:	32 e0       	ldi	r19, 0x02	; 2
     c92:	87 32       	cpi	r24, 0x27	; 39
     c94:	93 07       	cpc	r25, r19
     c96:	78 f7       	brcc	.-34     	; 0xc76 <main+0x130>
     c98:	6c cf       	rjmp	.-296    	; 0xb72 <main+0x2c>

			break;

		case WRONG_PASS: //enable buzzer in case of 3 times wrong entered

			Timer_init( &Timer_Config );
     c9a:	8f e6       	ldi	r24, 0x6F	; 111
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <Timer_init>
			Timer0_setCallBack( Timer_tickCounterBuzzer );
     ca2:	86 e6       	ldi	r24, 0x66	; 102
     ca4:	98 e0       	ldi	r25, 0x08	; 8
     ca6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <Timer0_setCallBack>

			Buzzer_state(ON);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 a3 08 	call	0x1146	; 0x1146 <Buzzer_state>
			while( g_tick < TIMER02_OV_TICKS_1MIN_1024 ){};
     cb0:	80 91 7a 00 	lds	r24, 0x007A
     cb4:	90 91 7b 00 	lds	r25, 0x007B
     cb8:	27 e0       	ldi	r18, 0x07	; 7
     cba:	87 32       	cpi	r24, 0x27	; 39
     cbc:	92 07       	cpc	r25, r18
     cbe:	c0 f3       	brcs	.-16     	; 0xcb0 <main+0x16a>

			Buzzer_state(OFF);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 a3 08 	call	0x1146	; 0x1146 <Buzzer_state>
     cc6:	55 cf       	rjmp	.-342    	; 0xb72 <main+0x2c>

00000cc8 <Check_Password>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Check_Password( uint8 a_enteredPass1[], uint8 a_enteredPass2[] )
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <Check_Password+0x6>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <Check_Password+0x8>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <Check_Password+0xa>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	7e 83       	std	Y+6, r23	; 0x06
     cdc:	6d 83       	std	Y+5, r22	; 0x05
	uint8 counter = 0;
     cde:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
     ce0:	19 82       	std	Y+1, r1	; 0x01
     ce2:	1a c0       	rjmp	.+52     	; 0xd18 <Check_Password+0x50>
	{
		if( a_enteredPass1[i] == a_enteredPass2[i] )
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	fc 01       	movw	r30, r24
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	40 81       	ld	r20, Z
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	8d 81       	ldd	r24, Y+5	; 0x05
     cfe:	9e 81       	ldd	r25, Y+6	; 0x06
     d00:	fc 01       	movw	r30, r24
     d02:	e2 0f       	add	r30, r18
     d04:	f3 1f       	adc	r31, r19
     d06:	80 81       	ld	r24, Z
     d08:	48 17       	cp	r20, r24
     d0a:	19 f4       	brne	.+6      	; 0xd12 <Check_Password+0x4a>
		{
			counter++;
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	8a 83       	std	Y+2, r24	; 0x02
 ***************************************************************************************************/

void Check_Password( uint8 a_enteredPass1[], uint8 a_enteredPass2[] )
{
	uint8 counter = 0;
	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	18 f3       	brcs	.-58     	; 0xce4 <Check_Password+0x1c>
		if( a_enteredPass1[i] == a_enteredPass2[i] )
		{
			counter++;
		}
	}
	if( counter == PASSWORD_ELEMENTS )
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	85 30       	cpi	r24, 0x05	; 5
     d22:	21 f4       	brne	.+8      	; 0xd2c <Check_Password+0x64>
	{
		g_check = MATCHED_PASS;
     d24:	8d e4       	ldi	r24, 0x4D	; 77
     d26:	80 93 82 00 	sts	0x0082, r24
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <Check_Password+0x6a>
	}
	else
	{
		g_check = UNMATCHED_PASS;
     d2c:	85 e5       	ldi	r24, 0x55	; 85
     d2e:	80 93 82 00 	sts	0x0082, r24
	}
}
     d32:	26 96       	adiw	r28, 0x06	; 6
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <Read_Password>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Read_Password( uint8 a_savedPass[] )
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	61 97       	sbiw	r28, 0x11	; 17
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	99 8b       	std	Y+17, r25	; 0x11
     d5a:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
     d5c:	1f 86       	std	Y+15, r1	; 0x0f
     d5e:	86 c0       	rjmp	.+268    	; 0xe6c <Read_Password+0x128>
	{
		EEPROM_readByte( 0x0311+i, &a_savedPass[i] );
     d60:	8f 85       	ldd	r24, Y+15	; 0x0f
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8f 5e       	subi	r24, 0xEF	; 239
     d68:	9c 4f       	sbci	r25, 0xFC	; 252
     d6a:	ac 01       	movw	r20, r24
     d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	88 89       	ldd	r24, Y+16	; 0x10
     d74:	99 89       	ldd	r25, Y+17	; 0x11
     d76:	28 0f       	add	r18, r24
     d78:	39 1f       	adc	r19, r25
     d7a:	ca 01       	movw	r24, r20
     d7c:	b9 01       	movw	r22, r18
     d7e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <EEPROM_readByte>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a8 ec       	ldi	r26, 0xC8	; 200
     d88:	b2 e4       	ldi	r27, 0x42	; 66
     d8a:	8b 87       	std	Y+11, r24	; 0x0b
     d8c:	9c 87       	std	Y+12, r25	; 0x0c
     d8e:	ad 87       	std	Y+13, r26	; 0x0d
     d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4a e7       	ldi	r20, 0x7A	; 122
     da0:	53 e4       	ldi	r21, 0x43	; 67
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	8f 83       	std	Y+7, r24	; 0x07
     dac:	98 87       	std	Y+8, r25	; 0x08
     dae:	a9 87       	std	Y+9, r26	; 0x09
     db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db2:	6f 81       	ldd	r22, Y+7	; 0x07
     db4:	78 85       	ldd	r23, Y+8	; 0x08
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e8       	ldi	r20, 0x80	; 128
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc6:	88 23       	and	r24, r24
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <Read_Password+0x90>
		__ticks = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9e 83       	std	Y+6, r25	; 0x06
     dd0:	8d 83       	std	Y+5, r24	; 0x05
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <Read_Password+0x10e>
	else if (__tmp > 65535)
     dd4:	6f 81       	ldd	r22, Y+7	; 0x07
     dd6:	78 85       	ldd	r23, Y+8	; 0x08
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
     dda:	9a 85       	ldd	r25, Y+10	; 0x0a
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	3f ef       	ldi	r19, 0xFF	; 255
     de0:	4f e7       	ldi	r20, 0x7F	; 127
     de2:	57 e4       	ldi	r21, 0x47	; 71
     de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de8:	18 16       	cp	r1, r24
     dea:	4c f5       	brge	.+82     	; 0xe3e <Read_Password+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dec:	6b 85       	ldd	r22, Y+11	; 0x0b
     dee:	7c 85       	ldd	r23, Y+12	; 0x0c
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	9e 85       	ldd	r25, Y+14	; 0x0e
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e2       	ldi	r20, 0x20	; 32
     dfa:	51 e4       	ldi	r21, 0x41	; 65
     dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	0f c0       	rjmp	.+30     	; 0xe34 <Read_Password+0xf0>
     e16:	89 e1       	ldi	r24, 0x19	; 25
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <Read_Password+0xde>
     e26:	9c 83       	std	Y+4, r25	; 0x04
     e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	8d 81       	ldd	r24, Y+5	; 0x05
     e2c:	9e 81       	ldd	r25, Y+6	; 0x06
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	69 f7       	brne	.-38     	; 0xe16 <Read_Password+0xd2>
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <Read_Password+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3e:	6f 81       	ldd	r22, Y+7	; 0x07
     e40:	78 85       	ldd	r23, Y+8	; 0x08
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	9a 85       	ldd	r25, Y+10	; 0x0a
     e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <Read_Password+0x11a>
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
 * [Returns]:         void
 ***************************************************************************************************/

void Read_Password( uint8 a_savedPass[] )
{
	for(uint8 i = 0; i < PASSWORD_ELEMENTS; i++)
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	8f 87       	std	Y+15, r24	; 0x0f
     e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6e:	85 30       	cpi	r24, 0x05	; 5
     e70:	08 f4       	brcc	.+2      	; 0xe74 <Read_Password+0x130>
     e72:	76 cf       	rjmp	.-276    	; 0xd60 <Read_Password+0x1c>
	{
		EEPROM_readByte( 0x0311+i, &a_savedPass[i] );
		_delay_ms(100);
	}
}
     e74:	61 96       	adiw	r28, 0x11	; 17
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <Save_Password>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Save_Password(uint8 a_addPass[])
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	61 97       	sbiw	r28, 0x11	; 17
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	99 8b       	std	Y+17, r25	; 0x11
     e9c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i = 0; i < PASSWORD_ELEMENTS; i++)
     e9e:	1f 86       	std	Y+15, r1	; 0x0f
     ea0:	88 c0       	rjmp	.+272    	; 0xfb2 <Save_Password+0x12c>
	{
		EEPROM_writeByte( 0x0311+i, a_addPass[i] );
     ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	8f 5e       	subi	r24, 0xEF	; 239
     eaa:	9c 4f       	sbci	r25, 0xFC	; 252
     eac:	ac 01       	movw	r20, r24
     eae:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	88 89       	ldd	r24, Y+16	; 0x10
     eb6:	99 89       	ldd	r25, Y+17	; 0x11
     eb8:	fc 01       	movw	r30, r24
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	20 81       	ld	r18, Z
     ec0:	ca 01       	movw	r24, r20
     ec2:	62 2f       	mov	r22, r18
     ec4:	0e 94 37 09 	call	0x126e	; 0x126e <EEPROM_writeByte>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a8 ec       	ldi	r26, 0xC8	; 200
     ece:	b2 e4       	ldi	r27, 0x42	; 66
     ed0:	8b 87       	std	Y+11, r24	; 0x0b
     ed2:	9c 87       	std	Y+12, r25	; 0x0c
     ed4:	ad 87       	std	Y+13, r26	; 0x0d
     ed6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eda:	7c 85       	ldd	r23, Y+12	; 0x0c
     edc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ede:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	4a e7       	ldi	r20, 0x7A	; 122
     ee6:	53 e4       	ldi	r21, 0x43	; 67
     ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	8f 83       	std	Y+7, r24	; 0x07
     ef2:	98 87       	std	Y+8, r25	; 0x08
     ef4:	a9 87       	std	Y+9, r26	; 0x09
     ef6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e8       	ldi	r20, 0x80	; 128
     f06:	5f e3       	ldi	r21, 0x3F	; 63
     f08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f0c:	88 23       	and	r24, r24
     f0e:	2c f4       	brge	.+10     	; 0xf1a <Save_Password+0x94>
		__ticks = 1;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
     f18:	3f c0       	rjmp	.+126    	; 0xf98 <Save_Password+0x112>
	else if (__tmp > 65535)
     f1a:	6f 81       	ldd	r22, Y+7	; 0x07
     f1c:	78 85       	ldd	r23, Y+8	; 0x08
     f1e:	89 85       	ldd	r24, Y+9	; 0x09
     f20:	9a 85       	ldd	r25, Y+10	; 0x0a
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	57 e4       	ldi	r21, 0x47	; 71
     f2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f2e:	18 16       	cp	r1, r24
     f30:	4c f5       	brge	.+82     	; 0xf84 <Save_Password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f32:	6b 85       	ldd	r22, Y+11	; 0x0b
     f34:	7c 85       	ldd	r23, Y+12	; 0x0c
     f36:	8d 85       	ldd	r24, Y+13	; 0x0d
     f38:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e2       	ldi	r20, 0x20	; 32
     f40:	51 e4       	ldi	r21, 0x41	; 65
     f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	0f c0       	rjmp	.+30     	; 0xf7a <Save_Password+0xf4>
     f5c:	89 e1       	ldi	r24, 0x19	; 25
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	8b 83       	std	Y+3, r24	; 0x03
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <Save_Password+0xe2>
     f6c:	9c 83       	std	Y+4, r25	; 0x04
     f6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	69 f7       	brne	.-38     	; 0xf5c <Save_Password+0xd6>
     f82:	14 c0       	rjmp	.+40     	; 0xfac <Save_Password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f84:	6f 81       	ldd	r22, Y+7	; 0x07
     f86:	78 85       	ldd	r23, Y+8	; 0x08
     f88:	89 85       	ldd	r24, Y+9	; 0x09
     f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <Save_Password+0x11e>
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01
 ***************************************************************************************************/

void Save_Password(uint8 a_addPass[])
{
	uint8 i;
	for(i = 0; i < PASSWORD_ELEMENTS; i++)
     fac:	8f 85       	ldd	r24, Y+15	; 0x0f
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	8f 87       	std	Y+15, r24	; 0x0f
     fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb4:	85 30       	cpi	r24, 0x05	; 5
     fb6:	08 f4       	brcc	.+2      	; 0xfba <Save_Password+0x134>
     fb8:	74 cf       	rjmp	.-280    	; 0xea2 <Save_Password+0x1c>
	{
		EEPROM_writeByte( 0x0311+i, a_addPass[i] );
		_delay_ms(100);
	}
}
     fba:	61 96       	adiw	r28, 0x11	; 17
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <Receive_Password>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Receive_Password( uint8 a_enteredPass[] )
{
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <Receive_Password+0xa>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	8a 83       	std	Y+2, r24	; 0x02
	while(UART_recieveByte() != READY){};
     fe0:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
     fe4:	89 35       	cpi	r24, 0x59	; 89
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <Receive_Password+0x14>
	UART_sendByte(READY);
     fe8:	89 e5       	ldi	r24, 0x59	; 89
     fea:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_sendByte>

	uint8 i;
	for(i = 0 ; i < PASSWORD_ELEMENTS; i++)
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <Receive_Password+0x44>
	{
		a_enteredPass[i] = UART_recieveByte();
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	8c 01       	movw	r16, r24
     ffe:	02 0f       	add	r16, r18
    1000:	13 1f       	adc	r17, r19
    1002:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
    1006:	f8 01       	movw	r30, r16
    1008:	80 83       	st	Z, r24
{
	while(UART_recieveByte() != READY){};
	UART_sendByte(READY);

	uint8 i;
	for(i = 0 ; i < PASSWORD_ELEMENTS; i++)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	70 f3       	brcs	.-36     	; 0xff2 <Receive_Password+0x26>
	{
		a_enteredPass[i] = UART_recieveByte();
	}
	UART_sendByte(DONE);
    1016:	84 e4       	ldi	r24, 0x44	; 68
    1018:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_sendByte>
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <Send_Command>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Send_Command( uint8 command )
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(READY);
    1038:	89 e5       	ldi	r24, 0x59	; 89
    103a:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_sendByte>
	while(UART_recieveByte() != READY){};
    103e:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
    1042:	89 35       	cpi	r24, 0x59	; 89
    1044:	e1 f7       	brne	.-8      	; 0x103e <Send_Command+0x12>
	UART_sendByte(command);
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_sendByte>
	while(UART_recieveByte() != DONE){};
    104c:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
    1050:	84 34       	cpi	r24, 0x44	; 68
    1052:	e1 f7       	brne	.-8      	; 0x104c <Send_Command+0x20>
}
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <Receive_Command>:
 *
 * [Returns]:         Command to tell or check on smth.
 ***************************************************************************************************/

uint8 Receive_Command(void)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte() != READY){};
    1064:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
    1068:	89 35       	cpi	r24, 0x59	; 89
    106a:	e1 f7       	brne	.-8      	; 0x1064 <Receive_Command+0x8>
	UART_sendByte(READY);
    106c:	89 e5       	ldi	r24, 0x59	; 89
    106e:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_sendByte>
	command=UART_recieveByte();
    1072:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
    1076:	80 93 8d 00 	sts	0x008D, r24
	UART_sendByte(DONE);
    107a:	84 e4       	ldi	r24, 0x44	; 68
    107c:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_sendByte>
	return command;
    1080:	80 91 8d 00 	lds	r24, 0x008D
}
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <Timer_tickCounterMotor>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Timer_tickCounterMotor(void)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1092:	80 91 7a 00 	lds	r24, 0x007A
    1096:	90 91 7b 00 	lds	r25, 0x007B
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	90 93 7b 00 	sts	0x007B, r25
    10a0:	80 93 7a 00 	sts	0x007A, r24
	if( g_tick == TIMER02_OV_TICKS_33SEC_1024 )
    10a4:	80 91 7a 00 	lds	r24, 0x007A
    10a8:	90 91 7b 00 	lds	r25, 0x007B
    10ac:	23 e0       	ldi	r18, 0x03	; 3
    10ae:	8f 3e       	cpi	r24, 0xEF	; 239
    10b0:	92 07       	cpc	r25, r18
    10b2:	49 f4       	brne	.+18     	; 0x10c6 <Timer_tickCounterMotor+0x3c>
	{
		Timer_deInit(TIMER0);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Timer_deInit>
		DcMotor_deInit();
    10ba:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DcMotor_deInit>
		g_tick=0;
    10be:	10 92 7b 00 	sts	0x007B, r1
    10c2:	10 92 7a 00 	sts	0x007A, r1
	}
}
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <Timer_tickCounterBuzzer>:
 *
 * [Returns]:         void
 ***************************************************************************************************/

void Timer_tickCounterBuzzer(void)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    10d4:	80 91 7a 00 	lds	r24, 0x007A
    10d8:	90 91 7b 00 	lds	r25, 0x007B
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	90 93 7b 00 	sts	0x007B, r25
    10e2:	80 93 7a 00 	sts	0x007A, r24
	if( g_tick == TIMER02_OV_TICKS_1MIN_1024 )
    10e6:	80 91 7a 00 	lds	r24, 0x007A
    10ea:	90 91 7b 00 	lds	r25, 0x007B
    10ee:	27 e0       	ldi	r18, 0x07	; 7
    10f0:	87 32       	cpi	r24, 0x27	; 39
    10f2:	92 07       	cpc	r25, r18
    10f4:	51 f4       	brne	.+20     	; 0x110a <Timer_tickCounterBuzzer+0x3e>
	{
		Timer_deInit(TIMER0);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Timer_deInit>
		Buzzer_state(OFF);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	0e 94 a3 08 	call	0x1146	; 0x1146 <Buzzer_state>
		g_tick=0;
    1102:	10 92 7b 00 	sts	0x007B, r1
    1106:	10 92 7a 00 	sts	0x007A, r1

	}
}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <Buzzer_init>:
/*******************************************************************************
 *                             Functions Definitions                           *
 *******************************************************************************/

void Buzzer_init(void)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction of 1 pin as output pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	66 e0       	ldi	r22, 0x06	; 6
    111c:	41 e0       	ldi	r20, 0x01	; 1
    111e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BUZZER_PORT_ID, LED_PIN_ID, PIN_OUTPUT);
    1122:	82 e0       	ldi	r24, 0x02	; 2
    1124:	67 e0       	ldi	r22, 0x07	; 7
    1126:	41 e0       	ldi	r20, 0x01	; 1
    1128:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_setupPinDirection>

	/* Initialize buzzer to stop mode */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	66 e0       	ldi	r22, 0x06	; 6
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
	GPIO_writePin(BUZZER_PORT_ID, LED_PIN_ID, LOGIC_LOW);
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	67 e0       	ldi	r22, 0x07	; 7
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <Buzzer_state>:

void Buzzer_state(Buzzer_State state)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	89 83       	std	Y+1, r24	; 0x01
	/* insert state of buzzer in the two first pins of PORT*/
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, state);
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	66 e0       	ldi	r22, 0x06	; 6
    1156:	49 81       	ldd	r20, Y+1	; 0x01
    1158:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
	GPIO_writePin(BUZZER_PORT_ID, LED_PIN_ID, state);
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	67 e0       	ldi	r22, 0x07	; 7
    1160:	49 81       	ldd	r20, Y+1	; 0x01
    1162:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
}
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <DcMotor_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DcMotor_Init(void)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for 2 pins of motor as output pins */
	GPIO_setupPinDirection(PORT_ID, PIN_IN1_ID, PIN_OUTPUT);
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_ID, PIN_IN2_ID, PIN_OUTPUT);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_ID, PIN_EN_ID, PIN_OUTPUT);
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_setupPinDirection>

	/* Initialize motor to stop mode */
	GPIO_writePin(PORT_ID, PIN_IN1_ID, LOGIC_LOW);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
	GPIO_writePin(PORT_ID, PIN_IN2_ID, LOGIC_LOW);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
}
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	0f 92       	push	r0
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
	/* insert state of motor in the two first pins of PORT B*/
	GPIO_writePort(PORT_ID, state);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	69 81       	ldd	r22, Y+1	; 0x01
    11be:	0e 94 8d 0c 	call	0x191a	; 0x191a <GPIO_writePort>

	/*set speed of motor by using PWM of Timer 0*/
	GPIO_writePin(PORT_ID, PIN_EN_ID, LOGIC_HIGH);
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	62 e0       	ldi	r22, 0x02	; 2
    11c6:	41 e0       	ldi	r20, 0x01	; 1
    11c8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
}
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <DcMotor_deInit>:
void DcMotor_deInit(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	/* Disable Dc-Motor */
	GPIO_writePin(PORT_ID, PIN_IN1_ID, LOGIC_LOW);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
	GPIO_writePin(PORT_ID, PIN_IN2_ID, LOGIC_LOW);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
	GPIO_writePin(PORT_ID, PIN_EN_ID, LOGIC_LOW);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_writePin>
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <EEPROM_init>:
/*******************************************************************************
 *                             Functions Definitions                           *
 *******************************************************************************/

void EEPROM_init(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	28 97       	sbiw	r28, 0x08	; 8
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
	/* initialize the I2C(TWI) module inside the MC */
	I2c_ConfigType I2c_Config ={FAST_MODE,ONE,0b00000010};
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	9d 83       	std	Y+5, r25	; 0x05
    121a:	8c 83       	std	Y+4, r24	; 0x04
    121c:	e7 e7       	ldi	r30, 0x77	; 119
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	ff 83       	std	Y+7, r31	; 0x07
    1222:	ee 83       	std	Y+6, r30	; 0x06
    1224:	f3 e0       	ldi	r31, 0x03	; 3
    1226:	f8 87       	std	Y+8, r31	; 0x08
    1228:	ee 81       	ldd	r30, Y+6	; 0x06
    122a:	ff 81       	ldd	r31, Y+7	; 0x07
    122c:	00 80       	ld	r0, Z
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	9f 81       	ldd	r25, Y+7	; 0x07
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	9f 83       	std	Y+7, r25	; 0x07
    1236:	8e 83       	std	Y+6, r24	; 0x06
    1238:	ec 81       	ldd	r30, Y+4	; 0x04
    123a:	fd 81       	ldd	r31, Y+5	; 0x05
    123c:	00 82       	st	Z, r0
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	9d 83       	std	Y+5, r25	; 0x05
    1246:	8c 83       	std	Y+4, r24	; 0x04
    1248:	98 85       	ldd	r25, Y+8	; 0x08
    124a:	91 50       	subi	r25, 0x01	; 1
    124c:	98 87       	std	Y+8, r25	; 0x08
    124e:	e8 85       	ldd	r30, Y+8	; 0x08
    1250:	ee 23       	and	r30, r30
    1252:	51 f7       	brne	.-44     	; 0x1228 <EEPROM_init+0x28>
	TWI_init(&I2c_Config);
    1254:	ce 01       	movw	r24, r28
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_init>

}
    125c:	28 96       	adiw	r28, 0x08	; 8
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <EEPROM_writeByte+0x6>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <EEPROM_writeByte+0x8>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1280:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1284:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    1288:	88 30       	cpi	r24, 0x08	; 8
    128a:	11 f0       	breq	.+4      	; 0x1290 <EEPROM_writeByte+0x22>
        return ERROR;
    128c:	1c 82       	std	Y+4, r1	; 0x04
    128e:	28 c0       	rjmp	.+80     	; 0x12e0 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	80 70       	andi	r24, 0x00	; 0
    1296:	97 70       	andi	r25, 0x07	; 7
    1298:	88 0f       	add	r24, r24
    129a:	89 2f       	mov	r24, r25
    129c:	88 1f       	adc	r24, r24
    129e:	99 0b       	sbc	r25, r25
    12a0:	91 95       	neg	r25
    12a2:	80 6a       	ori	r24, 0xA0	; 160
    12a4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12a8:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    12ac:	88 31       	cpi	r24, 0x18	; 24
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <EEPROM_writeByte+0x46>
        return ERROR;
    12b0:	1c 82       	std	Y+4, r1	; 0x04
    12b2:	16 c0       	rjmp	.+44     	; 0x12e0 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12ba:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    12be:	88 32       	cpi	r24, 0x28	; 40
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <EEPROM_writeByte+0x58>
        return ERROR;
    12c2:	1c 82       	std	Y+4, r1	; 0x04
    12c4:	0d c0       	rjmp	.+26     	; 0x12e0 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12cc:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    12d0:	88 32       	cpi	r24, 0x28	; 40
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <EEPROM_writeByte+0x6a>
        return ERROR;
    12d4:	1c 82       	std	Y+4, r1	; 0x04
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    12d8:	0e 94 57 10 	call	0x20ae	; 0x20ae <TWI_stop>

    return SUCCESS;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	8c 83       	std	Y+4, r24	; 0x04
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <EEPROM_readByte+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <EEPROM_readByte+0x8>
    12f8:	0f 92       	push	r0
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	7c 83       	std	Y+4, r23	; 0x04
    1304:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1306:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    130a:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    130e:	88 30       	cpi	r24, 0x08	; 8
    1310:	11 f0       	breq	.+4      	; 0x1316 <EEPROM_readByte+0x26>
        return ERROR;
    1312:	1d 82       	std	Y+5, r1	; 0x05
    1314:	44 c0       	rjmp	.+136    	; 0x139e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	80 70       	andi	r24, 0x00	; 0
    131c:	97 70       	andi	r25, 0x07	; 7
    131e:	88 0f       	add	r24, r24
    1320:	89 2f       	mov	r24, r25
    1322:	88 1f       	adc	r24, r24
    1324:	99 0b       	sbc	r25, r25
    1326:	91 95       	neg	r25
    1328:	80 6a       	ori	r24, 0xA0	; 160
    132a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    132e:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    1332:	88 31       	cpi	r24, 0x18	; 24
    1334:	11 f0       	breq	.+4      	; 0x133a <EEPROM_readByte+0x4a>
        return ERROR;
    1336:	1d 82       	std	Y+5, r1	; 0x05
    1338:	32 c0       	rjmp	.+100    	; 0x139e <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1340:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    1344:	88 32       	cpi	r24, 0x28	; 40
    1346:	11 f0       	breq	.+4      	; 0x134c <EEPROM_readByte+0x5c>
        return ERROR;
    1348:	1d 82       	std	Y+5, r1	; 0x05
    134a:	29 c0       	rjmp	.+82     	; 0x139e <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    134c:	0e 94 47 10 	call	0x208e	; 0x208e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1350:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    1354:	80 31       	cpi	r24, 0x10	; 16
    1356:	11 f0       	breq	.+4      	; 0x135c <EEPROM_readByte+0x6c>
        return ERROR;
    1358:	1d 82       	std	Y+5, r1	; 0x05
    135a:	21 c0       	rjmp	.+66     	; 0x139e <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	9a 81       	ldd	r25, Y+2	; 0x02
    1360:	80 70       	andi	r24, 0x00	; 0
    1362:	97 70       	andi	r25, 0x07	; 7
    1364:	88 0f       	add	r24, r24
    1366:	89 2f       	mov	r24, r25
    1368:	88 1f       	adc	r24, r24
    136a:	99 0b       	sbc	r25, r25
    136c:	91 95       	neg	r25
    136e:	81 6a       	ori	r24, 0xA1	; 161
    1370:	0e 94 62 10 	call	0x20c4	; 0x20c4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1374:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    1378:	80 34       	cpi	r24, 0x40	; 64
    137a:	11 f0       	breq	.+4      	; 0x1380 <EEPROM_readByte+0x90>
        return ERROR;
    137c:	1d 82       	std	Y+5, r1	; 0x05
    137e:	0f c0       	rjmp	.+30     	; 0x139e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1380:	0e 94 8c 10 	call	0x2118	; 0x2118 <TWI_readByteWithNACK>
    1384:	eb 81       	ldd	r30, Y+3	; 0x03
    1386:	fc 81       	ldd	r31, Y+4	; 0x04
    1388:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    138a:	0e 94 9f 10 	call	0x213e	; 0x213e <TWI_getStatus>
    138e:	88 35       	cpi	r24, 0x58	; 88
    1390:	11 f0       	breq	.+4      	; 0x1396 <EEPROM_readByte+0xa6>
        return ERROR;
    1392:	1d 82       	std	Y+5, r1	; 0x05
    1394:	04 c0       	rjmp	.+8      	; 0x139e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1396:	0e 94 57 10 	call	0x20ae	; 0x20ae <TWI_stop>

    return SUCCESS;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <GPIO_setupPinDirection+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_setupPinDirection+0x8>
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	6a 83       	std	Y+2, r22	; 0x02
    13c2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	88 30       	cpi	r24, 0x08	; 8
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <GPIO_setupPinDirection+0x1c>
    13ca:	d5 c0       	rjmp	.+426    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <GPIO_setupPinDirection+0x24>
    13d2:	d1 c0       	rjmp	.+418    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3d 83       	std	Y+5, r19	; 0x05
    13dc:	2c 83       	std	Y+4, r18	; 0x04
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <GPIO_setupPinDirection+0x3a>
    13e8:	43 c0       	rjmp	.+134    	; 0x1470 <GPIO_setupPinDirection+0xc0>
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	3d 81       	ldd	r19, Y+5	; 0x05
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <GPIO_setupPinDirection+0x4e>
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	71 f0       	breq	.+28     	; 0x1418 <GPIO_setupPinDirection+0x68>
    13fc:	bc c0       	rjmp	.+376    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	3d 81       	ldd	r19, Y+5	; 0x05
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <GPIO_setupPinDirection+0x5a>
    1408:	5f c0       	rjmp	.+190    	; 0x14c8 <GPIO_setupPinDirection+0x118>
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	91 05       	cpc	r25, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <GPIO_setupPinDirection+0x66>
    1414:	85 c0       	rjmp	.+266    	; 0x1520 <GPIO_setupPinDirection+0x170>
    1416:	af c0       	rjmp	.+350    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	a1 f4       	brne	.+40     	; 0x1446 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    141e:	aa e3       	ldi	r26, 0x3A	; 58
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ea e3       	ldi	r30, 0x3A	; 58
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_setupPinDirection+0x8c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_setupPinDirection+0x88>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	98 c0       	rjmp	.+304    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1446:	aa e3       	ldi	r26, 0x3A	; 58
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ea e3       	ldi	r30, 0x3A	; 58
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_setupPinDirection+0xb4>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_setupPinDirection+0xb0>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	83 c0       	rjmp	.+262    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	a1 f4       	brne	.+40     	; 0x149e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1476:	a7 e3       	ldi	r26, 0x37	; 55
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_setupPinDirection+0xe4>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_setupPinDirection+0xe0>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	6c c0       	rjmp	.+216    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    149e:	a7 e3       	ldi	r26, 0x37	; 55
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e7 e3       	ldi	r30, 0x37	; 55
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <GPIO_setupPinDirection+0x10c>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <GPIO_setupPinDirection+0x108>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	57 c0       	rjmp	.+174    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	a1 f4       	brne	.+40     	; 0x14f6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14ce:	a4 e3       	ldi	r26, 0x34	; 52
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e4 e3       	ldi	r30, 0x34	; 52
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_setupPinDirection+0x13c>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_setupPinDirection+0x138>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	40 c0       	rjmp	.+128    	; 0x1576 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14f6:	a4 e3       	ldi	r26, 0x34	; 52
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <GPIO_setupPinDirection+0x164>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <GPIO_setupPinDirection+0x160>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	2b c0       	rjmp	.+86     	; 0x1576 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	a1 f4       	brne	.+40     	; 0x154e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1526:	a1 e3       	ldi	r26, 0x31	; 49
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e1 e3       	ldi	r30, 0x31	; 49
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_setupPinDirection+0x194>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_setupPinDirection+0x190>
    1548:	84 2b       	or	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    154e:	a1 e3       	ldi	r26, 0x31	; 49
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e1 e3       	ldi	r30, 0x31	; 49
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_setupPinDirection+0x1bc>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_setupPinDirection+0x1b8>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <GPIO_writePin+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <GPIO_writePin+0x8>
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6a 83       	std	Y+2, r22	; 0x02
    1598:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <GPIO_writePin+0x1c>
    15a0:	d5 c0       	rjmp	.+426    	; 0x174c <GPIO_writePin+0x1c6>
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <GPIO_writePin+0x24>
    15a8:	d1 c0       	rjmp	.+418    	; 0x174c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3d 83       	std	Y+5, r19	; 0x05
    15b2:	2c 83       	std	Y+4, r18	; 0x04
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	9d 81       	ldd	r25, Y+5	; 0x05
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <GPIO_writePin+0x3a>
    15be:	43 c0       	rjmp	.+134    	; 0x1646 <GPIO_writePin+0xc0>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <GPIO_writePin+0x4e>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	71 f0       	breq	.+28     	; 0x15ee <GPIO_writePin+0x68>
    15d2:	bc c0       	rjmp	.+376    	; 0x174c <GPIO_writePin+0x1c6>
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	3d 81       	ldd	r19, Y+5	; 0x05
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <GPIO_writePin+0x5a>
    15de:	5f c0       	rjmp	.+190    	; 0x169e <GPIO_writePin+0x118>
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	09 f4       	brne	.+2      	; 0x15ec <GPIO_writePin+0x66>
    15ea:	85 c0       	rjmp	.+266    	; 0x16f6 <GPIO_writePin+0x170>
    15ec:	af c0       	rjmp	.+350    	; 0x174c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	a1 f4       	brne	.+40     	; 0x161c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15f4:	ab e3       	ldi	r26, 0x3B	; 59
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	eb e3       	ldi	r30, 0x3B	; 59
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_writePin+0x8c>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_writePin+0x88>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	98 c0       	rjmp	.+304    	; 0x174c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    161c:	ab e3       	ldi	r26, 0x3B	; 59
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	eb e3       	ldi	r30, 0x3B	; 59
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_writePin+0xb4>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_writePin+0xb0>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	83 c0       	rjmp	.+262    	; 0x174c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	a1 f4       	brne	.+40     	; 0x1674 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    164c:	a8 e3       	ldi	r26, 0x38	; 56
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e8 e3       	ldi	r30, 0x38	; 56
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_writePin+0xe4>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_writePin+0xe0>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	6c c0       	rjmp	.+216    	; 0x174c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1674:	a8 e3       	ldi	r26, 0x38	; 56
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e8 e3       	ldi	r30, 0x38	; 56
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <GPIO_writePin+0x10c>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <GPIO_writePin+0x108>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	57 c0       	rjmp	.+174    	; 0x174c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16a4:	a5 e3       	ldi	r26, 0x35	; 53
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e3       	ldi	r30, 0x35	; 53
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_writePin+0x13c>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_writePin+0x138>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	40 c0       	rjmp	.+128    	; 0x174c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16cc:	a5 e3       	ldi	r26, 0x35	; 53
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e5 e3       	ldi	r30, 0x35	; 53
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_writePin+0x164>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_writePin+0x160>
    16ee:	80 95       	com	r24
    16f0:	84 23       	and	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	2b c0       	rjmp	.+86     	; 0x174c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	a1 f4       	brne	.+40     	; 0x1724 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16fc:	a2 e3       	ldi	r26, 0x32	; 50
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e2 e3       	ldi	r30, 0x32	; 50
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_writePin+0x194>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_writePin+0x190>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	14 c0       	rjmp	.+40     	; 0x174c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1724:	a2 e3       	ldi	r26, 0x32	; 50
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e2 e3       	ldi	r30, 0x32	; 50
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_writePin+0x1bc>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_writePin+0x1b8>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_readPin+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_readPin+0x8>
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    176e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	08 f0       	brcs	.+2      	; 0x1778 <GPIO_readPin+0x1c>
    1776:	84 c0       	rjmp	.+264    	; 0x1880 <GPIO_readPin+0x124>
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	84 30       	cpi	r24, 0x04	; 4
    177c:	08 f0       	brcs	.+2      	; 0x1780 <GPIO_readPin+0x24>
    177e:	80 c0       	rjmp	.+256    	; 0x1880 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3d 83       	std	Y+5, r19	; 0x05
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	4c 81       	ldd	r20, Y+4	; 0x04
    178c:	5d 81       	ldd	r21, Y+5	; 0x05
    178e:	41 30       	cpi	r20, 0x01	; 1
    1790:	51 05       	cpc	r21, r1
    1792:	79 f1       	breq	.+94     	; 0x17f2 <GPIO_readPin+0x96>
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	91 05       	cpc	r25, r1
    179c:	34 f4       	brge	.+12     	; 0x17aa <GPIO_readPin+0x4e>
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	21 15       	cp	r18, r1
    17a4:	31 05       	cpc	r19, r1
    17a6:	69 f0       	breq	.+26     	; 0x17c2 <GPIO_readPin+0x66>
    17a8:	6b c0       	rjmp	.+214    	; 0x1880 <GPIO_readPin+0x124>
    17aa:	4c 81       	ldd	r20, Y+4	; 0x04
    17ac:	5d 81       	ldd	r21, Y+5	; 0x05
    17ae:	42 30       	cpi	r20, 0x02	; 2
    17b0:	51 05       	cpc	r21, r1
    17b2:	b9 f1       	breq	.+110    	; 0x1822 <GPIO_readPin+0xc6>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <GPIO_readPin+0x64>
    17be:	49 c0       	rjmp	.+146    	; 0x1852 <GPIO_readPin+0xf6>
    17c0:	5f c0       	rjmp	.+190    	; 0x1880 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17c2:	e9 e3       	ldi	r30, 0x39	; 57
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a9 01       	movw	r20, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_readPin+0x7e>
    17d6:	55 95       	asr	r21
    17d8:	47 95       	ror	r20
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <GPIO_readPin+0x7a>
    17de:	ca 01       	movw	r24, r20
    17e0:	81 70       	andi	r24, 0x01	; 1
    17e2:	90 70       	andi	r25, 0x00	; 0
    17e4:	88 23       	and	r24, r24
    17e6:	19 f0       	breq	.+6      	; 0x17ee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	49 c0       	rjmp	.+146    	; 0x1880 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17ee:	19 82       	std	Y+1, r1	; 0x01
    17f0:	47 c0       	rjmp	.+142    	; 0x1880 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17f2:	e6 e3       	ldi	r30, 0x36	; 54
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_readPin+0xae>
    1806:	55 95       	asr	r21
    1808:	47 95       	ror	r20
    180a:	8a 95       	dec	r24
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_readPin+0xaa>
    180e:	ca 01       	movw	r24, r20
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	88 23       	and	r24, r24
    1816:	19 f0       	breq	.+6      	; 0x181e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	31 c0       	rjmp	.+98     	; 0x1880 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    181e:	19 82       	std	Y+1, r1	; 0x01
    1820:	2f c0       	rjmp	.+94     	; 0x1880 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1822:	e3 e3       	ldi	r30, 0x33	; 51
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_readPin+0xde>
    1836:	55 95       	asr	r21
    1838:	47 95       	ror	r20
    183a:	8a 95       	dec	r24
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_readPin+0xda>
    183e:	ca 01       	movw	r24, r20
    1840:	81 70       	andi	r24, 0x01	; 1
    1842:	90 70       	andi	r25, 0x00	; 0
    1844:	88 23       	and	r24, r24
    1846:	19 f0       	breq	.+6      	; 0x184e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	19 c0       	rjmp	.+50     	; 0x1880 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    184e:	19 82       	std	Y+1, r1	; 0x01
    1850:	17 c0       	rjmp	.+46     	; 0x1880 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1852:	e0 e3       	ldi	r30, 0x30	; 48
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_readPin+0x10e>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_readPin+0x10a>
    186e:	ca 01       	movw	r24, r20
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    187e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1880:	89 81       	ldd	r24, Y+1	; 0x01
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <GPIO_setupPortDirection+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <GPIO_setupPortDirection+0x8>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	84 30       	cpi	r24, 0x04	; 4
    18a6:	90 f5       	brcc	.+100    	; 0x190c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	3c 83       	std	Y+4, r19	; 0x04
    18b0:	2b 83       	std	Y+3, r18	; 0x03
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	91 05       	cpc	r25, r1
    18ba:	d1 f0       	breq	.+52     	; 0x18f0 <GPIO_setupPortDirection+0x5e>
    18bc:	2b 81       	ldd	r18, Y+3	; 0x03
    18be:	3c 81       	ldd	r19, Y+4	; 0x04
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <GPIO_setupPortDirection+0x3e>
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <GPIO_setupPortDirection+0x54>
    18ce:	1e c0       	rjmp	.+60     	; 0x190c <GPIO_setupPortDirection+0x7a>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	81 f0       	breq	.+32     	; 0x18fa <GPIO_setupPortDirection+0x68>
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	91 05       	cpc	r25, r1
    18e2:	81 f0       	breq	.+32     	; 0x1904 <GPIO_setupPortDirection+0x72>
    18e4:	13 c0       	rjmp	.+38     	; 0x190c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18e6:	ea e3       	ldi	r30, 0x3A	; 58
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	80 83       	st	Z, r24
    18ee:	0e c0       	rjmp	.+28     	; 0x190c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	80 83       	st	Z, r24
    18f8:	09 c0       	rjmp	.+18     	; 0x190c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18fa:	e4 e3       	ldi	r30, 0x34	; 52
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
    1902:	04 c0       	rjmp	.+8      	; 0x190c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1904:	e1 e3       	ldi	r30, 0x31	; 49
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
			break;
		}
	}
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <GPIO_writePort+0x6>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <GPIO_writePort+0x8>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	84 30       	cpi	r24, 0x04	; 4
    192e:	90 f5       	brcc	.+100    	; 0x1994 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	3c 83       	std	Y+4, r19	; 0x04
    1938:	2b 83       	std	Y+3, r18	; 0x03
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	91 05       	cpc	r25, r1
    1942:	d1 f0       	breq	.+52     	; 0x1978 <GPIO_writePort+0x5e>
    1944:	2b 81       	ldd	r18, Y+3	; 0x03
    1946:	3c 81       	ldd	r19, Y+4	; 0x04
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	2c f4       	brge	.+10     	; 0x1958 <GPIO_writePort+0x3e>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	61 f0       	breq	.+24     	; 0x196e <GPIO_writePort+0x54>
    1956:	1e c0       	rjmp	.+60     	; 0x1994 <GPIO_writePort+0x7a>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	81 f0       	breq	.+32     	; 0x1982 <GPIO_writePort+0x68>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	91 05       	cpc	r25, r1
    196a:	81 f0       	breq	.+32     	; 0x198c <GPIO_writePort+0x72>
    196c:	13 c0       	rjmp	.+38     	; 0x1994 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    196e:	eb e3       	ldi	r30, 0x3B	; 59
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 83       	st	Z, r24
    1976:	0e c0       	rjmp	.+28     	; 0x1994 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1978:	e8 e3       	ldi	r30, 0x38	; 56
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	80 83       	st	Z, r24
    1980:	09 c0       	rjmp	.+18     	; 0x1994 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1982:	e5 e3       	ldi	r30, 0x35	; 53
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    198c:	e2 e3       	ldi	r30, 0x32	; 50
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	80 83       	st	Z, r24
			break;
		}
	}
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <GPIO_readPort+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <GPIO_readPort+0x8>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19b0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	84 30       	cpi	r24, 0x04	; 4
    19b6:	90 f5       	brcc	.+100    	; 0x1a1c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	3c 83       	std	Y+4, r19	; 0x04
    19c0:	2b 83       	std	Y+3, r18	; 0x03
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	91 05       	cpc	r25, r1
    19ca:	d1 f0       	breq	.+52     	; 0x1a00 <GPIO_readPort+0x5e>
    19cc:	2b 81       	ldd	r18, Y+3	; 0x03
    19ce:	3c 81       	ldd	r19, Y+4	; 0x04
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <GPIO_readPort+0x3e>
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	61 f0       	breq	.+24     	; 0x19f6 <GPIO_readPort+0x54>
    19de:	1e c0       	rjmp	.+60     	; 0x1a1c <GPIO_readPort+0x7a>
    19e0:	2b 81       	ldd	r18, Y+3	; 0x03
    19e2:	3c 81       	ldd	r19, Y+4	; 0x04
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	31 05       	cpc	r19, r1
    19e8:	81 f0       	breq	.+32     	; 0x1a0a <GPIO_readPort+0x68>
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	9c 81       	ldd	r25, Y+4	; 0x04
    19ee:	83 30       	cpi	r24, 0x03	; 3
    19f0:	91 05       	cpc	r25, r1
    19f2:	81 f0       	breq	.+32     	; 0x1a14 <GPIO_readPort+0x72>
    19f4:	13 c0       	rjmp	.+38     	; 0x1a1c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19f6:	e9 e3       	ldi	r30, 0x39	; 57
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	0e c0       	rjmp	.+28     	; 0x1a1c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a00:	e6 e3       	ldi	r30, 0x36	; 54
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	09 c0       	rjmp	.+18     	; 0x1a1c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a0a:	e3 e3       	ldi	r30, 0x33	; 51
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	04 c0       	rjmp	.+8      	; 0x1a1c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a14:	e0 e3       	ldi	r30, 0x30	; 48
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
    1a36:	2f 93       	push	r18
    1a38:	3f 93       	push	r19
    1a3a:	4f 93       	push	r20
    1a3c:	5f 93       	push	r21
    1a3e:	6f 93       	push	r22
    1a40:	7f 93       	push	r23
    1a42:	8f 93       	push	r24
    1a44:	9f 93       	push	r25
    1a46:	af 93       	push	r26
    1a48:	bf 93       	push	r27
    1a4a:	ef 93       	push	r30
    1a4c:	ff 93       	push	r31
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    1a56:	80 91 7c 00 	lds	r24, 0x007C
    1a5a:	90 91 7d 00 	lds	r25, 0x007D
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	29 f0       	breq	.+10     	; 0x1a6c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application  */
		(*g_callBackPtr_Timer0)();
    1a62:	e0 91 7c 00 	lds	r30, 0x007C
    1a66:	f0 91 7d 00 	lds	r31, 0x007D
    1a6a:	09 95       	icall
	}
}
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	ff 91       	pop	r31
    1a72:	ef 91       	pop	r30
    1a74:	bf 91       	pop	r27
    1a76:	af 91       	pop	r26
    1a78:	9f 91       	pop	r25
    1a7a:	8f 91       	pop	r24
    1a7c:	7f 91       	pop	r23
    1a7e:	6f 91       	pop	r22
    1a80:	5f 91       	pop	r21
    1a82:	4f 91       	pop	r20
    1a84:	3f 91       	pop	r19
    1a86:	2f 91       	pop	r18
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	0f 90       	pop	r0
    1a8e:	1f 90       	pop	r1
    1a90:	18 95       	reti

00001a92 <__vector_19>:

/********************************************************************************/

ISR(TIMER0_COMP_vect)
{
    1a92:	1f 92       	push	r1
    1a94:	0f 92       	push	r0
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	0f 92       	push	r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	2f 93       	push	r18
    1a9e:	3f 93       	push	r19
    1aa0:	4f 93       	push	r20
    1aa2:	5f 93       	push	r21
    1aa4:	6f 93       	push	r22
    1aa6:	7f 93       	push	r23
    1aa8:	8f 93       	push	r24
    1aaa:	9f 93       	push	r25
    1aac:	af 93       	push	r26
    1aae:	bf 93       	push	r27
    1ab0:	ef 93       	push	r30
    1ab2:	ff 93       	push	r31
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    1abc:	80 91 7c 00 	lds	r24, 0x007C
    1ac0:	90 91 7d 00 	lds	r25, 0x007D
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	29 f0       	breq	.+10     	; 0x1ad2 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr_Timer0)();
    1ac8:	e0 91 7c 00 	lds	r30, 0x007C
    1acc:	f0 91 7d 00 	lds	r31, 0x007D
    1ad0:	09 95       	icall
	}
}
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	ff 91       	pop	r31
    1ad8:	ef 91       	pop	r30
    1ada:	bf 91       	pop	r27
    1adc:	af 91       	pop	r26
    1ade:	9f 91       	pop	r25
    1ae0:	8f 91       	pop	r24
    1ae2:	7f 91       	pop	r23
    1ae4:	6f 91       	pop	r22
    1ae6:	5f 91       	pop	r21
    1ae8:	4f 91       	pop	r20
    1aea:	3f 91       	pop	r19
    1aec:	2f 91       	pop	r18
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <__vector_8>:

/********************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	2f 93       	push	r18
    1b04:	3f 93       	push	r19
    1b06:	4f 93       	push	r20
    1b08:	5f 93       	push	r21
    1b0a:	6f 93       	push	r22
    1b0c:	7f 93       	push	r23
    1b0e:	8f 93       	push	r24
    1b10:	9f 93       	push	r25
    1b12:	af 93       	push	r26
    1b14:	bf 93       	push	r27
    1b16:	ef 93       	push	r30
    1b18:	ff 93       	push	r31
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    1b22:	80 91 7e 00 	lds	r24, 0x007E
    1b26:	90 91 7f 00 	lds	r25, 0x007F
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr_Timer1)();
    1b2e:	e0 91 7e 00 	lds	r30, 0x007E
    1b32:	f0 91 7f 00 	lds	r31, 0x007F
    1b36:	09 95       	icall
	}
}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	bf 91       	pop	r27
    1b42:	af 91       	pop	r26
    1b44:	9f 91       	pop	r25
    1b46:	8f 91       	pop	r24
    1b48:	7f 91       	pop	r23
    1b4a:	6f 91       	pop	r22
    1b4c:	5f 91       	pop	r21
    1b4e:	4f 91       	pop	r20
    1b50:	3f 91       	pop	r19
    1b52:	2f 91       	pop	r18
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_6>:

/********************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	2f 93       	push	r18
    1b6a:	3f 93       	push	r19
    1b6c:	4f 93       	push	r20
    1b6e:	5f 93       	push	r21
    1b70:	6f 93       	push	r22
    1b72:	7f 93       	push	r23
    1b74:	8f 93       	push	r24
    1b76:	9f 93       	push	r25
    1b78:	af 93       	push	r26
    1b7a:	bf 93       	push	r27
    1b7c:	ef 93       	push	r30
    1b7e:	ff 93       	push	r31
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    1b88:	80 91 7e 00 	lds	r24, 0x007E
    1b8c:	90 91 7f 00 	lds	r25, 0x007F
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	29 f0       	breq	.+10     	; 0x1b9e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr_Timer1)();
    1b94:	e0 91 7e 00 	lds	r30, 0x007E
    1b98:	f0 91 7f 00 	lds	r31, 0x007F
    1b9c:	09 95       	icall
	}
}
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	ff 91       	pop	r31
    1ba4:	ef 91       	pop	r30
    1ba6:	bf 91       	pop	r27
    1ba8:	af 91       	pop	r26
    1baa:	9f 91       	pop	r25
    1bac:	8f 91       	pop	r24
    1bae:	7f 91       	pop	r23
    1bb0:	6f 91       	pop	r22
    1bb2:	5f 91       	pop	r21
    1bb4:	4f 91       	pop	r20
    1bb6:	3f 91       	pop	r19
    1bb8:	2f 91       	pop	r18
    1bba:	0f 90       	pop	r0
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	0f 90       	pop	r0
    1bc0:	1f 90       	pop	r1
    1bc2:	18 95       	reti

00001bc4 <__vector_4>:

/********************************************************************************/

ISR(TIMER2_OVF_vect)
{
    1bc4:	1f 92       	push	r1
    1bc6:	0f 92       	push	r0
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	2f 93       	push	r18
    1bd0:	3f 93       	push	r19
    1bd2:	4f 93       	push	r20
    1bd4:	5f 93       	push	r21
    1bd6:	6f 93       	push	r22
    1bd8:	7f 93       	push	r23
    1bda:	8f 93       	push	r24
    1bdc:	9f 93       	push	r25
    1bde:	af 93       	push	r26
    1be0:	bf 93       	push	r27
    1be2:	ef 93       	push	r30
    1be4:	ff 93       	push	r31
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    1bee:	80 91 80 00 	lds	r24, 0x0080
    1bf2:	90 91 81 00 	lds	r25, 0x0081
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	29 f0       	breq	.+10     	; 0x1c04 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)();
    1bfa:	e0 91 80 00 	lds	r30, 0x0080
    1bfe:	f0 91 81 00 	lds	r31, 0x0081
    1c02:	09 95       	icall
	}
}
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	bf 91       	pop	r27
    1c0e:	af 91       	pop	r26
    1c10:	9f 91       	pop	r25
    1c12:	8f 91       	pop	r24
    1c14:	7f 91       	pop	r23
    1c16:	6f 91       	pop	r22
    1c18:	5f 91       	pop	r21
    1c1a:	4f 91       	pop	r20
    1c1c:	3f 91       	pop	r19
    1c1e:	2f 91       	pop	r18
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	1f 90       	pop	r1
    1c28:	18 95       	reti

00001c2a <__vector_3>:

/********************************************************************************/

ISR(TIMER2_COMP_vect)
{
    1c2a:	1f 92       	push	r1
    1c2c:	0f 92       	push	r0
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	0f 92       	push	r0
    1c32:	11 24       	eor	r1, r1
    1c34:	2f 93       	push	r18
    1c36:	3f 93       	push	r19
    1c38:	4f 93       	push	r20
    1c3a:	5f 93       	push	r21
    1c3c:	6f 93       	push	r22
    1c3e:	7f 93       	push	r23
    1c40:	8f 93       	push	r24
    1c42:	9f 93       	push	r25
    1c44:	af 93       	push	r26
    1c46:	bf 93       	push	r27
    1c48:	ef 93       	push	r30
    1c4a:	ff 93       	push	r31
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    1c54:	80 91 80 00 	lds	r24, 0x0080
    1c58:	90 91 81 00 	lds	r25, 0x0081
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	29 f0       	breq	.+10     	; 0x1c6a <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)();
    1c60:	e0 91 80 00 	lds	r30, 0x0080
    1c64:	f0 91 81 00 	lds	r31, 0x0081
    1c68:	09 95       	icall
	}
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	ff 91       	pop	r31
    1c70:	ef 91       	pop	r30
    1c72:	bf 91       	pop	r27
    1c74:	af 91       	pop	r26
    1c76:	9f 91       	pop	r25
    1c78:	8f 91       	pop	r24
    1c7a:	7f 91       	pop	r23
    1c7c:	6f 91       	pop	r22
    1c7e:	5f 91       	pop	r21
    1c80:	4f 91       	pop	r20
    1c82:	3f 91       	pop	r19
    1c84:	2f 91       	pop	r18
    1c86:	0f 90       	pop	r0
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	0f 90       	pop	r0
    1c8c:	1f 90       	pop	r1
    1c8e:	18 95       	reti

00001c90 <Timer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	62 97       	sbiw	r28, 0x12	; 18
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_id)
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	80 81       	ld	r24, Z
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	3a 8b       	std	Y+18, r19	; 0x12
    1cb4:	29 8b       	std	Y+17, r18	; 0x11
    1cb6:	89 89       	ldd	r24, Y+17	; 0x11
    1cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <Timer_init+0x32>
    1cc0:	6b c0       	rjmp	.+214    	; 0x1d98 <Timer_init+0x108>
    1cc2:	29 89       	ldd	r18, Y+17	; 0x11
    1cc4:	3a 89       	ldd	r19, Y+18	; 0x12
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <Timer_init+0x3e>
    1ccc:	d8 c0       	rjmp	.+432    	; 0x1e7e <Timer_init+0x1ee>
    1cce:	89 89       	ldd	r24, Y+17	; 0x11
    1cd0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <Timer_init+0x48>
    1cd6:	25 c1       	rjmp	.+586    	; 0x1f22 <Timer_init+0x292>
	{
	case TIMER0:

		TCCR0 |= (1<<7);
    1cd8:	a3 e5       	ldi	r26, 0x53	; 83
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e3 e5       	ldi	r30, 0x53	; 83
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 68       	ori	r24, 0x80	; 128
    1ce4:	8c 93       	st	X, r24
		TCNT0 = (TCNT0 & 0x00) | (Config_Ptr->init_value); //Set Timer initial value
    1ce6:	e2 e5       	ldi	r30, 0x52	; 82
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	90 81       	ld	r25, Z
    1cec:	a2 e5       	ldi	r26, 0x52	; 82
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	84 81       	ldd	r24, Z+4	; 0x04
    1cf6:	95 81       	ldd	r25, Z+5	; 0x05
    1cf8:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock); //Set Timer clock
    1cfa:	a3 e5       	ldi	r26, 0x53	; 83
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e3 e5       	ldi	r30, 0x53	; 83
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	98 2f       	mov	r25, r24
    1d06:	98 7f       	andi	r25, 0xF8	; 248
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	89 2b       	or	r24, r25
    1d10:	8c 93       	st	X, r24

		switch(Config_Ptr->timer_mode)
    1d12:	e9 81       	ldd	r30, Y+1	; 0x01
    1d14:	fa 81       	ldd	r31, Y+2	; 0x02
    1d16:	81 81       	ldd	r24, Z+1	; 0x01
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	3f 87       	std	Y+15, r19	; 0x0f
    1d1e:	2e 87       	std	Y+14, r18	; 0x0e
    1d20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <Timer_init+0xa4>
    1d28:	2e 85       	ldd	r18, Y+14	; 0x0e
    1d2a:	3f 85       	ldd	r19, Y+15	; 0x0f
    1d2c:	21 30       	cpi	r18, 0x01	; 1
    1d2e:	31 05       	cpc	r19, r1
    1d30:	a9 f0       	breq	.+42     	; 0x1d5c <Timer_init+0xcc>
    1d32:	f7 c0       	rjmp	.+494    	; 0x1f22 <Timer_init+0x292>
		{
		case OVERFLOW:

			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    1d34:	a9 e5       	ldi	r26, 0x59	; 89
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e9 e5       	ldi	r30, 0x59	; 89
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	81 60       	ori	r24, 0x01	; 1
    1d40:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0x07) | (Config_Ptr->timer_mode); //Set Timer mode
    1d42:	a3 e5       	ldi	r26, 0x53	; 83
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e3 e5       	ldi	r30, 0x53	; 83
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	97 70       	andi	r25, 0x07	; 7
    1d50:	e9 81       	ldd	r30, Y+1	; 0x01
    1d52:	fa 81       	ldd	r31, Y+2	; 0x02
    1d54:	81 81       	ldd	r24, Z+1	; 0x01
    1d56:	89 2b       	or	r24, r25
    1d58:	8c 93       	st	X, r24
    1d5a:	e3 c0       	rjmp	.+454    	; 0x1f22 <Timer_init+0x292>
			break;

		case COMPARE:

			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    1d5c:	a9 e5       	ldi	r26, 0x59	; 89
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e9 e5       	ldi	r30, 0x59	; 89
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	82 60       	ori	r24, 0x02	; 2
    1d68:	8c 93       	st	X, r24
			OCR0 = (OCR0 & 0x00) | (Config_Ptr->compare_value); //Set Timer compare value
    1d6a:	ec e5       	ldi	r30, 0x5C	; 92
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	30 81       	ld	r19, Z
    1d70:	ac e5       	ldi	r26, 0x5C	; 92
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	86 81       	ldd	r24, Z+6	; 0x06
    1d7a:	97 81       	ldd	r25, Z+7	; 0x07
    1d7c:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0x07) | (Config_Ptr->timer_mode); //Set Timer mode
    1d7e:	a3 e5       	ldi	r26, 0x53	; 83
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e3 e5       	ldi	r30, 0x53	; 83
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	98 2f       	mov	r25, r24
    1d8a:	97 70       	andi	r25, 0x07	; 7
    1d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d90:	81 81       	ldd	r24, Z+1	; 0x01
    1d92:	89 2b       	or	r24, r25
    1d94:	8c 93       	st	X, r24
    1d96:	c5 c0       	rjmp	.+394    	; 0x1f22 <Timer_init+0x292>
		/***************************************************************************************/

		case TIMER1:


			TCNT1 = (TCNT1 & 0x00) | (Config_Ptr->init_value); //Set Timer initial value
    1d98:	ec e4       	ldi	r30, 0x4C	; 76
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	ac e4       	ldi	r26, 0x4C	; 76
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e9 81       	ldd	r30, Y+1	; 0x01
    1da6:	fa 81       	ldd	r31, Y+2	; 0x02
    1da8:	84 81       	ldd	r24, Z+4	; 0x04
    1daa:	95 81       	ldd	r25, Z+5	; 0x05
    1dac:	11 96       	adiw	r26, 0x01	; 1
    1dae:	9c 93       	st	X, r25
    1db0:	8e 93       	st	-X, r24
			TCCR1A = 0x08; //Set Timer mode
    1db2:	ef e4       	ldi	r30, 0x4F	; 79
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	88 e0       	ldi	r24, 0x08	; 8
    1db8:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0x07) | (Config_Ptr->clock); //Set Timer clock
    1dba:	ae e4       	ldi	r26, 0x4E	; 78
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ee e4       	ldi	r30, 0x4E	; 78
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	97 70       	andi	r25, 0x07	; 7
    1dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dca:	fa 81       	ldd	r31, Y+2	; 0x02
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	89 2b       	or	r24, r25
    1dd0:	8c 93       	st	X, r24

			switch(Config_Ptr->timer_mode)
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	81 81       	ldd	r24, Z+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	3a 87       	std	Y+10, r19	; 0x0a
    1dde:	29 87       	std	Y+9, r18	; 0x09
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	31 f0       	breq	.+12     	; 0x1df4 <Timer_init+0x164>
    1de8:	29 85       	ldd	r18, Y+9	; 0x09
    1dea:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dec:	21 30       	cpi	r18, 0x01	; 1
    1dee:	31 05       	cpc	r19, r1
    1df0:	e9 f0       	breq	.+58     	; 0x1e2c <Timer_init+0x19c>
    1df2:	97 c0       	rjmp	.+302    	; 0x1f22 <Timer_init+0x292>
			{
			case OVERFLOW:

				TIMSK |= (1<<TOIE1); /* Enable Timer1 OverFlow A Interrupt */
    1df4:	a9 e5       	ldi	r26, 0x59	; 89
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 e5       	ldi	r30, 0x59	; 89
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	84 60       	ori	r24, 0x04	; 4
    1e00:	8c 93       	st	X, r24
				TCCR1B = (TCCR1B & 0x07) | ((Config_Ptr->timer_mode)<<3); //Set Timer mode
    1e02:	ae e4       	ldi	r26, 0x4E	; 78
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	ee e4       	ldi	r30, 0x4E	; 78
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	27 70       	andi	r18, 0x07	; 7
    1e10:	e9 81       	ldd	r30, Y+1	; 0x01
    1e12:	fa 81       	ldd	r31, Y+2	; 0x02
    1e14:	81 81       	ldd	r24, Z+1	; 0x01
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	82 2b       	or	r24, r18
    1e28:	8c 93       	st	X, r24
    1e2a:	7b c0       	rjmp	.+246    	; 0x1f22 <Timer_init+0x292>
				break;

			case COMPARE:

				TCCR1B = (TCCR1B & 0x07) | ((Config_Ptr->timer_mode)<<3); //Set Timer mode
    1e2c:	ae e4       	ldi	r26, 0x4E	; 78
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ee e4       	ldi	r30, 0x4E	; 78
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	27 70       	andi	r18, 0x07	; 7
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	81 81       	ldd	r24, Z+1	; 0x01
    1e40:	88 2f       	mov	r24, r24
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	82 2b       	or	r24, r18
    1e52:	8c 93       	st	X, r24
				TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    1e54:	a9 e5       	ldi	r26, 0x59	; 89
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e9 e5       	ldi	r30, 0x59	; 89
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	80 61       	ori	r24, 0x10	; 16
    1e60:	8c 93       	st	X, r24
				OCR1A = (OCR1A & 0x00) | (Config_Ptr->compare_value); //Set Timer compare value
    1e62:	ea e4       	ldi	r30, 0x4A	; 74
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	aa e4       	ldi	r26, 0x4A	; 74
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	86 81       	ldd	r24, Z+6	; 0x06
    1e74:	97 81       	ldd	r25, Z+7	; 0x07
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	9c 93       	st	X, r25
    1e7a:	8e 93       	st	-X, r24
    1e7c:	52 c0       	rjmp	.+164    	; 0x1f22 <Timer_init+0x292>

			/***************************************************************************************/
			case TIMER2:


				TCCR2 = (1<<FOC2);
    1e7e:	e5 e4       	ldi	r30, 0x45	; 69
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 e8       	ldi	r24, 0x80	; 128
    1e84:	80 83       	st	Z, r24
				TCNT2 = (TCNT2 & 0x00) | (Config_Ptr->init_value); //Set Timer initial value
    1e86:	e4 e4       	ldi	r30, 0x44	; 68
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	90 81       	ld	r25, Z
    1e8c:	a4 e4       	ldi	r26, 0x44	; 68
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	84 81       	ldd	r24, Z+4	; 0x04
    1e96:	95 81       	ldd	r25, Z+5	; 0x05
    1e98:	8c 93       	st	X, r24
				TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->clock2); //Set Timer clock
    1e9a:	a5 e4       	ldi	r26, 0x45	; 69
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e4       	ldi	r30, 0x45	; 69
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	98 7f       	andi	r25, 0xF8	; 248
    1ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1eac:	83 81       	ldd	r24, Z+3	; 0x03
    1eae:	89 2b       	or	r24, r25
    1eb0:	8c 93       	st	X, r24

				switch(Config_Ptr->timer_mode)
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3d 83       	std	Y+5, r19	; 0x05
    1ebe:	2c 83       	std	Y+4, r18	; 0x04
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	31 f0       	breq	.+12     	; 0x1ed4 <Timer_init+0x244>
    1ec8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ecc:	21 30       	cpi	r18, 0x01	; 1
    1ece:	31 05       	cpc	r19, r1
    1ed0:	81 f0       	breq	.+32     	; 0x1ef2 <Timer_init+0x262>
    1ed2:	27 c0       	rjmp	.+78     	; 0x1f22 <Timer_init+0x292>
				{
				case OVERFLOW:

					TIMSK |= (1<<TOIE2); // Enable Timer2 Overflow Interrupt
    1ed4:	a9 e5       	ldi	r26, 0x59	; 89
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e9 e5       	ldi	r30, 0x59	; 89
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	80 64       	ori	r24, 0x40	; 64
    1ee0:	8c 93       	st	X, r24
					TCCR2 &= ~(1<<WGM21) & ~(1<<WGM20); //Set Timer mode
    1ee2:	a5 e4       	ldi	r26, 0x45	; 69
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e5 e4       	ldi	r30, 0x45	; 69
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	87 7b       	andi	r24, 0xB7	; 183
    1eee:	8c 93       	st	X, r24
    1ef0:	18 c0       	rjmp	.+48     	; 0x1f22 <Timer_init+0x292>
					break;

				case COMPARE:

					TIMSK |= (1<<OCIE2); // Enable Timer0 Compare Interrupt
    1ef2:	a9 e5       	ldi	r26, 0x59	; 89
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e9 e5       	ldi	r30, 0x59	; 89
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	80 68       	ori	r24, 0x80	; 128
    1efe:	8c 93       	st	X, r24
					OCR2 = (OCR2 & 0x00) | (Config_Ptr->compare_value); //Set Timer compare value
    1f00:	e3 e4       	ldi	r30, 0x43	; 67
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	30 81       	ld	r19, Z
    1f06:	a3 e4       	ldi	r26, 0x43	; 67
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0e:	86 81       	ldd	r24, Z+6	; 0x06
    1f10:	97 81       	ldd	r25, Z+7	; 0x07
    1f12:	8c 93       	st	X, r24
					TCCR2 |= (1<<WGM21); //Set Timer mode
    1f14:	a5 e4       	ldi	r26, 0x45	; 69
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e5 e4       	ldi	r30, 0x45	; 69
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 60       	ori	r24, 0x08	; 8
    1f20:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    1f22:	62 96       	adiw	r28, 0x12	; 18
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <Timer_deInit>:
/***************************************************************************************/
void Timer_deInit(Timer_Id timer_id)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <Timer_deInit+0x6>
    1f3a:	0f 92       	push	r0
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_id)
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	3b 83       	std	Y+3, r19	; 0x03
    1f4a:	2a 83       	std	Y+2, r18	; 0x02
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	91 05       	cpc	r25, r1
    1f54:	99 f0       	breq	.+38     	; 0x1f7c <Timer_deInit+0x48>
    1f56:	2a 81       	ldd	r18, Y+2	; 0x02
    1f58:	3b 81       	ldd	r19, Y+3	; 0x03
    1f5a:	22 30       	cpi	r18, 0x02	; 2
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	09 f1       	breq	.+66     	; 0x1fa2 <Timer_deInit+0x6e>
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	9b 81       	ldd	r25, Y+3	; 0x03
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	31 f5       	brne	.+76     	; 0x1fb4 <Timer_deInit+0x80>
	{
	case TIMER0:


		/* Clear All Timer0 Registers */
		TCNT0 = 0;
    1f68:	e2 e5       	ldi	r30, 0x52	; 82
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	10 82       	st	Z, r1
		TCCR0 = 0;
    1f6e:	e3 e5       	ldi	r30, 0x53	; 83
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	10 82       	st	Z, r1
		OCR0 = 0;
    1f74:	ec e5       	ldi	r30, 0x5C	; 92
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	10 82       	st	Z, r1
    1f7a:	1c c0       	rjmp	.+56     	; 0x1fb4 <Timer_deInit+0x80>
		break;

	case TIMER1:

		/* Clear All Timer1 Registers */
		TCCR1A = 0;
    1f7c:	ef e4       	ldi	r30, 0x4F	; 79
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	10 82       	st	Z, r1
		TCCR1B = 0;
    1f82:	ee e4       	ldi	r30, 0x4E	; 78
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	10 82       	st	Z, r1
		TCNT1 = 0;
    1f88:	ec e4       	ldi	r30, 0x4C	; 76
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	11 82       	std	Z+1, r1	; 0x01
    1f8e:	10 82       	st	Z, r1
		OCR1A = 0;
    1f90:	ea e4       	ldi	r30, 0x4A	; 74
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	11 82       	std	Z+1, r1	; 0x01
    1f96:	10 82       	st	Z, r1
		OCR1B = 0;
    1f98:	e8 e4       	ldi	r30, 0x48	; 72
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	11 82       	std	Z+1, r1	; 0x01
    1f9e:	10 82       	st	Z, r1
    1fa0:	09 c0       	rjmp	.+18     	; 0x1fb4 <Timer_deInit+0x80>
		break;

	case TIMER2:

		/* Clear All Timer2 Registers */
		TCCR2 = 0;
    1fa2:	e5 e4       	ldi	r30, 0x45	; 69
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	10 82       	st	Z, r1
		TCNT2 = 0;
    1fa8:	e4 e4       	ldi	r30, 0x44	; 68
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	10 82       	st	Z, r1
		OCR2 = 0;
    1fae:	e3 e4       	ldi	r30, 0x43	; 67
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	10 82       	st	Z, r1
		break;
	}
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <Timer0_setCallBack>:

/***************************************************************************************/

void Timer0_setCallBack(void(*t_ptr)(void))
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <Timer0_setCallBack+0x6>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer0 = t_ptr;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	90 93 7d 00 	sts	0x007D, r25
    1fd6:	80 93 7c 00 	sts	0x007C, r24
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <Timer1_setCallBack>:

/***************************************************************************************/

void Timer1_setCallBack(void(*t_ptr)(void))
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <Timer1_setCallBack+0x6>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer1 = t_ptr;
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	90 93 7f 00 	sts	0x007F, r25
    1ffa:	80 93 7e 00 	sts	0x007E, r24
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <Timer2_setCallBack>:

/***************************************************************************************/

void Timer2_setCallBack(void(*t_ptr)(void))
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <Timer2_setCallBack+0x6>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer2= t_ptr;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	90 93 81 00 	sts	0x0081, r25
    201e:	80 93 80 00 	sts	0x0080, r24
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <TWI_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(const I2c_ConfigType * Config_Ptr)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <TWI_init+0x6>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <TWI_init+0x8>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	9a 83       	std	Y+2, r25	; 0x02
    203a:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate determination: using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (TWBR & 0x00) | (Config_Ptr->bit_rate);
    203c:	e0 e2       	ldi	r30, 0x20	; 32
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	a0 e2       	ldi	r26, 0x20	; 32
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e9 81       	ldd	r30, Y+1	; 0x01
    2048:	fa 81       	ldd	r31, Y+2	; 0x02
    204a:	80 81       	ld	r24, Z
    204c:	8c 93       	st	X, r24
    TWSR = (TWSR & 0xFC) | (Config_Ptr->prescaler);
    204e:	a1 e2       	ldi	r26, 0x21	; 33
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e1 e2       	ldi	r30, 0x21	; 33
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	98 2f       	mov	r25, r24
    205a:	9c 7f       	andi	r25, 0xFC	; 252
    205c:	e9 81       	ldd	r30, Y+1	; 0x01
    205e:	fa 81       	ldd	r31, Y+2	; 0x02
    2060:	81 81       	ldd	r24, Z+1	; 0x01
    2062:	89 2b       	or	r24, r25
    2064:	8c 93       	st	X, r24

    TWAR = (TWAR & 0x00) | (Config_Ptr->address);
    2066:	e2 e2       	ldi	r30, 0x22	; 34
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	a2 e2       	ldi	r26, 0x22	; 34
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e9 81       	ldd	r30, Y+1	; 0x01
    2072:	fa 81       	ldd	r31, Y+2	; 0x02
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2078:	e6 e5       	ldi	r30, 0x56	; 86
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	84 e0       	ldi	r24, 0x04	; 4
    207e:	80 83       	st	Z, r24
}
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <TWI_start>:

void TWI_start(void)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2096:	e6 e5       	ldi	r30, 0x56	; 86
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	84 ea       	ldi	r24, 0xA4	; 164
    209c:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    209e:	e6 e5       	ldi	r30, 0x56	; 86
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 23       	and	r24, r24
    20a6:	dc f7       	brge	.-10     	; 0x209e <TWI_start+0x10>
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <TWI_stop>:

void TWI_stop(void)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    20b6:	e6 e5       	ldi	r30, 0x56	; 86
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	84 e9       	ldi	r24, 0x94	; 148
    20bc:	80 83       	st	Z, r24
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    20d0:	e3 e2       	ldi	r30, 0x23	; 35
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    20d8:	e6 e5       	ldi	r30, 0x56	; 86
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	84 e8       	ldi	r24, 0x84	; 132
    20de:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20e0:	e6 e5       	ldi	r30, 0x56	; 86
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	88 23       	and	r24, r24
    20e8:	dc f7       	brge	.-10     	; 0x20e0 <TWI_writeByte+0x1c>
}
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    20fa:	e6 e5       	ldi	r30, 0x56	; 86
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	84 ec       	ldi	r24, 0xC4	; 196
    2100:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2102:	e6 e5       	ldi	r30, 0x56	; 86
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	88 23       	and	r24, r24
    210a:	dc f7       	brge	.-10     	; 0x2102 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    210c:	e3 e2       	ldi	r30, 0x23	; 35
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
}
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2120:	e6 e5       	ldi	r30, 0x56	; 86
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	84 e8       	ldi	r24, 0x84	; 132
    2126:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2128:	e6 e5       	ldi	r30, 0x56	; 86
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	88 23       	and	r24, r24
    2130:	dc f7       	brge	.-10     	; 0x2128 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2132:	e3 e2       	ldi	r30, 0x23	; 35
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
}
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	0f 92       	push	r0
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2148:	e1 e2       	ldi	r30, 0x21	; 33
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	88 7f       	andi	r24, 0xF8	; 248
    2150:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2152:	89 81       	ldd	r24, Y+1	; 0x01
}
    2154:	0f 90       	pop	r0
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <UART_init+0x6>
    2162:	00 d0       	rcall	.+0      	; 0x2164 <UART_init+0x8>
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    216c:	1a 82       	std	Y+2, r1	; 0x02
    216e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2170:	eb e2       	ldi	r30, 0x2B	; 43
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2178:	ea e2       	ldi	r30, 0x2A	; 42
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	88 e1       	ldi	r24, 0x18	; 24
    217e:	80 83       	st	Z, r24
	 * UPM1:0  = Parity bit
	 * USBS    = Stop bit
	 * UCSZ1:0 = Character size
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2180:	e0 e4       	ldi	r30, 0x40	; 64
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 e8       	ldi	r24, 0x80	; 128
    2186:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity_bit)<<4);
    2188:	a0 e4       	ldi	r26, 0x40	; 64
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e0 e4       	ldi	r30, 0x40	; 64
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	28 2f       	mov	r18, r24
    2194:	2f 7c       	andi	r18, 0xCF	; 207
    2196:	eb 81       	ldd	r30, Y+3	; 0x03
    2198:	fc 81       	ldd	r31, Y+4	; 0x04
    219a:	80 81       	ld	r24, Z
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	82 95       	swap	r24
    21a2:	92 95       	swap	r25
    21a4:	90 7f       	andi	r25, 0xF0	; 240
    21a6:	98 27       	eor	r25, r24
    21a8:	80 7f       	andi	r24, 0xF0	; 240
    21aa:	98 27       	eor	r25, r24
    21ac:	82 2b       	or	r24, r18
    21ae:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->char_size)<<1);
    21b0:	a0 e4       	ldi	r26, 0x40	; 64
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e0 e4       	ldi	r30, 0x40	; 64
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	28 2f       	mov	r18, r24
    21bc:	29 7f       	andi	r18, 0xF9	; 249
    21be:	eb 81       	ldd	r30, Y+3	; 0x03
    21c0:	fc 81       	ldd	r31, Y+4	; 0x04
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	82 2b       	or	r24, r18
    21ce:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    21d0:	a0 e4       	ldi	r26, 0x40	; 64
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e0 e4       	ldi	r30, 0x40	; 64
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	28 2f       	mov	r18, r24
    21dc:	27 7f       	andi	r18, 0xF7	; 247
    21de:	eb 81       	ldd	r30, Y+3	; 0x03
    21e0:	fc 81       	ldd	r31, Y+4	; 0x04
    21e2:	81 81       	ldd	r24, Z+1	; 0x01
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	82 2b       	or	r24, r18
    21f6:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    21f8:	eb 81       	ldd	r30, Y+3	; 0x03
    21fa:	fc 81       	ldd	r31, Y+4	; 0x04
    21fc:	83 81       	ldd	r24, Z+3	; 0x03
    21fe:	94 81       	ldd	r25, Z+4	; 0x04
    2200:	a5 81       	ldd	r26, Z+5	; 0x05
    2202:	b6 81       	ldd	r27, Z+6	; 0x06
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	aa 1f       	adc	r26, r26
    220a:	bb 1f       	adc	r27, r27
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	aa 1f       	adc	r26, r26
    2212:	bb 1f       	adc	r27, r27
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	aa 1f       	adc	r26, r26
    221a:	bb 1f       	adc	r27, r27
    221c:	9c 01       	movw	r18, r24
    221e:	ad 01       	movw	r20, r26
    2220:	80 e4       	ldi	r24, 0x40	; 64
    2222:	92 e4       	ldi	r25, 0x42	; 66
    2224:	af e0       	ldi	r26, 0x0F	; 15
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 c1 11 	call	0x2382	; 0x2382 <__udivmodsi4>
    2230:	da 01       	movw	r26, r20
    2232:	c9 01       	movw	r24, r18
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    223a:	e0 e4       	ldi	r30, 0x40	; 64
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	89 2f       	mov	r24, r25
    2244:	99 27       	eor	r25, r25
    2246:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2248:	e9 e2       	ldi	r30, 0x29	; 41
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	80 83       	st	Z, r24
}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	0f 92       	push	r0
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    226a:	eb e2       	ldi	r30, 0x2B	; 43
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	80 72       	andi	r24, 0x20	; 32
    2276:	90 70       	andi	r25, 0x00	; 0
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	b9 f3       	breq	.-18     	; 0x226a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    227c:	ec e2       	ldi	r30, 0x2C	; 44
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2294:	eb e2       	ldi	r30, 0x2B	; 43
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	88 23       	and	r24, r24
    229c:	dc f7       	brge	.-10     	; 0x2294 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    229e:	ec e2       	ldi	r30, 0x2C	; 44
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
}
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <UART_sendString+0x6>
    22b0:	0f 92       	push	r0
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	9b 83       	std	Y+3, r25	; 0x03
    22b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22ba:	19 82       	std	Y+1, r1	; 0x01
    22bc:	0e c0       	rjmp	.+28     	; 0x22da <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	9b 81       	ldd	r25, Y+3	; 0x03
    22c8:	fc 01       	movw	r30, r24
    22ca:	e2 0f       	add	r30, r18
    22cc:	f3 1f       	adc	r31, r19
    22ce:	80 81       	ld	r24, Z
    22d0:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_sendByte>
		i++;
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	fc 01       	movw	r30, r24
    22e6:	e2 0f       	add	r30, r18
    22e8:	f3 1f       	adc	r31, r19
    22ea:	80 81       	ld	r24, Z
    22ec:	88 23       	and	r24, r24
    22ee:	39 f7       	brne	.-50     	; 0x22be <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <UART_receiveString+0xa>
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	9b 83       	std	Y+3, r25	; 0x03
    230e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2310:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	9b 81       	ldd	r25, Y+3	; 0x03
    231c:	8c 01       	movw	r16, r24
    231e:	02 0f       	add	r16, r18
    2320:	13 1f       	adc	r17, r19
    2322:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	0f c0       	rjmp	.+30     	; 0x234a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	8c 01       	movw	r16, r24
    233e:	02 0f       	add	r16, r18
    2340:	13 1f       	adc	r17, r19
    2342:	0e 94 46 11 	call	0x228c	; 0x228c <UART_recieveByte>
    2346:	f8 01       	movw	r30, r16
    2348:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	fc 01       	movw	r30, r24
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	80 81       	ld	r24, Z
    235c:	83 32       	cpi	r24, 0x23	; 35
    235e:	31 f7       	brne	.-52     	; 0x232c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	9b 81       	ldd	r25, Y+3	; 0x03
    236a:	fc 01       	movw	r30, r24
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
    2370:	10 82       	st	Z, r1
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <__udivmodsi4>:
    2382:	a1 e2       	ldi	r26, 0x21	; 33
    2384:	1a 2e       	mov	r1, r26
    2386:	aa 1b       	sub	r26, r26
    2388:	bb 1b       	sub	r27, r27
    238a:	fd 01       	movw	r30, r26
    238c:	0d c0       	rjmp	.+26     	; 0x23a8 <__udivmodsi4_ep>

0000238e <__udivmodsi4_loop>:
    238e:	aa 1f       	adc	r26, r26
    2390:	bb 1f       	adc	r27, r27
    2392:	ee 1f       	adc	r30, r30
    2394:	ff 1f       	adc	r31, r31
    2396:	a2 17       	cp	r26, r18
    2398:	b3 07       	cpc	r27, r19
    239a:	e4 07       	cpc	r30, r20
    239c:	f5 07       	cpc	r31, r21
    239e:	20 f0       	brcs	.+8      	; 0x23a8 <__udivmodsi4_ep>
    23a0:	a2 1b       	sub	r26, r18
    23a2:	b3 0b       	sbc	r27, r19
    23a4:	e4 0b       	sbc	r30, r20
    23a6:	f5 0b       	sbc	r31, r21

000023a8 <__udivmodsi4_ep>:
    23a8:	66 1f       	adc	r22, r22
    23aa:	77 1f       	adc	r23, r23
    23ac:	88 1f       	adc	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	1a 94       	dec	r1
    23b2:	69 f7       	brne	.-38     	; 0x238e <__udivmodsi4_loop>
    23b4:	60 95       	com	r22
    23b6:	70 95       	com	r23
    23b8:	80 95       	com	r24
    23ba:	90 95       	com	r25
    23bc:	9b 01       	movw	r18, r22
    23be:	ac 01       	movw	r20, r24
    23c0:	bd 01       	movw	r22, r26
    23c2:	cf 01       	movw	r24, r30
    23c4:	08 95       	ret

000023c6 <__prologue_saves__>:
    23c6:	2f 92       	push	r2
    23c8:	3f 92       	push	r3
    23ca:	4f 92       	push	r4
    23cc:	5f 92       	push	r5
    23ce:	6f 92       	push	r6
    23d0:	7f 92       	push	r7
    23d2:	8f 92       	push	r8
    23d4:	9f 92       	push	r9
    23d6:	af 92       	push	r10
    23d8:	bf 92       	push	r11
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	ca 1b       	sub	r28, r26
    23f0:	db 0b       	sbc	r29, r27
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	09 94       	ijmp

000023fe <__epilogue_restores__>:
    23fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2400:	39 88       	ldd	r3, Y+17	; 0x11
    2402:	48 88       	ldd	r4, Y+16	; 0x10
    2404:	5f 84       	ldd	r5, Y+15	; 0x0f
    2406:	6e 84       	ldd	r6, Y+14	; 0x0e
    2408:	7d 84       	ldd	r7, Y+13	; 0x0d
    240a:	8c 84       	ldd	r8, Y+12	; 0x0c
    240c:	9b 84       	ldd	r9, Y+11	; 0x0b
    240e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2410:	b9 84       	ldd	r11, Y+9	; 0x09
    2412:	c8 84       	ldd	r12, Y+8	; 0x08
    2414:	df 80       	ldd	r13, Y+7	; 0x07
    2416:	ee 80       	ldd	r14, Y+6	; 0x06
    2418:	fd 80       	ldd	r15, Y+5	; 0x05
    241a:	0c 81       	ldd	r16, Y+4	; 0x04
    241c:	1b 81       	ldd	r17, Y+3	; 0x03
    241e:	aa 81       	ldd	r26, Y+2	; 0x02
    2420:	b9 81       	ldd	r27, Y+1	; 0x01
    2422:	ce 0f       	add	r28, r30
    2424:	d1 1d       	adc	r29, r1
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	ed 01       	movw	r28, r26
    2432:	08 95       	ret

00002434 <_exit>:
    2434:	f8 94       	cli

00002436 <__stop_program>:
    2436:	ff cf       	rjmp	.-2      	; 0x2436 <__stop_program>
